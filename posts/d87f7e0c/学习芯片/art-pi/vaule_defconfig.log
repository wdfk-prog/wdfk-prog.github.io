# GNU Make 4.2.1
# 为 x86_64-pc-linux-gnu 编译
# Copyright (C) 1988-2016 Free Software Foundation, Inc.
# 许可证：GPLv3+：GNU 通用公共许可证第 3 版或更新版本<http://gnu.org/licenses/gpl.html>。
# 本软件是自由软件：您可以自由修改和重新发布它。
# 在法律允许的范围内没有其他保证。

# make 数据基础，打印在 Sat Mar  1 21:52:56 2025

# 变量

# makefile (从“include/config/auto.conf”，行 291)
CONFIG_DEFAULT_INIT = 
# 环境
VSCODE_GIT_ASKPASS_MAIN = /home/embedsky/.vscode-server/cli/servers/Stable-e54c774e0add60467559eb0d1e229c6452cf8447/server/extensions/git/dist/askpass-main.js
# makefile (从“scripts/Makefile.host”，行 14)
cmd_bison = $(YACC) -o $(basename $@).c --defines=$(basename $@).h -t -l $<
# makefile (从“scripts/Kbuild.include”，行 206)
cmd_and_fixdep = $(cmd); $(objtree)/scripts/basic/fixdep $(depfile) $@ '$(make-cmd)' > $(dot-target).cmd; rm -f $(depfile)
# makefile (从“include/config/auto.conf”，行 465)
CONFIG_USB_OHCI_LITTLE_ENDIAN = y
# 自动
?F = $(notdir $?)
# makefile (从“scripts/Makefile.build”，行 428)
hostprogs := fixdep
# 自动
<D = $(patsubst %/,%,$(dir $<))
# makefile (从“include/config/auto.conf”，行 94)
CONFIG_CONTEXT_TRACKING = y
# makefile (从“scripts/Kbuild.include”，行 32)
test-lt = $(call test-gt, $2, $1)
# 环境
AFLAGS_KERNEL = 
# makefile (从“scripts/Kbuild.include”，行 97)
define filechk
	$(check-FORCE)
	$(Q)set -e; mkdir -p $(dir $@); trap "rm -f $(tmp-target)" EXIT; { $(filechk_$(1)); } > $(tmp-target); if [ ! -r $@ ] || ! cmp -s $@ $(tmp-target); then $(kecho) '  UPD     $@'; mv -f $(tmp-target) $@; fi
endef
# makefile (从“include/config/auto.conf”，行 504)
CONFIG_HAVE_ARCH_SECCOMP = y
# makefile (从“scripts/Makefile.lib”，行 53)
real-search = $(foreach m, $1, $(if $(call suffix-search, $m, $2, $3 -), $(call suffix-search, $m, $2, $3), $m))
# 环境
XDG_SESSION_CLASS = user
# 环境
PATCHLEVEL = 14
# makefile (从“include/config/auto.conf”，行 261)
CONFIG_ZBOOT_ROM_TEXT = 0x0
# makefile (从“include/config/auto.conf”，行 92)
CONFIG_RTC_INTF_SYSFS = y
# makefile (从“include/config/auto.conf”，行 431)
CONFIG_MMC_STM32_SDMMC = y
# 环境
XDG_SESSION_TYPE = tty
# makefile (从“include/config/auto.conf”，行 185)
CONFIG_MEMBARRIER = y
# makefile (从“scripts/Makefile.host”，行 135)
quiet_cmd_host-cxxmulti = HOSTLD  $@
# 环境
KBUILD_HOSTLDFLAGS = $(subst ,, )
# makefile (从“scripts/Makefile.lib”，行 315)
cmd_cc_o_c = $(CC) $(c_flags) -c -o $@ $< $(cmd_ld_single) $(cmd_objtool)
# makefile (从“include/config/auto.conf”，行 201)
CONFIG_BLOCK = y
# makefile (从“include/config/auto.conf”，行 323)
CONFIG_MACH_STM32H743 = y
# 环境
LDFLAGS_MODULE = 
# 自动
@F = $(notdir $@)
# makefile (从“scripts/Makefile.lib”，行 549)
filechk_offsets = 	 echo "#ifndef $2"; echo "#define $2"; echo "/*"; echo " * DO NOT MODIFY."; echo " *"; echo " * This file was generated by Kbuild"; echo " */"; echo ""; sed -ne $(sed-offsets) < $<; echo ""; echo "#endif"
# makefile
CURDIR := /home/embedsky/share/linux-stable
# 环境
NM = arm-none-eabi-nm
# makefile (从“include/config/auto.conf”，行 15)
CONFIG_SBITMAP = y
# 环境
Q = @
# makefile (从“scripts/Makefile.lib”，行 423)
quiet_cmd_lzma_with_size = LZMA    $@
# 环境
XZ = xz
# makefile (从“scripts/Makefile.build”，行 318)
cmd_gensymtypes_S = $(getasmexports) | $(CPP) -D__GENKSYMS__ $(c_flags) -xc - | $(genksyms)
# makefile (从“include/config/auto.conf”，行 332)
CONFIG_NLS_DEFAULT = iso8859-1
# makefile (从“include/config/auto.conf”，行 119)
CONFIG_CMDLINE = 
# 环境
_ = /usr/bin/make
# makefile (从“include/config/auto.conf”，行 37)
CONFIG_TICK_ONESHOT = y
# makefile (从“scripts/Makefile.build”，行 22)
subdir-m := 
# 自动
?D = $(patsubst %/,%,$(dir $?))
# makefile (从“scripts/Makefile.build”，行 126)
cmd_gensymtypes_c = $(CPP) -D__GENKSYMS__ $(c_flags) $< | $(genksyms)
# makefile (从“include/config/auto.conf”，行 481)
CONFIG_RD_LZ4 = y
# 环境
KBUILD_LDFLAGS_MODULE = 
# makefile (从“include/config/auto.conf”，行 508)
CONFIG_INPUT_VIVALDIFMAP = y
# makefile (从“include/config/auto.conf”，行 527)
CONFIG_CC_VERSION_TEXT = arm-none-eabi-gcc (GNU Arm Embedded Toolchain 10.3-2021.10) 10.3.1 20210824 (release)
# makefile (从“include/config/auto.conf”，行 494)
CONFIG_ARM_AMBA = y
# makefile (从“include/config/auto.conf”，行 324)
CONFIG_MMC_BLOCK_MINORS = 8
# makefile (从“include/config/auto.conf”，行 159)
CONFIG_GCC_NO_STRINGOP_OVERFLOW = y
# makefile (从“include/config/auto.conf”，行 126)
CONFIG_BUG = y
# makefile (从“scripts/Kbuild.include”，行 127)
quiet_log_print = $(if $(quiet_cmd_$1), echo '  $(call escsq,$(quiet_cmd_$1)$(why))';)
# makefile (从“include/config/auto.conf”，行 475)
CONFIG_HAVE_PAGE_SIZE_4KB = y
# makefile (从“scripts/basic/.fixdep.cmd”，行 1)
MAKEFILE_LIST :=  scripts/Makefile.build include/config/auto.conf scripts/Kbuild.include scripts/Makefile.compiler scripts/basic/Makefile scripts/Makefile.lib scripts/Makefile.host scripts/basic/.fixdep.cmd
# makefile (从“include/config/auto.conf”，行 82)
CONFIG_GENERIC_IRQ_SHOW_LEVEL = y
# makefile (从“scripts/Makefile.lib”，行 58)
multi-obj-ym := $(subst ,, )
# makefile (从“scripts/Makefile.lib”，行 127)
_cpp_flags = $(KBUILD_CPPFLAGS) $(cppflags-y) $(CPPFLAGS_$(target-stem).lds)
# makefile (从“include/config/auto.conf”，行 524)
CONFIG_LEGACY_TIOCSTI = y
# 环境
KBUILD_RUSTFLAGS_KERNEL = 
# makefile (从“scripts/Makefile.lib”，行 56)
multi-obj-y := 
# makefile (从“include/config/auto.conf”，行 311)
CONFIG_WATCHDOG_CORE = y
# makefile (从“include/config/auto.conf”，行 189)
CONFIG_HAVE_KERNEL_LZ4 = y
# makefile (从“include/config/auto.conf”，行 503)
CONFIG_LOCKDEP_SUPPORT = y
# makefile (从“include/config/auto.conf”，行 144)
CONFIG_ARCH_KEEP_MEMBLOCK = y
# makefile (从“include/config/auto.conf”，行 422)
CONFIG_FRAME_WARN = 1024
# “override”指令
GNUMAKEFLAGS := 
# 环境
KLZOP = lzop
# makefile (从“include/config/auto.conf”，行 360)
CONFIG_XZ_DEC_ARMTHUMB = y
# 环境
srctree = .
# makefile (从“include/config/auto.conf”，行 17)
CONFIG_AS_IS_GNU = y
# makefile (从“include/config/auto.conf”，行 469)
CONFIG_COMPAT_32BIT_TIME = y
# makefile (从“scripts/Makefile.host”，行 75)
host-cobjs := 
# makefile (从“include/config/auto.conf”，行 486)
CONFIG_PINCTRL_STM32F746 = y
# makefile (从“include/config/auto.conf”，行 209)
CONFIG_ARCH_USE_CMPXCHG_LOCKREF = y
# makefile (从“include/config/auto.conf”，行 179)
CONFIG_TIMER_OF = y
# makefile (从“include/config/auto.conf”，行 383)
CONFIG_ARCH_HAS_CACHE_LINE_SIZE = y
# makefile (从“scripts/Makefile.lib”，行 99)
modname = $(subst $(space),:,$(__modname))
# makefile (从“scripts/Kbuild.include”，行 61)
stringify = $(squote)$(quote)$1$(quote)$(squote)
# makefile (从“include/config/auto.conf”，行 10)
CONFIG_CLKSRC_STM32 = y
# makefile (从“include/config/auto.conf”，行 19)
CONFIG_STACKPROTECTOR_STRONG = y
# makefile (从“include/config/auto.conf”，行 55)
CONFIG_ARCH_WANT_LD_ORPHAN_WARN = y
# makefile (从“include/config/auto.conf”，行 169)
CONFIG_CACHESTAT_SYSCALL = y
# makefile (从“include/config/auto.conf”，行 146)
CONFIG_I2C_BOARDINFO = y
# makefile (从“scripts/Makefile.lib”，行 223)
is-kernel-object = $(or $(part-of-builtin),$(part-of-module))
# 环境
LINUXINCLUDE = -I./arch/arm/include -I./arch/arm/include/generated -I./include -I./include -I./arch/arm/include/uapi -I./arch/arm/include/generated/uapi -I./include/uapi -I./include/generated/uapi -include ./include/linux/compiler-version.h -include ./include/linux/kconfig.h
# makefile (从“include/config/auto.conf”，行 497)
CONFIG_NEED_SRCU_NMI_SAFE = y
# makefile (从“include/config/auto.conf”，行 211)
CONFIG_ARCH_HAS_KEEPINITRD = y
# makefile (从“scripts/Makefile.host”，行 74)
host-cmulti := 
# makefile (从“include/config/auto.conf”，行 316)
CONFIG_INPUT_MOUSE = y
# makefile (从“include/config/auto.conf”，行 181)
CONFIG_BASE_SMALL = y
# makefile (从“include/config/auto.conf”，行 272)
CONFIG_HAVE_IRQ_TIME_ACCOUNTING = y
# makefile (从“include/config/auto.conf”，行 228)
CONFIG_XZ_DEC_X86 = y
# makefile (从“scripts/Kbuild.include”，行 36)
dot-target = $(dir $@).$(notdir $@)
# makefile (从“include/config/auto.conf”，行 162)
CONFIG_ELFCORE = y
# 环境
rust_common_flags = --edition=2021 -Zbinary_dep_depinfo=y -Astable_features -Dnon_ascii_idents -Dunsafe_op_in_unsafe_fn -Wmissing_docs -Wrust_2018_idioms -Wunreachable_pub -Wclippy::all -Wclippy::ignored_unit_patterns -Wclippy::mut_mut -Wclippy::needless_bitwise_bool -Wclippy::needless_continue -Aclippy::needless_lifetimes -Wclippy::no_mangle_with_rust_abi -Wclippy::undocumented_unsafe_blocks -Wclippy::unnecessary_safety_comment -Wclippy::unnecessary_safety_doc -Wrustdoc::missing_crate_level_docs -Wrustdoc::unescaped_backticks
# makefile (从“include/config/auto.conf”，行 358)
CONFIG_PREVENT_FIRMWARE_BUILD = y
# makefile (从“include/config/auto.conf”，行 283)
CONFIG_HAVE_NMI = y
# makefile (从“include/config/auto.conf”，行 380)
CONFIG_WATCHDOG = y
# 环境
LZMA = lzma
# makefile (从“scripts/Makefile.lib”，行 4)
ccflags-y := $(subst ,, )
# 环境
LESSOPEN = | /usr/bin/lesspipe %s
# makefile (从“scripts/Makefile.build”，行 324)
cmd_cpp_s_S = $(CPP) $(a_flags) -o $@ $<
# makefile (从“include/config/auto.conf”，行 295)
CONFIG_XIP_PHYS_ADDR = 0x08008000
# 环境
KBUILD_CFLAGS_KERNEL = 
# 环境
CPP = arm-none-eabi-gcc -E
# makefile (从“include/config/auto.conf”，行 307)
CONFIG_GCC10_NO_ARRAY_BOUNDS = y
# makefile (从“scripts/Makefile.build”，行 401)
quiet_cmd_ld_multi_m = LD [M]  $@
# makefile (从“include/config/auto.conf”，行 441)
CONFIG_HAVE_CLK_PREPARE = y
# makefile (从“scripts/Makefile.host”，行 145)
quiet_cmd_host-cxxobjs = HOSTCXX $@
# makefile (从“include/config/auto.conf”，行 313)
CONFIG_MODULES_USE_ELF_REL = y
# makefile (从“include/config/auto.conf”，行 348)
CONFIG_USE_OF = y
# makefile (从“scripts/Makefile.build”，行 285)
quiet_cmd_rustc_rs_rs_S = RSCPP $(quiet_modtag) $@
# makefile (从“include/config/auto.conf”，行 167)
CONFIG_DEBUG_INFO = y
# makefile (从“scripts/Kbuild.include”，行 45)
depfile = $(subst $(comma),_,$(dot-target).d)
# makefile (从“include/config/auto.conf”，行 448)
CONFIG_FHANDLE = y
# 环境
SSH_CONNECTION = 192.168.139.1 1627 192.168.139.128 22
# makefile (从“include/config/auto.conf”，行 60)
CONFIG_CC_HAS_NO_PROFILE_FN_ATTR = y
# 环境
PATH = /home/embedsky/.vscode-server/cli/servers/Stable-e54c774e0add60467559eb0d1e229c6452cf8447/server/bin/remote-cli:/opt/gcc-arm-none-eabi-10.3-2021.10/bin:/home/embedsky/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/opt/EmbedSky/TQ3568/tools/aarch64-linux-gcc-v9.3/bin:/opt/EmbedSky/TQ3568/tools/aarch64-linux-gcc-v9.3/aarch64-buildroot-linux-gnu/bin:/snap/bin:/opt/fsl-imx-xwayland/6.1-mickledore/sysroots/x86_64-pokysdk-linux/usr/bin/aarch64-poky-linux:/home/embedsky/.vscode-server/data/User/globalStorage/github.copilot-chat/debugCommand:/opt/fsl-imx-xwayland/6.1-mickledore/sysroots/x86_64-pokysdk-linux/usr/bin/aarch64-poky-linux
# makefile (从“scripts/Makefile.build”，行 434)
userprogs := 
# 环境
KBUILD_AFLAGS_KERNEL = 
# makefile (从“include/config/auto.conf”，行 239)
CONFIG_HAVE_LD_DEAD_CODE_DATA_ELIMINATION = y
# makefile (从“include/config/auto.conf”，行 300)
CONFIG_MQ_IOSCHED_KYBER = y
# makefile (从“scripts/Makefile.build”，行 254)
quiet_cmd_rustc_o_rs = $(RUSTC_OR_CLIPPY_QUIET) $(quiet_modtag) $@
# makefile (从“include/config/auto.conf”，行 50)
CONFIG_HAVE_MOD_ARCH_SPECIFIC = y
# makefile (从“scripts/basic/Makefile”，行 11)
cmd_create_randstruct_seed = $(CONFIG_SHELL) $(gen-randstruct-seed) $@ $(objtree)/include/generated/randstruct_hash.h
# makefile (从“include/config/auto.conf”，行 151)
CONFIG_DTC = y
# makefile (从“include/config/auto.conf”，行 392)
CONFIG_NOMMU_INITIAL_TRIM_EXCESS = 1
# makefile (从“scripts/Makefile.lib”，行 110)
basename_flags = -DKBUILD_BASENAME=$(call name-fix,$(basetarget))
# makefile (从“include/config/auto.conf”，行 13)
CONFIG_GENERIC_SCHED_CLOCK = y
# makefile (从“include/config/auto.conf”，行 418)
CONFIG_CC_OPTIMIZE_FOR_SIZE = y
# makefile (从“include/config/auto.conf”，行 199)
CONFIG_ARCH_FORCE_MAX_ORDER = 10
# 环境
KBUILD_USERCFLAGS = -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer -std=gnu11 
# makefile (从“include/config/auto.conf”，行 377)
CONFIG_TIMER_PROBE = y
# makefile (从“scripts/Kbuild.include”，行 10)
space := $(subst ,, )
# makefile (从“include/config/auto.conf”，行 447)
CONFIG_EFI_PARTITION = y
# 环境
XDG_RUNTIME_DIR = /run/user/1000
# makefile (从“include/config/auto.conf”，行 87)
CONFIG_PAGE_SIZE_LESS_THAN_64KB = y
# makefile (从“include/config/auto.conf”，行 163)
CONFIG_I2C_STM32F4 = y
# makefile (从“include/config/auto.conf”，行 263)
CONFIG_XZ_DEC_ARM64 = y
# makefile (从“include/config/auto.conf”，行 331)
CONFIG_ARCH_DEFAULT_CRASH_DUMP = y
# makefile (从“scripts/Kbuild.include”，行 13)
define newline


endef
# 环境
LC_MONETARY = en_US.UTF-8
# makefile (从“scripts/Makefile.host”，行 5)
quiet_cmd_flex = LEX     $@
# makefile (从“include/config/auto.conf”，行 186)
CONFIG_OF_ADDRESS = y
# makefile (从“scripts/Makefile.lib”，行 87)
real-obj-m := 
# makefile (从“include/config/auto.conf”，行 413)
CONFIG_SSB_POSSIBLE = y
# makefile (从“include/config/auto.conf”，行 210)
CONFIG_DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT = y
# makefile (从“include/config/auto.conf”，行 202)
CONFIG_PTP_1588_CLOCK_OPTIONAL = y
# makefile (从“scripts/Kbuild.include”，行 6)
comma := ,
# makefile (从“scripts/Makefile.host”，行 153)
quiet_cmd_host-rust = HOSTRUSTC $@
# makefile (从“include/config/auto.conf”，行 355)
CONFIG_RD_LZO = y
# makefile (从“include/config/auto.conf”，行 521)
CONFIG_OF_KOBJ = y
# makefile (从“include/config/auto.conf”，行 335)
CONFIG_GENERIC_STRNCPY_FROM_USER = y
# makefile (从“include/config/auto.conf”，行 45)
CONFIG_PAGE_SIZE_4KB = y
# makefile (从“include/config/auto.conf”，行 366)
CONFIG_HID_GENERIC = y
# makefile (从“include/config/auto.conf”，行 334)
CONFIG_REGULATOR = y
# makefile (从“scripts/Makefile.build”，行 218)
quiet_cmd_cc_lst_c = MKLST   $@
# 环境
KBUILD_PROCMACROLDFLAGS = $(subst ,, )
# 环境
AR = arm-none-eabi-ar
# makefile (从“include/config/auto.conf”，行 148)
CONFIG_MESSAGE_LOGLEVEL_DEFAULT = 4
# makefile (从“include/config/auto.conf”，行 72)
CONFIG_FORCE_NR_CPUS = y
# makefile (从“include/config/auto.conf”，行 120)
CONFIG_INITRAMFS_PRESERVE_MTIME = y
# makefile (从“include/config/auto.conf”，行 478)
CONFIG_EXT4_USE_FOR_EXT2 = y
# 默认
.FEATURES := target-specific order-only second-expansion else-if shortest-stem undefine oneshell archives jobserver output-sync check-symlink load
# makefile (从“include/config/auto.conf”，行 432)
CONFIG_CC_NO_ARRAY_BOUNDS = y
# makefile (从“include/config/auto.conf”，行 112)
CONFIG_LEDS_TRIGGERS = y
# makefile (从“scripts/Makefile.lib”，行 502)
cmd_xzkern_with_size = { cat $(real-prereqs) | sh $(srctree)/scripts/xz_wrap.sh; $(size_append); } > $@
# makefile (从“include/config/auto.conf”，行 106)
CONFIG_HAS_DMA = y
# makefile (从“include/config/auto.conf”，行 485)
CONFIG_RTC_INTF_PROC = y
# 环境
LS_COLORS = rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
# makefile (从“include/config/auto.conf”，行 90)
CONFIG_MOUSE_PS2_LOGIPS2PP = y
# makefile (从“include/config/auto.conf”，行 177)
CONFIG_DMADEVICES = y
# makefile (从“include/config/auto.conf”，行 230)
CONFIG_KERNEL_GZIP = y
# 环境
SUBLEVEL = 0
# makefile (从“include/config/auto.conf”，行 502)
CONFIG_ARCH_MMAP_RND_BITS_MIN = 8
# makefile (从“scripts/Makefile.lib”，行 371)
cmd_ar = rm -f $@; $(AR) cDPrsT $@ $(real-prereqs)
# 自动
%F = $(notdir $%)
# makefile (从“include/config/auto.conf”，行 398)
CONFIG_SERIAL_STM32_CONSOLE = y
# makefile (从“scripts/Makefile.host”，行 6)
cmd_flex = $(LEX) -o$@ -L $<
# 环境
KBUILD_LDFLAGS =  -EL
# makefile (从“scripts/Makefile.lib”，行 472)
cmd_fit = $(MAKE_FIT) -o $@ --arch $(UIMAGE_ARCH) --os linux --name '$(UIMAGE_NAME)' $(if $(findstring 1,$(KBUILD_VERBOSE)),-v) $(if $(FIT_DECOMPOSE_DTBS),--decompose-dtbs) --compress $(FIT_COMPRESSION) -k $< @$(word 2,$^)
# makefile (从“include/config/auto.conf”，行 128)
CONFIG_ARCH_HAS_GCOV_PROFILE_ALL = y
# makefile (从“include/config/auto.conf”，行 173)
CONFIG_BITREVERSE = y
# 环境
RUSTFLAGS_MODULE = 
# makefile (从“include/config/auto.conf”，行 378)
CONFIG_ZSTD_COMMON = y
# makefile (从“scripts/Makefile.lib”，行 435)
quiet_cmd_lz4_with_size = LZ4     $@
# makefile (从“include/config/auto.conf”，行 297)
CONFIG_RUSTC_LLVM_VERSION = 0
# 环境
SSL_CERT_FILE = /usr/lib/ssl/certs/ca-certificates.crt
# 环境
HOME = /home/embedsky
# 环境
CC_VERSION_TEXT = arm-none-eabi-gcc (GNU Arm Embedded Toolchain 10.3-2021.10) 10.3.1 20210824 (release)
# makefile (从“scripts/Makefile.lib”，行 81)
extra-y := 
# makefile (从“include/config/auto.conf”，行 96)
CONFIG_MOUSE_PS2_SYNAPTICS_SMBUS = y
# makefile (从“include/config/auto.conf”，行 133)
CONFIG_SCHED_HRTICK = y
# makefile (从“include/config/auto.conf”，行 134)
CONFIG_VIRTIO_MENU = y
# makefile (从“include/config/auto.conf”，行 499)
CONFIG_NEED_DMA_MAP_STATE = y
# makefile (从“scripts/Makefile.build”，行 98)
quiet_cmd_cc_s_c = CC $(quiet_modtag)  $@
# makefile (从“include/config/auto.conf”，行 75)
CONFIG_PWRSEQ_EMMC = y
# makefile (从“include/config/auto.conf”，行 136)
CONFIG_CC_NO_STRINGOP_OVERFLOW = y
# makefile (从“include/config/auto.conf”，行 170)
CONFIG_PINCTRL_STM32F469 = y
# 环境
SHLVL = 1
# makefile (从“scripts/Makefile.lib”，行 10)
KBUILD_CFLAGS =  -std=gnu11 -fshort-wchar -funsigned-char -fno-common -fno-PIE -fno-strict-aliasing -fno-dwarf2-cfi-asm -mno-fdpic -mno-unaligned-access -fno-ipa-sra -mabi=apcs-gnu -mno-thumb-interwork -marm -Wa,-mno-warn-deprecated    -msoft-float -Uarm $(subdir-ccflags-y)
# makefile (从“include/config/auto.conf”，行 86)
CONFIG_ARCH_HAVE_NMI_SAFE_CMPXCHG = y
# makefile (从“include/config/auto.conf”，行 257)
CONFIG_WATCHDOG_HANDLE_BOOT_ENABLED = y
# makefile (从“include/config/auto.conf”，行 426)
CONFIG_LEDS_CLASS = y
# makefile (从“include/config/auto.conf”，行 123)
CONFIG_RD_BZIP2 = y
# makefile (从“scripts/Makefile.lib”，行 100)
modfile = $(addprefix $(obj)/,$(__modname))
# makefile (从“include/config/auto.conf”，行 514)
CONFIG_NO_IOPORT_MAP = y
# makefile (从“scripts/Makefile.lib”，行 454)
quiet_cmd_uimage = UIMAGE  $@
# makefile (从“include/config/auto.conf”，行 464)
CONFIG_LD_ORPHAN_WARN_LEVEL = warn
# 环境
RUSTC_OR_CLIPPY = rustc
# makefile (从“include/config/auto.conf”，行 459)
CONFIG_INPUT_LEDS = y
# makefile (从“scripts/Makefile.lib”，行 123)
_a_flags = $(filter-out $(AFLAGS_REMOVE_$(target-stem).o), $(filter-out $(asflags-remove-y), $(KBUILD_CPPFLAGS) $(KBUILD_AFLAGS) $(asflags-y)) $(AFLAGS_$(target-stem).o))
# makefile (从“include/config/auto.conf”，行 403)
CONFIG_EXT4_FS = y
# makefile (从“include/config/auto.conf”，行 359)
CONFIG_CC_HAS_SANCOV_TRACE_PC = y
# 环境
DBUS_SESSION_BUS_ADDRESS = unix:path=/run/user/1000/bus
# makefile (从“include/config/auto.conf”，行 381)
CONFIG_IRQCHIP = y
# makefile (从“scripts/Makefile.compiler”，行 40)
as-instr = $(call try-run, printf "%b\n" "$(1)" | $(CC) -Werror $(CLANG_FLAGS) $(KBUILD_AFLAGS) -Wa$(comma)--fatal-warnings -c -x assembler-with-cpp -o "$$TMP" -,$(2),$(3))
# makefile (从“include/config/auto.conf”，行 198)
CONFIG_MULTIUSER = y
# makefile (从“include/config/auto.conf”，行 74)
CONFIG_INPUT = y
# makefile (从“include/config/auto.conf”，行 474)
CONFIG_RD_XZ = y
# makefile (从“include/config/auto.conf”，行 393)
CONFIG_STM32_FIREWALL = y
# makefile (从“include/config/auto.conf”，行 108)
CONFIG_GENERIC_BUG = y
# 环境
KBUILD_EXTRA_WARN = 
# 环境
LOGNAME = embedsky
# 环境
TERM = xterm-256color
# makefile (从“include/config/auto.conf”，行 498)
CONFIG_RCU_NEED_SEGCBLIST = y
# makefile (从“include/config/auto.conf”，行 85)
CONFIG_IIO_CONSUMERS_PER_TRIGGER = 2
# makefile (从“include/config/auto.conf”，行 371)
CONFIG_CC_IMPLICIT_FALLTHROUGH = -Wimplicit-fallthrough=5
# makefile (从“include/config/auto.conf”，行 12)
CONFIG_GCC_ASM_GOTO_OUTPUT_BROKEN = y
# makefile (从“scripts/Makefile.host”，行 73)
host-csingle := scripts/basic/fixdep
# makefile (从“include/config/auto.conf”，行 268)
CONFIG_SLUB = y
# makefile (从“scripts/Makefile.build”，行 17)
lib-m := 
# makefile (从“include/config/auto.conf”，行 346)
CONFIG_COMMON_CLK_STM32F = y
# makefile (从“scripts/Makefile.build”，行 116)
genksyms = $(objtree)/scripts/genksyms/genksyms $(if $(KBUILD_SYMTYPES), -T $(@:.o=.symtypes)) $(if $(KBUILD_PRESERVE), -p) $(addprefix -r , $(wildcard $(@:.o=.symref)))
# makefile (从“include/config/auto.conf”，行 419)
CONFIG_ARM_SINGLE_ARMV7M = y
# makefile (从“scripts/Makefile.build”，行 279)
quiet_cmd_rustc_ll_rs = $(RUSTC_OR_CLIPPY_QUIET) $(quiet_modtag) $@
# makefile (从“include/config/auto.conf”，行 216)
CONFIG_PROC_MEM_ALWAYS_FORCE = y
# makefile (从“include/config/auto.conf”，行 213)
CONFIG_HAVE_KERNEL_XZ = y
# makefile (从“scripts/Makefile.compiler”，行 22)
try-run = $(shell set -e; TMP=$(TMPOUT)/tmp; trap "rm -rf $(TMPOUT)" EXIT; mkdir -p $(TMPOUT); if ($(1)) >/dev/null 2>&1; then echo "$(2)"; else echo "$(3)"; fi)
# 环境
KBUILD_VERBOSE = 
# 命令行
obj = scripts/basic
# makefile (从“include/config/auto.conf”，行 26)
CONFIG_ARM_THUMB = y
# makefile (从“scripts/Makefile.lib”，行 84)
obj-m := 
# makefile (从“include/config/auto.conf”，行 364)
CONFIG_SYS_SUPPORTS_APM_EMULATION = y
# makefile (从“scripts/Makefile.lib”，行 111)
modname_flags = -DKBUILD_MODNAME=$(call name-fix,$(modname)) -D__KBUILD_MODNAME=kmod_$(call name-fix-token,$(modname))
# makefile (从“scripts/Makefile.host”，行 128)
quiet_cmd_host-cobjs = HOSTCC  $@
# makefile (从“scripts/Makefile.build”，行 493)
obj-dirs := 
# 环境
LC_TIME = en_US.UTF-8
# 环境
VSCODE_GIT_IPC_HANDLE = /run/user/1000/vscode-git-7ea07af0fe.sock
# makefile (从“include/config/auto.conf”，行 266)
CONFIG_IOSCHED_BFQ = y
# makefile (从“include/config/auto.conf”，行 166)
CONFIG_COMMON_CLK = y
# makefile (从“include/config/auto.conf”，行 164)
CONFIG_SET_MEM_PARAM = y
# 环境
COLORTERM = truecolor
# makefile (从“scripts/Kbuild.include”，行 72)
read-file = $(subst $(newline),$(space),$(file < $1))
# makefile (从“scripts/Makefile.build”，行 112)
gendwarfksyms = $(objtree)/scripts/gendwarfksyms/gendwarfksyms $(if $(KBUILD_SYMTYPES), --symtypes $(@:.o=.symtypes)) $(if $(KBUILD_GENDWARFKSYMS_STABLE), --stable)
# makefile (从“include/config/auto.conf”，行 483)
CONFIG_DEFAULT_HOSTNAME = (none)
# makefile (从“include/config/auto.conf”，行 80)
CONFIG_MFD_SYSCON = y
# makefile (从“include/config/auto.conf”，行 192)
CONFIG_EDAC_ATOMIC_SCRUB = y
# makefile (从“include/config/auto.conf”，行 279)
CONFIG_HAVE_STACKPROTECTOR = y
# makefile (从“include/config/auto.conf”，行 20)
CONFIG_IIO_TRIGGER = y
# makefile (从“scripts/Makefile.build”，行 23)
EXTRA_AFLAGS := 
# makefile (从“include/config/auto.conf”，行 368)
CONFIG_DRAM_BASE = 0x90000000
# makefile (从“scripts/Makefile.host”，行 93)
hostrust_flags = --out-dir $(dir $@) --emit=dep-info=$(depfile) -Clinker-flavor=gcc -Clinker=$(HOSTCC) -Clink-args='$(call escsq,$(KBUILD_HOSTLDFLAGS))' $(KBUILD_HOSTRUSTFLAGS) $(HOST_EXTRARUSTFLAGS) $(HOSTRUSTFLAGS_$(target-stem))
# makefile (从“scripts/Kbuild.include”，行 194)
if-changed-cond = $(newer-prereqs)$(cmd-check)$(check-FORCE)
# makefile (从“include/config/auto.conf”，行 436)
CONFIG_FLATMEM = y
# makefile (从“include/config/auto.conf”，行 258)
CONFIG_CRYPTO_LIB_BLAKE2S_GENERIC = y
# makefile (从“include/config/auto.conf”，行 249)
CONFIG_MFD_CORE = y
# makefile (从“scripts/Makefile.lib”，行 424)
cmd_lzma_with_size = { cat $(real-prereqs) | $(LZMA) -9; $(size_append); } > $@
# makefile (从“include/config/auto.conf”，行 385)
CONFIG_PANIC_TIMEOUT = 0
# makefile (从“scripts/Makefile.build”，行 402)
cmd_ld_multi_m = $(LD) $(ld_flags) -r -o $@ @$< $(cmd_objtool)
# makefile (从“include/config/auto.conf”，行 376)
CONFIG_MSDOS_PARTITION = y
# makefile (从“scripts/Makefile.host”，行 146)
cmd_host-cxxobjs = $(HOSTCXX) $(hostcxx_flags) -c -o $@ $<
# makefile (从“scripts/Makefile.lib”，行 469)
FIT_COMPRESSION = gzip
# makefile (从“include/config/auto.conf”，行 109)
CONFIG_HAVE_PERF_USER_STACK_DUMP = y
# makefile (从“scripts/Makefile.lib”，行 89)
subdir-ym := 
# makefile (从“include/config/auto.conf”，行 394)
CONFIG_IIO_TRIGGERED_BUFFER = y
# makefile (从“scripts/Makefile.build”，行 286)
cmd_rustc_rs_rs_S = $(CPP) $(c_flags) -xc -C -P $< | sed '1,/^\/\/ Cut here.$$/d' >$@
# 环境
XDG_SESSION_ID = 3
# makefile (从“include/config/auto.conf”，行 401)
CONFIG_BLK_DEV_INITRD = y
# makefile (从“scripts/Makefile.build”，行 21)
subdir-y := 
# makefile
.DEFAULT_GOAL := scripts/basic/
# makefile (从“scripts/Makefile.lib”，行 234)
modkern_rustflags = $(if $(part-of-module), $(KBUILD_RUSTFLAGS_MODULE) $(RUSTFLAGS_MODULE), $(KBUILD_RUSTFLAGS_KERNEL) $(RUSTFLAGS_KERNEL))
# makefile (从“include/config/auto.conf”，行 342)
CONFIG_DMA_DECLARE_COHERENT = y
# makefile (从“include/config/auto.conf”，行 262)
CONFIG_XZ_DEC_POWERPC = y
# makefile (从“include/config/auto.conf”，行 421)
CONFIG_MOUSE_PS2_SMBUS = y
# makefile (从“scripts/Makefile.lib”，行 94)
modname-multi = $(sort $(foreach m,$(multi-obj-ym), $(if $(filter $*.o, $(call suffix-search, $m, .o, -objs -y -m)),$(m:.o=))))
# makefile (从“scripts/Makefile.build”，行 280)
cmd_rustc_ll_rs = $(rust_common_cmd) --emit=llvm-ir=$@ $<
# makefile (从“include/config/auto.conf”，行 424)
CONFIG_LD_VERSION = 23601
# makefile (从“scripts/basic/Makefile”，行 10)
quiet_cmd_create_randstruct_seed = GENSEED $@
# makefile (从“include/config/auto.conf”，行 513)
CONFIG_CONSOLE_LOGLEVEL_QUIET = 4
# makefile (从“include/config/auto.conf”，行 139)
CONFIG_SERIAL_STM32 = y
# makefile (从“include/config/auto.conf”，行 281)
CONFIG_PREEMPT_RCU = y
# makefile (从“scripts/Makefile.lib”，行 227)
quiet_modtag = $(if $(part-of-module),[M],   )
# makefile (从“scripts/Makefile.build”，行 387)
cmd_gen_order = { $(foreach m, $(real-prereqs), $(if $(filter %/$(notdir $@), $m), cat $m, echo $m);) :; } > $@
# 自动
%D = $(patsubst %/,%,$(dir $%))
# makefile (从“include/config/auto.conf”，行 217)
CONFIG_PINCONF = y
# makefile (从“include/config/auto.conf”，行 455)
CONFIG_HAS_IOPORT = y
# makefile (从“include/config/auto.conf”，行 76)
CONFIG_SLAB_MERGE_DEFAULT = y
# makefile (从“include/config/auto.conf”，行 165)
CONFIG_GENERIC_CPU_AUTOPROBE = y
# makefile (从“include/config/auto.conf”，行 265)
CONFIG_MOUSE_PS2_SYNAPTICS = y
# makefile (从“scripts/Makefile.lib”，行 530)
quiet_cmd_zstd22_with_size = ZSTD22  $@
# makefile (从“scripts/Makefile.lib”，行 466)
MAKE_FIT := ./scripts/make_fit.py
# 环境
READELF = arm-none-eabi-readelf
# makefile (从“scripts/Makefile.lib”，行 97)
__modname = $(or $(modname-multi),$(basetarget))
# makefile (从“scripts/Makefile.host”，行 136)
cmd_host-cxxmulti = $(HOSTCXX) $(KBUILD_HOSTLDFLAGS) -o $@ $(foreach o,objs cxxobjs, $(addprefix $(obj)/, $($(target-stem)-$(o)))) $(KBUILD_HOSTLDLIBS) $(HOSTLDLIBS_$(target-stem))
# makefile (从“include/config/auto.conf”，行 250)
CONFIG_TIMERFD = y
# makefile (从“include/config/auto.conf”，行 158)
CONFIG_MMC_BLOCK = y
# 环境
KBUILD_HOSTCFLAGS = -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer -std=gnu11   -I ./scripts/include
# makefile (从“include/config/auto.conf”，行 285)
CONFIG_RTC_NVMEM = y
# makefile (从“include/config/auto.conf”，行 314)
CONFIG_ARM_L1_CACHE_SHIFT = 5
# makefile (从“scripts/Makefile.build”，行 478)
targets := scripts/basic/fixdep scripts/basic/fixdep
# makefile (从“scripts/Makefile.lib”，行 345)
cmd_copy = cat $< > $@
# makefile (从“include/config/auto.conf”，行 43)
CONFIG_DMA_VIRTUAL_CHANNELS = y
# makefile (从“include/config/auto.conf”，行 375)
CONFIG_RD_GZIP = y
# makefile (从“include/config/auto.conf”，行 225)
CONFIG_DEVPORT = y
# 环境
OLDPWD = /home/embedsky/share
# 环境
VSCODE_GIT_ASKPASS_EXTRA_ARGS = 
# 环境
NOSTDINC_FLAGS = 
# makefile (从“include/config/auto.conf”，行 333)
CONFIG_DMA_NEED_SYNC = y
# makefile (从“scripts/basic/.fixdep.cmd”，行 1)
savedcmd_scripts/basic/fixdep := gcc -Wp,-MMD,scripts/basic/.fixdep.d -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer -std=gnu11   -I ./scripts/include     -o scripts/basic/fixdep scripts/basic/fixdep.c   
# makefile (从“include/config/auto.conf”，行 271)
CONFIG_HAVE_REGS_AND_STACK_ACCESS_API = y
# makefile (从“include/config/auto.conf”，行 29)
CONFIG_GENERIC_STRNLEN_USER = y
# makefile (从“include/config/auto.conf”，行 231)
CONFIG_DEBUG_KERNEL = y
# makefile (从“include/config/auto.conf”，行 349)
CONFIG_LTO_NONE = y
# 自动
*F = $(notdir $*)
# 环境
LANGUAGE = zh_CN:en
# 环境
CFLAGS_KERNEL = 
# makefile (从“include/config/auto.conf”，行 61)
CONFIG_ARM_HAS_GROUP_RELOCS = y
# makefile (从“scripts/Makefile.build”，行 219)
cmd_cc_lst_c = $(CC) $(c_flags) -g -c -o $*.o $< && $(CONFIG_SHELL) $(srctree)/scripts/makelst $*.o System.map $(OBJDUMP) > $@
# 环境
VSCODE_GIT_ASKPASS_NODE = /home/embedsky/.vscode-server/cli/servers/Stable-e54c774e0add60467559eb0d1e229c6452cf8447/server/node
# makefile (从“scripts/Makefile.lib”，行 332)
define rule_as_o_S
	$(call cmd_and_fixdep,as_o_S)
	$(call cmd,gen_objtooldep)
	$(call cmd,gen_symversions_S)
	$(call cmd,warn_shared_object)
endef
# makefile (从“include/config/auto.conf”，行 140)
CONFIG_GPIOLIB_IRQCHIP = y
# makefile (从“include/config/auto.conf”，行 49)
CONFIG_OF_DYNAMIC = y
# makefile (从“scripts/Kbuild.include”，行 192)
check-FORCE = $(if $(filter FORCE, $^),,$(warning FORCE prerequisite is missing))
# makefile (从“include/config/auto.conf”，行 255)
CONFIG_HAVE_KERNEL_GZIP = y
# 环境
KBUILD_HOSTRUSTFLAGS = --edition=2021 -Zbinary_dep_depinfo=y -Astable_features -Dnon_ascii_idents -Dunsafe_op_in_unsafe_fn -Wmissing_docs -Wrust_2018_idioms -Wunreachable_pub -Wclippy::all -Wclippy::ignored_unit_patterns -Wclippy::mut_mut -Wclippy::needless_bitwise_bool -Wclippy::needless_continue -Aclippy::needless_lifetimes -Wclippy::no_mangle_with_rust_abi -Wclippy::undocumented_unsafe_blocks -Wclippy::unnecessary_safety_comment -Wclippy::unnecessary_safety_doc -Wrustdoc::missing_crate_level_docs -Wrustdoc::unescaped_backticks -O -Cstrip=debuginfo -Zallow-features= 
# makefile (从“include/config/auto.conf”，行 11)
CONFIG_TREE_RCU = y
# makefile (从“scripts/Makefile.lib”，行 450)
UIMAGE_LOADADDR = arch_must_set_this
# makefile (从“include/config/auto.conf”，行 124)
CONFIG_HAVE_FUNCTION_GRAPH_TRACER = y
# 自动
*D = $(patsubst %/,%,$(dir $*))
# 环境
TERM_PROGRAM_VERSION = 1.97.2
# makefile (从“include/config/auto.conf”，行 510)
CONFIG_GENERIC_ATOMIC64 = y
# makefile (从“scripts/Kbuild.include”，行 11)
space_escape := _-_SPACE_-_
# makefile (从“include/config/auto.conf”，行 395)
CONFIG_PROC_SYSCTL = y
# makefile (从“include/config/auto.conf”，行 98)
CONFIG_PINCTRL_STM32H743 = y
# makefile (从“scripts/basic/.fixdep.cmd”，行 5)
deps_scripts/basic/fixdep :=    scripts/include/xalloc.h 
# makefile (从“include/config/auto.conf”，行 270)
CONFIG_MOUSE_PS2_ALPS = y
# 自动
+D = $(patsubst %/,%,$(dir $+))
# makefile (从“scripts/Makefile.compiler”，行 51)
cc-option = $(call __cc-option, $(CC), $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS),$(1),$(2))
# makefile (从“include/config/auto.conf”，行 284)
CONFIG_HAVE_VIRT_CPU_ACCOUNTING_GEN = y
# makefile (从“scripts/Makefile.build”，行 61)
targets-for-builtin := 
# makefile (从“scripts/Kbuild.include”，行 29)
test-gt = $(shell test $(strip $1)0 -gt $(strip $2)0 && echo y)
# makefile (从“include/config/auto.conf”，行 253)
CONFIG_GENERIC_IRQ_MULTI_HANDLER = y
# 环境
ARCH = arm
# makefile (从“include/config/auto.conf”，行 64)
CONFIG_RCU_TRACE = y
# makefile (从“include/config/auto.conf”，行 14)
CONFIG_ARCH_USE_BUILTIN_BSWAP = y
# makefile (从“include/config/auto.conf”，行 457)
CONFIG_CLANG_VERSION = 0
# 自动
+F = $(notdir $+)
# makefile (从“include/config/auto.conf”，行 207)
CONFIG_SYMBOLIC_ERRNAME = y
# makefile (从“include/config/auto.conf”，行 48)
CONFIG_ARCH_SUPPORTS_CRASH_DUMP = y
# makefile (从“include/config/auto.conf”，行 248)
CONFIG_PREEMPTION = y
# makefile (从“scripts/Makefile.host”，行 83)
hostc_flags = -Wp,-MMD,$(depfile) $(KBUILD_HOSTCFLAGS) $(HOST_EXTRACFLAGS) $(HOSTCFLAGS_$(target-stem).o)
# makefile (从“include/config/auto.conf”，行 105)
CONFIG_HAVE_FUNCTION_ERROR_INJECTION = y
# makefile (从“include/config/auto.conf”，行 353)
CONFIG_HAVE_ARCH_STACKLEAK = y
# makefile (从“include/config/auto.conf”，行 97)
CONFIG_PWRSEQ_SIMPLE = y
# makefile (从“include/config/auto.conf”，行 428)
CONFIG_OLD_SIGACTION = y
# makefile (从“include/config/auto.conf”，行 491)
CONFIG_ARCH_HAS_SETUP_DMA_OPS = y
# makefile (从“include/config/auto.conf”，行 443)
CONFIG_SERIAL_NONSTANDARD = y
# makefile (从“include/config/auto.conf”，行 384)
CONFIG_EXPORTFS = y
# makefile (从“include/config/auto.conf”，行 372)
CONFIG_RATIONAL = y
# 环境
STRIP = arm-none-eabi-strip
# makefile (从“include/config/auto.conf”，行 444)
CONFIG_CPU_ABRT_NOMMU = y
# makefile (从“include/config/auto.conf”，行 44)
CONFIG_REGULATOR_FIXED_VOLTAGE = y
# makefile (从“scripts/Makefile.lib”，行 436)
cmd_lz4_with_size = { cat $(real-prereqs) | $(LZ4) -l -9 - -; $(size_append); } > $@
# 环境
KERNELVERSION = 6.14.0-rc4
# makefile (从“scripts/Makefile.lib”，行 415)
cmd_bzip2_with_size = { cat $(real-prereqs) | $(KBZIP2) -9; $(size_append); } > $@
# makefile (从“include/config/auto.conf”，行 110)
CONFIG_COMMON_CLK_STM32H7 = y
# 环境
CROSS_COMPILE = arm-none-eabi-
# 环境
LC_MEASUREMENT = en_US.UTF-8
# makefile (从“include/config/auto.conf”，行 451)
CONFIG_GENERIC_ALLOCATOR = y
# makefile (从“include/config/auto.conf”，行 390)
CONFIG_BUFFER_HEAD = y
# makefile (从“scripts/Kbuild.include”，行 57)
escsq = $(subst $(squote),'\$(squote)',$1)
# makefile (从“scripts/Kbuild.include”，行 53)
real-prereqs = $(filter-out $(PHONY), $^)
# makefile (从“scripts/Makefile.build”，行 99)
cmd_cc_s_c = $(CC) $(filter-out $(DEBUG_CFLAGS) $(CC_FLAGS_LTO), $(c_flags)) -fverbose-asm -S -o $@ $<
# 环境
GIT_ASKPASS = /home/embedsky/.vscode-server/cli/servers/Stable-e54c774e0add60467559eb0d1e229c6452cf8447/server/extensions/git/dist/askpass.sh
# 默认
MAKEFILES := 
# makefile (从“include/config/auto.conf”，行 329)
CONFIG_AS_VERSION = 23601
# 环境
cross_compiling = 1
# 环境
SRCARCH = arm
# makefile (从“scripts/Makefile.lib”，行 86)
real-obj-y := 
# makefile (从“include/config/auto.conf”，行 194)
CONFIG_WATCHDOG_OPEN_TIMEOUT = 0
# 环境
CONFIG_SHELL = sh
# 环境
CFLAGS_MODULE = 
# makefile (从“include/config/auto.conf”，行 412)
CONFIG_NVMEM = y
# makefile (从“include/config/auto.conf”，行 397)
CONFIG_RSEQ = y
# makefile (从“include/config/auto.conf”，行 168)
CONFIG_DMA_SHARED_BUFFER = y
# makefile (从“include/config/auto.conf”，行 77)
CONFIG_OF_EARLY_FLATTREE = y
# makefile (从“scripts/Makefile.lib”，行 376)
quiet_cmd_objcopy = OBJCOPY $@
# makefile (从“scripts/Makefile.lib”，行 455)
cmd_uimage = $(BASH) $(MKIMAGE) -A $(UIMAGE_ARCH) -O linux -C $(UIMAGE_COMPRESSION) $(UIMAGE_OPTS-y) -T $(UIMAGE_TYPE) -a $(UIMAGE_LOADADDR) -e $(UIMAGE_ENTRYADDR) -n '$(UIMAGE_NAME)' -d $< $@
# makefile (从“scripts/Makefile.lib”，行 377)
cmd_objcopy = $(OBJCOPY) $(OBJCOPYFLAGS) $(OBJCOPYFLAGS_$(@F)) $< $@
# makefile (从“include/config/auto.conf”，行 341)
CONFIG_INITRAMFS_SOURCE = 
# makefile (从“include/config/auto.conf”，行 197)
CONFIG_PINMUX = y
# makefile (从“include/config/auto.conf”，行 150)
CONFIG_ARCH_HAS_KCOV = y
# 环境
KBUILD_CPPFLAGS = -D__KERNEL__ -mlittle-endian  
# makefile (从“include/config/auto.conf”，行 104)
CONFIG_MACH_STM32F429 = y
# makefile (从“scripts/Makefile.lib”，行 429)
quiet_cmd_lzo_with_size = LZO     $@
# makefile (从“include/config/auto.conf”，行 102)
CONFIG_HAVE_CLK = y
# makefile (从“include/config/auto.conf”，行 460)
CONFIG_MAGIC_SYSRQ = y
# 环境
PAHOLE = pahole
# makefile (从“scripts/Makefile.lib”，行 225)
part-of-builtin = $(if $(filter $(basename $@).o, $(real-obj-y) $(lib-y)),y)
# makefile (从“include/config/auto.conf”，行 32)
CONFIG_REGMAP = y
# makefile (从“include/config/auto.conf”，行 446)
CONFIG_MFD_STM32_TIMERS = y
# makefile (从“include/config/auto.conf”，行 445)
CONFIG_EDAC_SUPPORT = y
# makefile (从“include/config/auto.conf”，行 130)
CONFIG_XZ_DEC_BCJ = y
# 环境
AFLAGS_MODULE = 
# makefile (从“include/config/auto.conf”，行 79)
CONFIG_HAVE_GCC_PLUGINS = y
# 环境
TEXT_OFFSET = 0x00008000
# makefile (从“include/config/auto.conf”，行 293)
CONFIG_OF_RESERVED_MEM = y
# makefile (从“include/config/auto.conf”，行 327)
CONFIG_RD_LZMA = y
# makefile (从“include/config/auto.conf”，行 519)
CONFIG_BROKEN_ON_SMP = y
# makefile (从“scripts/Makefile.lib”，行 430)
cmd_lzo_with_size = { cat $(real-prereqs) | $(KLZOP) -9; $(size_append); } > $@
# makefile (从“include/config/auto.conf”，行 399)
CONFIG_NEW_LEDS = y
# makefile (从“scripts/Makefile.lib”，行 256)
ld_flags = $(KBUILD_LDFLAGS) $(ldflags-y) $(LDFLAGS_$(@F))
# makefile (从“include/config/auto.conf”，行 223)
CONFIG_CLONE_BACKWARDS = y
# makefile (从“include/config/auto.conf”，行 319)
CONFIG_I2C_SLAVE = y
# makefile (从“include/config/auto.conf”，行 141)
CONFIG_GENERIC_CPU_DEVICES = y
# 环境
KBUILD_USERLDFLAGS = 
# makefile (从“include/config/auto.conf”，行 400)
CONFIG_CC_HAS_ASM_INLINE = y
# makefile (从“include/config/auto.conf”，行 241)
CONFIG_NVMEM_LAYOUTS = y
# makefile (从“include/config/auto.conf”，行 154)
CONFIG_INIT_ENV_ARG_LIMIT = 32
# makefile (从“include/config/auto.conf”，行 388)
CONFIG_MMU_LAZY_TLB_REFCOUNT = y
# makefile (从“scripts/Makefile.build”，行 418)
intermediate_targets = $(foreach sfx, $(2), $(patsubst %$(strip $(1)),%$(sfx), $(filter %$(strip $(1)), $(targets))))
# 默认
SUFFIXES := 
# makefile (从“include/config/auto.conf”，行 466)
CONFIG_DMA_OPS_HELPERS = y
# makefile (从“include/config/auto.conf”，行 152)
CONFIG_RESET_SIMPLE = y
# makefile (从“include/config/auto.conf”，行 38)
CONFIG_HAVE_KERNEL_LZMA = y
# makefile (从“include/config/auto.conf”，行 379)
CONFIG_DEFAULT_SECURITY_DAC = y
# makefile (从“include/config/auto.conf”，行 315)
CONFIG_ARCH_HAS_SYNC_DMA_FOR_CPU = y
# makefile (从“scripts/Kbuild.include”，行 214)
if_changed_rule = $(if $(if-changed-cond),$(rule_$(1)),@:)
# makefile (从“scripts/Kbuild.include”，行 199)
cmd_and_savecmd = $(cmd); printf '%s\n' 'savedcmd_$@ := $(make-cmd)' > $(dot-target).cmd
# makefile (从“include/config/auto.conf”，行 289)
CONFIG_ARM_DMA_MEM_BUFFERABLE = y
# makefile (从“include/config/auto.conf”，行 129)
CONFIG_NEED_PER_CPU_KM = y
# makefile (从“include/config/auto.conf”，行 214)
CONFIG_CPU_MITIGATIONS = y
# 环境
KBUILD_AFLAGS_MODULE = -DMODULE
# makefile (从“include/config/auto.conf”，行 523)
CONFIG_ARCH_SUPPORTS_ATOMIC_RMW = y
# makefile (从“include/config/auto.conf”，行 256)
CONFIG_LDISC_AUTOLOAD = y
# makefile (从“include/config/auto.conf”，行 328)
CONFIG_ARCH_SUPPORTS_UPROBES = y
# makefile (从“include/config/auto.conf”，行 243)
CONFIG_IIO = y
# makefile (从“include/config/auto.conf”，行 461)
CONFIG_GENERIC_CALIBRATE_DELAY = y
# makefile (从“include/config/auto.conf”，行 25)
CONFIG_GENERIC_IRQ_SHOW = y
# 环境
KBUILD_EXTMOD = 
# makefile (从“scripts/Makefile.build”，行 71)
targets-for-modules := $(subst ,,   )
# 环境
LC_ADDRESS = en_US.UTF-8
# makefile (从“include/config/auto.conf”，行 374)
CONFIG_ARCH_MIGHT_HAVE_PC_PARPORT = y
# makefile (从“include/config/auto.conf”，行 462)
CONFIG_MAGIC_SYSRQ_SERIAL_SEQUENCE = 
# makefile (从“include/config/auto.conf”，行 290)
CONFIG_ARM_UNWIND = y
# makefile (从“include/config/auto.conf”，行 336)
CONFIG_LINEAR_RANGES = y
# makefile (从“include/config/auto.conf”，行 420)
CONFIG_GENERIC_IRQ_PROBE = y
# makefile (从“scripts/Kbuild.include”，行 169)
cmd-check = $(filter-out $(subst $(space),$(space_escape),$(strip $(savedcmd_$@))), $(subst $(space),$(space_escape),$(strip $(cmd_$1))))
# makefile (从“include/config/auto.conf”，行 246)
CONFIG_RUNTIME_TESTING_MENU = y
# makefile (从“scripts/Makefile.build”，行 24)
EXTRA_CFLAGS := 
# makefile (从“include/config/auto.conf”，行 438)
CONFIG_SERIO_LIBPS2 = y
# makefile (从“scripts/Kbuild.include”，行 65)
kbuild-file = $(or $(wildcard $(src)/Kbuild),$(src)/Makefile)
# makefile (从“scripts/Makefile.compiler”，行 34)
as-option = $(call try-run, $(CC) -Werror $(KBUILD_CPPFLAGS) $(KBUILD_AFLAGS) $(1) -c -x assembler-with-cpp /dev/null -o "$$TMP",$(1),$(2))
# 默认
MAKE_HOST := x86_64-pc-linux-gnu
# makefile (从“include/config/auto.conf”，行 7)
CONFIG_GENERIC_IRQ_CHIP = y
# makefile (从“include/config/auto.conf”，行 155)
CONFIG_STANDALONE = y
# makefile (从“include/config/auto.conf”，行 427)
CONFIG_IRQSTACKS = y
# makefile (从“scripts/Makefile.host”，行 76)
host-cxxmulti := 
# makefile (从“scripts/Makefile.lib”，行 505)
quiet_cmd_xzmisc = XZMISC  $@
# makefile (从“include/config/auto.conf”，行 188)
CONFIG_XZ_DEC = y
# makefile (从“scripts/Makefile.lib”，行 5)
cppflags-y := $(subst ,, )
# makefile (从“include/config/auto.conf”，行 306)
CONFIG_HAVE_RSEQ = y
# 环境
LZ4 = lz4
# makefile (从“scripts/Kbuild.include”，行 119)
clean := -f ./scripts/Makefile.clean obj
# makefile (从“scripts/Makefile.lib”，行 239)
modkern_aflags = $(if $(part-of-module), $(KBUILD_AFLAGS_MODULE) $(AFLAGS_MODULE), $(KBUILD_AFLAGS_KERNEL) $(AFLAGS_KERNEL) $(modfile_flags))
# makefile (从“scripts/Makefile.build”，行 255)
cmd_rustc_o_rs = $(rust_common_cmd) --emit=obj=$@ $< $(cmd_objtool)
# makefile (从“scripts/Makefile.build”，行 212)
cmd_mod = printf '%s\n' $(call real-search, $*.o, .o, -objs -y -m) | $(AWK) '!x[$$0]++ { print("$(obj)/"$$0) }' > $@
# makefile (从“include/config/auto.conf”，行 89)
CONFIG_PAHOLE_VERSION = 0
# makefile (从“include/config/auto.conf”，行 174)
CONFIG_ARCH_32BIT_OFF_T = y
# makefile (从“include/config/auto.conf”，行 439)
CONFIG_ARCH_HAS_UBSAN = y
# makefile (从“scripts/Kbuild.include”，行 7)
quote := "
# makefile (从“scripts/Makefile.build”，行 105)
cmd_cpp_i_c = $(CPP) $(c_flags) -o $@ $<
# makefile (从“scripts/Kbuild.include”，行 82)
kecho := echo
# makefile (从“include/config/auto.conf”，行 103)
CONFIG_ARCH_HAS_CURRENT_STACK_POINTER = y
# makefile (从“scripts/Makefile.lib”，行 524)
quiet_cmd_zstd = ZSTD    $@
# makefile (从“include/config/auto.conf”，行 506)
CONFIG_DEBUG_INFO_COMPRESSED_NONE = y
# makefile (从“scripts/Makefile.compiler”，行 12)
cc-cross-prefix = $(firstword $(foreach c, $(1), $(if $(shell command -v -- $(c)gcc 2>/dev/null), $(c))))
# makefile (从“scripts/Makefile.build”，行 273)
quiet_cmd_rustc_s_rs = $(RUSTC_OR_CLIPPY_QUIET) $(quiet_modtag) $@
# 环境
quiet = quiet_
# makefile (从“include/config/auto.conf”，行 66)
CONFIG_LEDS_GPIO = y
# makefile (从“include/config/auto.conf”，行 91)
CONFIG_TRACE_CLOCK = y
# 环境
PAPERSIZE = letter
# 环境
BINDGEN = bindgen
# makefile (从“scripts/Makefile.build”，行 229)
rust_allowed_features := asm_const,asm_goto,arbitrary_self_types,lint_reasons
# makefile (从“include/config/auto.conf”，行 251)
CONFIG_RTC_HCTOSYS_DEVICE = rtc0
# makefile (从“include/config/auto.conf”，行 190)
CONFIG_GENERIC_PINCONF = y
# 默认
.SHELLFLAGS := -c
# makefile (从“scripts/Makefile.lib”，行 531)
cmd_zstd22_with_size = { cat $(real-prereqs) | $(ZSTD) -22 --ultra; $(size_append); } > $@
# 环境
KBUILD_CLIPPY = 
# makefile (从“scripts/Makefile.build”，行 265)
quiet_cmd_rustc_rsi_rs = $(RUSTC_OR_CLIPPY_QUIET) $(quiet_modtag) $@
# makefile (从“include/config/auto.conf”，行 433)
CONFIG_CONTEXT_TRACKING_IDLE = y
# makefile (从“scripts/Makefile.lib”，行 408)
quiet_cmd_file_size = GEN     $@
# makefile (从“include/config/auto.conf”，行 529)
CONFIG_I2C_SMBUS = y
# makefile (从“scripts/Makefile.lib”，行 85)
lib-y := 
# 环境
RUSTC_VERSION_TEXT = 
# makefile (从“include/config/auto.conf”，行 489)
CONFIG_DRAM_SIZE = 0x00800000
# makefile (从“include/config/auto.conf”，行 396)
CONFIG_NVMEM_SYSFS = y
# 环境
RUSTC_OR_CLIPPY_QUIET = RUSTC
# makefile (从“scripts/Makefile.host”，行 119)
cmd_host-cmulti = $(HOSTCC) $(KBUILD_HOSTLDFLAGS) -o $@ $(addprefix $(obj)/, $($(target-stem)-objs)) $(KBUILD_HOSTLDLIBS) $(HOSTLDLIBS_$(target-stem))
# makefile (从“include/config/auto.conf”，行 477)
CONFIG_HAVE_ARCH_SECCOMP_FILTER = y
# makefile (从“include/config/auto.conf”，行 31)
CONFIG_PGTABLE_LEVELS = 2
# makefile (从“scripts/Makefile.build”，行 141)
is-single-obj-m = $(and $(part-of-module),$(filter $@, $(obj-m)),y)
# 环境
PYTHON3 = python3
# 环境
OBJCOPY = arm-none-eabi-objcopy
# makefile (从“scripts/Makefile.lib”，行 45)
obj-y := 
# 环境
RUSTFMT = rustfmt
# makefile (从“include/config/auto.conf”，行 65)
CONFIG_HID_SUPPORT = y
# makefile (从“scripts/Makefile.build”，行 34)
subdir-ccflags-y := 
# makefile (从“include/config/auto.conf”，行 408)
CONFIG_GCC_VERSION = 100301
# 自动
@D = $(patsubst %/,%,$(dir $@))
# makefile (从“include/config/auto.conf”，行 9)
CONFIG_PAGE_SHIFT = 12
# makefile (从“include/config/auto.conf”，行 487)
CONFIG_CPU_V7M = y
# makefile (从“include/config/auto.conf”，行 27)
CONFIG_RTC_DRV_STM32 = y
# makefile (从“include/config/auto.conf”，行 463)
CONFIG_CRC7 = y
# makefile
SHELL = /bin/sh
# 环境
AWK = awk
# makefile (从“include/config/auto.conf”，行 458)
CONFIG_ARCH_HAS_ELF_RANDOMIZE = y
# makefile (从“scripts/Makefile.lib”，行 499)
cmd_xzkern = cat $(real-prereqs) | sh $(srctree)/scripts/xz_wrap.sh > $@
# makefile (从“scripts/Makefile.build”，行 274)
cmd_rustc_s_rs = $(rust_common_cmd) --emit=asm=$@ $<
# makefile (从“include/config/auto.conf”，行 81)
CONFIG_GPIOLIB_FASTPATH_LIMIT = 512
# makefile (从“include/config/auto.conf”，行 227)
CONFIG_TICK_CPU_ACCOUNTING = y
# makefile (从“scripts/Makefile.build”，行 473)
PHONY := scripts/basic/  FORCE
# makefile (从“include/config/auto.conf”，行 437)
CONFIG_PCP_BATCH_SCALE_MAX = 5
# makefile (从“include/config/auto.conf”，行 58)
CONFIG_GPIO_STMPE = y
# makefile (从“include/config/auto.conf”，行 406)
CONFIG_DECOMPRESS_BZIP2 = y
# makefile (从“include/config/auto.conf”，行 280)
CONFIG_ARCH_HAS_NON_OVERLAPPING_ADDRESS_SPACE = y
# makefile (从“include/config/auto.conf”，行 53)
CONFIG_LD_ORPHAN_WARN = y
# 环境
PERL = perl
# makefile (从“scripts/Makefile.lib”，行 11)
KBUILD_RUSTFLAGS = --edition=2021 -Zbinary_dep_depinfo=y -Astable_features -Dnon_ascii_idents -Dunsafe_op_in_unsafe_fn -Wmissing_docs -Wrust_2018_idioms -Wunreachable_pub -Wclippy::all -Wclippy::ignored_unit_patterns -Wclippy::mut_mut -Wclippy::needless_bitwise_bool -Wclippy::needless_continue -Aclippy::needless_lifetimes -Wclippy::no_mangle_with_rust_abi -Wclippy::undocumented_unsafe_blocks -Wclippy::unnecessary_safety_comment -Wclippy::unnecessary_safety_doc -Wrustdoc::missing_crate_level_docs -Wrustdoc::unescaped_backticks -Cpanic=abort -Cembed-bitcode=n -Clto=n -Cforce-unwind-tables=n -Ccodegen-units=1 -Csymbol-mangling-version=v0 -Crelocation-model=static -Zfunction-sections=n -Wclippy::float_arithmetic $(subdir-rustflags-y)
# 默认
.LOADED := 
# makefile (从“scripts/Makefile.lib”，行 329)
quiet_cmd_as_o_S = AS $(quiet_modtag)  $@
# makefile (从“scripts/Makefile.lib”，行 451)
UIMAGE_ENTRYADDR = $(UIMAGE_LOADADDR)
# makefile (从“scripts/Makefile.lib”，行 393)
size_append = printf $(shell dec_size=0; for F in $(real-prereqs); do fsize=$$($(CONFIG_SHELL) $(srctree)/scripts/file-size.sh $$F); dec_size=$$(expr $$dec_size + $$fsize); done; printf "%08x\n" $$dec_size | sed 's/\(..\)/\1 /g' | { read ch0 ch1 ch2 ch3; for ch in $$ch3 $$ch2 $$ch1 $$ch0; do printf '%s%03o' '\\' $$((0x$$ch)); done; } )
# makefile (从“include/config/auto.conf”，行 423)
CONFIG_CPU_V7M_NUM_IRQ = 240
# makefile (从“include/config/auto.conf”，行 286)
CONFIG_DMA_GLOBAL_POOL = y
# makefile (从“include/config/auto.conf”，行 131)
CONFIG_MOUSE_PS2_BYD = y
# makefile (从“include/config/auto.conf”，行 472)
CONFIG_KERNFS = y
# makefile (从“scripts/Makefile.lib”，行 379)
quiet_cmd_strip_relocs = RSTRIP  $@
# makefile (从“scripts/Makefile.lib”，行 297)
multi_depend = $(foreach m, $1, $(eval $m: $(addprefix $(obj)/, $(call suffix-search, $(patsubst $(obj)/%,%,$m), $2, $3))))
# makefile (从“scripts/Makefile.lib”，行 364)
quiet_cmd_ld = LD      $@
# makefile (从“include/config/auto.conf”，行 299)
CONFIG_GENERIC_IDLE_POLL_SETUP = y
# makefile (从“include/config/auto.conf”，行 132)
CONFIG_MOUSE_PS2_TRACKPOINT = y
# makefile (从“include/config/auto.conf”，行 317)
CONFIG_DECOMPRESS_XZ = y
# makefile (从“include/config/auto.conf”，行 505)
CONFIG_PROC_FS = y
# makefile (从“include/config/auto.conf”，行 345)
CONFIG_RCU_STALL_COMMON = y
# makefile (从“include/config/auto.conf”，行 46)
CONFIG_CPU_THUMB_CAPABLE = y
# makefile (从“scripts/Makefile.lib”，行 449)
UIMAGE_TYPE = kernel
# makefile (从“include/config/auto.conf”，行 156)
CONFIG_I2C_HID = y
# 环境
CHECKFLAGS = -D__linux__ -Dlinux -D__STDC__ -Dunix -D__unix__ -Wbitwise -Wno-return-void -Wno-unknown-attribute  -D__ARMEL__ -D__arm__
# makefile (从“scripts/Makefile.build”，行 104)
quiet_cmd_cpp_i_c = CPP $(quiet_modtag) $@
# makefile (从“include/config/auto.conf”，行 34)
CONFIG_ARCH_WANT_IPC_PARSE_VERSION = y
# makefile (从“scripts/Makefile.host”，行 77)
host-cxxobjs := 
# makefile (从“include/config/auto.conf”，行 116)
CONFIG_STACKTRACE_SUPPORT = y
# makefile (从“scripts/Makefile.compiler”，行 84)
rustc-option = $(call __rustc-option, $(RUSTC), $(KBUILD_RUSTFLAGS),$(1),$(2))
# makefile (从“include/config/auto.conf”，行 449)
CONFIG_GENERIC_PCI_IOMAP = y
# makefile (从“include/config/auto.conf”，行 356)
CONFIG_PINCTRL = y
# makefile (从“scripts/Kbuild.include”，行 28)
test-ge = $(shell test $(strip $1)0 -ge $(strip $2)0 && echo y)
# makefile (从“include/config/auto.conf”，行 415)
CONFIG_SERIAL_CORE_CONSOLE = y
# makefile (从“include/config/auto.conf”，行 254)
CONFIG_IRQ_DOMAIN = y
# makefile (从“scripts/Makefile.build”，行 485)
existing-targets := scripts/basic/fixdep
# makefile (从“include/config/auto.conf”，行 83)
CONFIG_RESET_CONTROLLER = y
# 环境
HOSTCC = gcc
# makefile (从“scripts/Makefile.host”，行 154)
cmd_host-rust = $(HOSTRUSTC) $(hostrust_flags) --emit=link=$@ $<
# 环境
XDG_DATA_DIRS = /usr/local/share:/usr/share:/var/lib/snapd/desktop
# makefile (从“include/config/auto.conf”，行 238)
CONFIG_HAVE_EBPF_JIT = y
# makefile (从“scripts/basic/Makefile”，行 9)
gen-randstruct-seed := ./scripts/gen-randstruct-seed.sh
# makefile (从“scripts/Makefile.lib”，行 409)
cmd_file_size = $(size_append) > $@
# 环境
VERSION = 6
# makefile (从“scripts/Makefile.lib”，行 471)
quiet_cmd_fit = FIT     $@
# 环境
CC = arm-none-eabi-gcc
# 环境
HOSTPKG_CONFIG = pkg-config
# makefile (从“scripts/Makefile.lib”，行 250)
a_flags = -Wp,-MMD,$(depfile) $(NOSTDINC_FLAGS) $(LINUXINCLUDE) $(_a_flags) $(modkern_aflags) $(modname_flags)
# makefile (从“scripts/Makefile.lib”，行 344)
quiet_cmd_copy = COPY    $@
# 环境
LC_COLLATE = C
# 环境
INSTALLKERNEL = installkernel
# makefile (从“include/config/auto.conf”，行 52)
CONFIG_CPU_32v7M = y
# makefile (从“scripts/Makefile.lib”，行 9)
KBUILD_AFLAGS = -D__ASSEMBLY__ -fno-PIE -mabi=apcs-gnu -mno-thumb-interwork -marm -Wa,-mno-warn-deprecated -Wa,  -include asm/unified.h -msoft-float $(subdir-asflags-y)
# makefile (从“include/config/auto.conf”，行 496)
CONFIG_IRQ_WORK = y
# makefile (从“include/config/auto.conf”，行 275)
CONFIG_PAGE_OFFSET = 0x90000000
# makefile (从“include/config/auto.conf”，行 365)
CONFIG_ARCH_USE_MEMTEST = y
# makefile (从“include/config/auto.conf”，行 501)
CONFIG_OF = y
# makefile (从“include/config/auto.conf”，行 296)
CONFIG_ARCH_SUPPORTS_CFI_CLANG = y
# makefile (从“scripts/Kbuild.include”，行 8)
squote := '
# 环境
RCS_FIND_IGNORE = \( -name SCCS -o -name BitKeeper -o -name .svn -o -name CVS -o -name .pc -o -name .hg -o -name .git \) -prune -o
# makefile (从“include/config/auto.conf”，行 54)
CONFIG_KEYBOARD_ATKBD = y
# makefile (从“include/config/auto.conf”，行 153)
CONFIG_CRYPTO_LIB_POLY1305_RSIZE = 9
# makefile (从“include/config/auto.conf”，行 450)
CONFIG_LOCALVERSION_AUTO = y
# 环境
LC_NAME = en_US.UTF-8
# makefile (从“scripts/basic/Makefile”，行 16)
always- = randstruct.seed
# makefile (从“scripts/Makefile.build”，行 356)
quiet_cmd_asn1_compiler = ASN.1   $(basename $@).[ch]
# makefile (从“scripts/Makefile.host”，行 78)
host-rust := 
# makefile (从“include/config/auto.conf”，行 137)
CONFIG_AS_HAS_NON_CONST_ULEB128 = y
# makefile (从“include/config/auto.conf”，行 115)
CONFIG_ARCH_HAS_FORTIFY_SOURCE = y
# makefile (从“scripts/Kbuild.include”，行 128)
log_print = echo '$(pound) $(call escsq,$(or $(quiet_cmd_$1),cmd_$1 $@)$(why))'; echo '  $(call escsq,$(cmd_$1))';
# makefile (从“scripts/Makefile.compiler”，行 56)
cc-option-yn = $(if $(call cc-option,$1),y,n)
# makefile (从“include/config/auto.conf”，行 425)
CONFIG_I2C = y
# makefile (从“include/config/auto.conf”，行 252)
CONFIG_STM32_DMAMUX = y
# 环境
RUSTC = rustc
# makefile (从“include/config/auto.conf”，行 67)
CONFIG_MAGIC_SYSRQ_DEFAULT_ENABLE = 0x1
# makefile (从“include/config/auto.conf”，行 337)
CONFIG_HID = y
# makefile (从“include/config/auto.conf”，行 95)
CONFIG_STM32_ADC_CORE = y
# 环境
LD = arm-none-eabi-ld
# makefile (从“include/config/auto.conf”，行 404)
CONFIG_GPIO_CDEV = y
# makefile (从“include/config/auto.conf”，行 200)
CONFIG_STM32_MDMA = y
# makefile (从“include/config/auto.conf”，行 101)
CONFIG_MQ_IOSCHED_DEADLINE = y
# 环境
RESOLVE_BTFIDS = ./tools/bpf/resolve_btfids/resolve_btfids
# makefile (从“include/config/auto.conf”，行 350)
CONFIG_CPU_CACHE_NOP = y
# 环境
YACC = bison
# makefile (从“include/config/auto.conf”，行 417)
CONFIG_IRQ_DOMAIN_HIERARCHY = y
# makefile (从“include/config/auto.conf”，行 122)
CONFIG_ARCH_SELECT_MEMORY_MODEL = y
# makefile (从“include/config/auto.conf”，行 507)
CONFIG_FS_IOMAP = y
# makefile (从“include/config/auto.conf”，行 273)
CONFIG_VHOST_MENU = y
# makefile (从“scripts/Makefile.build”，行 29)
rustflags-y := 
# makefile (从“include/config/auto.conf”，行 330)
CONFIG_RTC_INTF_DEV = y
# makefile (从“scripts/Makefile.build”，行 19)
always-m := 
# makefile (从“scripts/Kbuild.include”，行 12)
pound := #
# makefile (从“include/config/auto.conf”，行 326)
CONFIG_IIO_KFIFO_BUF = y
# makefile (从“include/config/auto.conf”，行 117)
CONFIG_SECTION_MISMATCH_WARN_ONLY = y
# makefile (从“scripts/Makefile.lib”，行 319)
define rule_cc_o_c
	$(call cmd_and_fixdep,cc_o_c)
	$(call cmd,checksrc)
	$(call cmd,checkdoc)
	$(call cmd,gen_objtooldep)
	$(call cmd,gen_symversions_c)
	$(call cmd,record_mcount)
	$(call cmd,warn_shared_object)
endef
# makefile (从“scripts/Makefile.lib”，行 432)
quiet_cmd_lz4 = LZ4     $@
# makefile (从“include/config/auto.conf”，行 6)
CONFIG_GPIOLIB = y
# makefile (从“include/config/auto.conf”，行 100)
CONFIG_BUILD_SALT = 
# makefile (从“scripts/Makefile.lib”，行 411)
quiet_cmd_bzip2 = BZIP2   $@
# makefile (从“scripts/Makefile.host”，行 118)
quiet_cmd_host-cmulti = HOSTLD  $@
# makefile (从“include/config/auto.conf”，行 138)
CONFIG_LLD_VERSION = 0
# makefile (从“include/config/auto.conf”，行 147)
CONFIG_IRQ_FORCED_THREADING = y
# makefile (从“include/config/auto.conf”，行 479)
CONFIG_ARCH_SUSPEND_POSSIBLE = y
# makefile (从“include/config/auto.conf”，行 276)
CONFIG_HAVE_KERNEL_LZO = y
# makefile (从“include/config/auto.conf”，行 84)
CONFIG_HARDIRQS_SW_RESEND = y
# makefile (从“include/config/auto.conf”，行 35)
CONFIG_ARCH_HAS_MEMBARRIER_SYNC_CORE = y
# makefile (从“include/config/auto.conf”，行 59)
CONFIG_XZ_DEC_SPARC = y
# makefile (从“include/config/auto.conf”，行 114)
CONFIG_GPIO_CDEV_V1 = y
# makefile (从“scripts/Makefile.lib”，行 314)
quiet_cmd_cc_o_c = CC $(quiet_modtag)  $@
# makefile (从“include/config/auto.conf”，行 208)
CONFIG_LOCK_MM_AND_FIND_VMA = y
# makefile (从“scripts/Makefile.lib”，行 421)
cmd_lzma = cat $(real-prereqs) | $(LZMA) -9 > $@
# makefile (从“include/config/auto.conf”，行 175)
CONFIG_FLATMEM_MANUAL = y
# makefile (从“include/config/auto.conf”，行 373)
CONFIG_ARCH_WANT_GENERAL_HUGETLB = y
# makefile (从“scripts/Makefile.build”，行 348)
cmd_cpp_lds_S = $(CPP) $(cpp_flags) -P -U$(ARCH) -D__ASSEMBLY__ -DLINKER_SCRIPT -o $@ $<
# 环境
LC_NUMERIC = C
# makefile (从“include/config/auto.conf”，行 220)
CONFIG_UNWINDER_ARM = y
# makefile (从“scripts/Kbuild.include”，行 113)
build := -f ./scripts/Makefile.build obj
# makefile (从“include/config/auto.conf”，行 267)
CONFIG_REGMAP_MMIO = y
# makefile (从“include/config/auto.conf”，行 203)
CONFIG_DEBUG_MISC = y
# makefile (从“include/config/auto.conf”，行 298)
CONFIG_INPUT_KEYBOARD = y
# makefile (从“include/config/auto.conf”，行 367)
CONFIG_CRC_OPTIMIZATIONS = y
# makefile (从“include/config/auto.conf”，行 118)
CONFIG_CC_IS_GCC = y
# makefile (从“scripts/Makefile.lib”，行 51)
multi-search = $(sort $(foreach m, $1, $(if $(call suffix-search, $m, $2, $3 -), $m)))
# makefile (从“include/config/auto.conf”，行 121)
CONFIG_DMA_ENGINE = y
# 环境
objtree = .
# 环境
KBUILD_RUSTFLAGS_MODULE = --cfg MODULE
# makefile (从“scripts/Makefile.compiler”，行 60)
cc-disable-warning = $(if $(call cc-option,-W$(strip $1)),-Wno-$(strip $1))
# makefile (从“include/config/auto.conf”，行 351)
CONFIG_DECOMPRESS_LZO = y
# makefile (从“include/config/auto.conf”，行 516)
CONFIG_LZO_DECOMPRESS = y
# 环境
RUSTC_BOOTSTRAP = 1
# makefile (从“scripts/Kbuild.include”，行 188)
newer-prereqs = $(filter-out $(PHONY),$?)
# makefile (从“include/config/auto.conf”，行 234)
CONFIG_MISC_FILESYSTEMS = y
# makefile (从“include/config/auto.conf”，行 338)
CONFIG_CC_HAS_WORKING_NOSANITIZE_ADDRESS = y
# makefile (从“include/config/auto.conf”，行 88)
CONFIG_STM32_WATCHDOG = y
# 环境
ZSTD = zstd
# makefile (从“include/config/auto.conf”，行 259)
CONFIG_HAS_IOMEM = y
# makefile (从“include/config/auto.conf”，行 187)
CONFIG_IIO_STM32_TIMER_TRIGGER = y
# makefile (从“include/config/auto.conf”，行 63)
CONFIG_RCU_CPU_STALL_TIMEOUT = 21
# makefile (从“include/config/auto.conf”，行 183)
CONFIG_ARCH_HAS_RESET_CONTROLLER = y
# makefile (从“scripts/Makefile.build”，行 266)
cmd_rustc_rsi_rs = $(rust_common_cmd) -Zunpretty=expanded $< >$@; command -v $(RUSTFMT) >/dev/null && $(RUSTFMT) $@
# makefile (从“scripts/Makefile.host”，行 111)
cmd_host-csingle = $(HOSTCC) $(hostc_flags) $(KBUILD_HOSTLDFLAGS) -o $@ $< $(KBUILD_HOSTLDLIBS) $(HOSTLDLIBS_$(target-stem))
# makefile (从“include/config/auto.conf”，行 56)
CONFIG_GENERIC_EARLY_IOREMAP = y
# makefile (从“include/config/auto.conf”，行 490)
CONFIG_AUTO_ZRELADDR = y
# makefile (从“include/config/auto.conf”，行 321)
CONFIG_PINCTRL_STM32F429 = y
# makefile (从“scripts/Makefile.lib”，行 253)
cpp_flags = -Wp,-MMD,$(depfile) $(NOSTDINC_FLAGS) $(LINUXINCLUDE) $(_cpp_flags)
# 环境
KCONFIG_CONFIG = .config
# makefile (从“include/config/auto.conf”，行 274)
CONFIG_PHYS_OFFSET = 0x90000000
# makefile (从“include/config/auto.conf”，行 221)
CONFIG_DEVMEM = y
# 环境
HOSTCXX = g++
# makefile (从“include/config/auto.conf”，行 411)
CONFIG_PANIC_ON_OOPS_VALUE = 0
# makefile (从“include/config/auto.conf”，行 288)
CONFIG_XZ_DEC_ARM = y
# makefile (从“include/config/auto.conf”，行 318)
CONFIG_TREE_SRCU = y
# makefile (从“include/config/auto.conf”，行 402)
CONFIG_CRC32 = y
# makefile (从“include/config/auto.conf”，行 520)
CONFIG_THUMB2_KERNEL = y
# makefile (从“include/config/auto.conf”，行 33)
CONFIG_GENERIC_HWEIGHT = y
# makefile (从“scripts/Makefile.lib”，行 385)
quiet_cmd_gzip = GZIP    $@
# 环境
PWD = /home/embedsky/share/linux-stable
# makefile (从“include/config/auto.conf”，行 111)
CONFIG_SERIAL_CORE = y
# makefile (从“include/config/auto.conf”，行 236)
CONFIG_CPU_THUMBONLY = y
# makefile (从“include/config/auto.conf”，行 47)
CONFIG_I2C_CHARDEV = y
# makefile (从“include/config/auto.conf”，行 312)
CONFIG_ARCH_FLATMEM_ENABLE = y
# 环境
OBJCOPYFLAGS = 
# makefile (从“scripts/Makefile.build”，行 6)
src := ./scripts/basic
# makefile (从“include/config/auto.conf”，行 277)
CONFIG_EXPERT = y
# makefile (从“include/config/auto.conf”，行 454)
CONFIG_PAGE_SIZE_LESS_THAN_256KB = y
# 环境
VSCODE_IPC_HOOK_CLI = /run/user/1000/vscode-ipc-633efaa2-24ee-46dd-9935-7440fa5906b2.sock
# makefile (从“include/config/auto.conf”，行 471)
CONFIG_ARCH_HAS_SET_MEMORY = y
# makefile (从“include/config/auto.conf”，行 226)
CONFIG_SELECT_MEMORY_MODEL = y
# makefile (从“scripts/Makefile.lib”，行 447)
UIMAGE_COMPRESSION = $(or $(2),none)
# makefile (从“include/config/auto.conf”，行 357)
CONFIG_CPU_CACHE_V7M = y
# makefile (从“scripts/Makefile.build”，行 132)
cmd_cc_ll_c = $(CC) $(c_flags) -emit-llvm -S -fno-discard-value-names -o $@ $<
# makefile (从“include/config/auto.conf”，行 282)
CONFIG_HAVE_SYSCALL_TRACEPOINTS = y
# makefile (从“include/config/auto.conf”，行 143)
CONFIG_ARCH_HAS_CPU_CACHE_ALIASING = y
# 环境
BASH = bash
# makefile (从“scripts/Makefile.build”，行 26)
EXTRA_LDFLAGS := 
# makefile (从“include/config/auto.conf”，行 23)
CONFIG_SYSFS_SYSCALL = y
# makefile (从“scripts/Makefile.lib”，行 248)
rust_flags = $(_rust_flags) $(modkern_rustflags) @$(objtree)/include/generated/rustc_cfg
# makefile (从“scripts/Makefile.build”，行 195)
is-standard-object = $(if $(filter-out y%, $(OBJECT_FILES_NON_STANDARD_$(target-stem).o)$(OBJECT_FILES_NON_STANDARD)n),$(is-kernel-object))
# makefile (从“include/config/auto.conf”，行 57)
CONFIG_OF_FLATTREE = y
# makefile (从“scripts/Makefile.lib”，行 330)
cmd_as_o_S = $(CC) $(a_flags) -c -o $@ $< $(cmd_objtool)
# makefile (从“scripts/Makefile.compiler”，行 64)
gcc-min-version = $(call test-ge, $(CONFIG_GCC_VERSION), $1)
# makefile (从“scripts/Makefile.lib”，行 540)
sed-offsets = 	's:^[[:space:]]*\.ascii[[:space:]]*"\(.*\)".*:\1:; /^->/{s:->#\(.*\):/* \1 */:; s:^->\([^ ]*\) [\$$#]*\([^ ]*\) \(.*\):#define \1 \2 /* \3 */:; s:->::; p;}'
# makefile (从“include/config/auto.conf”，行 171)
CONFIG_BINFMT_FLAT_ARGVP_ENVP_ON_STACK = y
# 默认
.RECIPEPREFIX := 
# makefile (从“include/config/auto.conf”，行 476)
CONFIG_CRC_ITU_T = y
# makefile (从“scripts/Makefile.compiler”，行 45)
__cc-option = $(call try-run, $(1) -Werror $(2) $(3) -c -x c /dev/null -o "$$TMP",$(3),$(4))
# makefile (从“scripts/Makefile.lib”，行 380)
cmd_strip_relocs = $(OBJCOPY) --remove-section='.rel*' $@
# makefile (从“include/config/auto.conf”，行 304)
CONFIG_RD_ZSTD = y
# 环境
HOSTRUSTC = rustc
# makefile (从“scripts/Makefile.lib”，行 365)
cmd_ld = $(LD) $(ld_flags) $(real-prereqs) -o $@
# 环境
LESSCLOSE = /usr/bin/lesspipe %s %s
# makefile (从“include/config/auto.conf”，行 369)
CONFIG_SPARSE_IRQ = y
# 自动
-*-command-variables-*- := obj=scripts/basic
# makefile (从“include/config/auto.conf”，行 24)
CONFIG_HAVE_UID16 = y
# makefile (从“include/config/auto.conf”，行 205)
CONFIG_DECOMPRESS_LZMA = y
# makefile (从“include/config/auto.conf”，行 325)
CONFIG_ARCH_MMAP_RND_BITS_MAX = 16
# makefile (从“include/config/auto.conf”，行 409)
CONFIG_STM32_EXTI = y
# makefile (从“scripts/Makefile.lib”，行 498)
quiet_cmd_xzkern = XZKERN  $@
# makefile (从“scripts/Makefile.lib”，行 414)
quiet_cmd_bzip2_with_size = BZIP2   $@
# makefile (从“include/config/auto.conf”，行 370)
CONFIG_MMC_ARMMMCI = y
# makefile (从“scripts/Makefile.lib”，行 243)
c_flags = -Wp,-MMD,$(depfile) $(NOSTDINC_FLAGS) $(LINUXINCLUDE) -include $(srctree)/include/linux/compiler_types.h $(_c_flags) $(modkern_cflags) $(basename_flags) $(modname_flags)
# makefile (从“scripts/Makefile.host”，行 86)
hostcxx_flags = -Wp,-MMD,$(depfile) $(KBUILD_HOSTCXXFLAGS) $(HOST_EXTRACXXFLAGS) $(HOSTCXXFLAGS_$(target-stem).o)
# makefile (从“include/config/auto.conf”，行 160)
CONFIG_ARM = y
# 环境
SSL_CERT_DIR = /usr/lib/ssl/certs
# makefile (从“scripts/Makefile.compiler”，行 77)
__rustc-option = $(call try-run, echo '
# makefile (从“include/config/auto.conf”，行 440)
CONFIG_HAVE_SOFTIRQ_ON_OWN_STACK = y
# makefile (从“include/config/auto.conf”，行 429)
CONFIG_ARCH_SPARSEMEM_ENABLE = y
# 环境
KBUILD_HOSTCXXFLAGS = -Wall -O2   -I ./scripts/include
# 环境
KGZIP = gzip
# makefile (从“scripts/Makefile.build”，行 58)
subdir-builtin := 
# makefile (从“include/config/auto.conf”，行 320)
CONFIG_PREEMPT = y
# makefile (从“scripts/Makefile.lib”，行 103)
target-stem = $(basename $(patsubst $(obj)/%,%,$@))
# makefile (从“scripts/Makefile.lib”，行 527)
quiet_cmd_zstd22 = ZSTD22  $@
# 环境
GZFLAGS = -9
# 自动
^D = $(patsubst %/,%,$(dir $^))
# 环境
RUSTDOC = rustdoc
# makefile (从“include/config/auto.conf”，行 99)
CONFIG_STM32_DMA = y
# makefile (从“include/config/auto.conf”，行 40)
CONFIG_CPU_LITTLE_ENDIAN = y
# makefile (从“include/config/auto.conf”，行 193)
CONFIG_CONSOLE_LOGLEVEL_DEFAULT = 7
# makefile (从“include/config/auto.conf”，行 292)
CONFIG_HAVE_EXIT_THREAD = y
# makefile (从“include/config/auto.conf”，行 500)
CONFIG_RCU_EXP_CPU_STALL_TIMEOUT = 0
# makefile (从“scripts/Makefile.lib”，行 113)
modfile_flags = -DKBUILD_MODFILE=$(call stringify,$(modfile))
# makefile (从“include/config/auto.conf”，行 145)
CONFIG_SECCOMP = y
# makefile (从“include/config/auto.conf”，行 347)
CONFIG_HAVE_PERF_EVENTS = y
# makefile (从“include/config/auto.conf”，行 18)
CONFIG_ARCH_HAS_BINFMT_FLAT = y
# makefile (从“scripts/Makefile.build”，行 234)
rust_common_cmd = OBJTREE=$(abspath $(objtree)) RUST_MODFILE=$(modfile) $(RUSTC_OR_CLIPPY) $(rust_flags) -Zallow-features=$(rust_allowed_features) -Zcrate-attr=no_std -Zcrate-attr='feature($(rust_allowed_features))' -Zunstable-options --extern kernel --crate-type rlib -L $(objtree)/rust/ --crate-name $(basename $(notdir $@)) --sysroot=/dev/null --out-dir $(dir $@) --emit=dep-info=$(depfile)
# makefile (从“include/config/auto.conf”，行 518)
CONFIG_RTC_HCTOSYS = y
# makefile (从“include/config/auto.conf”，行 68)
CONFIG_NO_HZ_COMMON = y
# makefile (从“include/config/auto.conf”，行 442)
CONFIG_DEBUG_LL_INCLUDE = mach/debug-macro.S
# makefile (从“scripts/Makefile.build”，行 59)
subdir-modorder := 
# makefile (从“include/config/auto.conf”，行 127)
CONFIG_ZBOOT_ROM_BSS = 0x0
# 环境
srcroot = .
# makefile (从“scripts/Makefile.build”，行 347)
quiet_cmd_cpp_lds_S = LDS     $@
# makefile (从“include/config/auto.conf”，行 219)
CONFIG_LEDS_TRIGGER_HEARTBEAT = y
# 环境
KBUILD_DEFCONFIG = multi_v7_defconfig
# makefile (从“include/config/auto.conf”，行 362)
CONFIG_PRINTK_TIME = y
# makefile (从“include/config/auto.conf”，行 287)
CONFIG_CPU_PABRT_LEGACY = y
# makefile (从“scripts/Kbuild.include”，行 81)
silent_kecho := :
# makefile (从“include/config/auto.conf”，行 16)
CONFIG_DMA_NONCOHERENT_MMAP = y
# makefile (从“include/config/auto.conf”，行 215)
CONFIG_MFD_STMPE = y
# 环境
KERNELRELEASE = 
# makefile (从“include/config/auto.conf”，行 278)
CONFIG_MAGIC_SYSRQ_SERIAL = y
# makefile (从“scripts/Makefile.build”，行 357)
cmd_asn1_compiler = $(objtree)/scripts/asn1_compiler $< $(basename $@).c $(basename $@).h
# makefile (从“include/config/auto.conf”，行 302)
CONFIG_THREAD_INFO_IN_TASK = y
# makefile (从“include/config/auto.conf”，行 237)
CONFIG_UNCOMPRESS_INCLUDE = debug/uncompress.h
# 环境
MAKEOVERRIDES = ${-*-command-variables-*-}
# makefile (从“scripts/Makefile.lib”，行 448)
UIMAGE_OPTS-y = 
# makefile (从“scripts/Makefile.host”，行 13)
quiet_cmd_bison = YACC    $(basename $@).[ch]
# makefile (从“scripts/Makefile.host”，行 110)
quiet_cmd_host-csingle = HOSTCC  $@
# 环境
KBUILD_CFLAGS_MODULE = -DMODULE
# 环境
LC_IDENTIFICATION = en_US.UTF-8
# 默认
MAKE_VERSION := 4.2.1
# 环境
USER = embedsky
# makefile (从“include/config/auto.conf”，行 416)
CONFIG_XXHASH = y
# 环境
CHECK = sparse
# makefile (从“include/config/auto.conf”，行 525)
CONFIG_ARCH_HAS_SYNC_DMA_FOR_DEVICE = y
# makefile (从“include/config/auto.conf”，行 470)
CONFIG_MACH_STM32F769 = y
# makefile (从“include/config/auto.conf”，行 389)
CONFIG_DECOMPRESS_GZIP = y
# makefile (从“include/config/auto.conf”，行 309)
CONFIG_RTC_CLASS = y
# makefile (从“scripts/Makefile.lib”，行 452)
UIMAGE_NAME = Linux-$(KERNELRELEASE)
# makefile (从“scripts/Kbuild.include”，行 204)
if_changed_dep = $(if $(if-changed-cond),$(cmd_and_fixdep),@:)
# makefile (从“include/config/auto.conf”，行 39)
CONFIG_BCMA_POSSIBLE = y
# makefile (从“include/config/auto.conf”，行 245)
CONFIG_HZ = 100
# makefile (从“include/config/auto.conf”，行 93)
CONFIG_MOUSE_PS2_FOCALTECH = y
# makefile (从“scripts/Makefile.build”，行 376)
quiet_cmd_ar_builtin = AR      $@
# makefile (从“include/config/auto.conf”，行 182)
CONFIG_HZ_100 = y
# 环境
MAKE = make
# makefile (从“include/config/auto.conf”，行 480)
CONFIG_RT_MUTEXES = y
# makefile (从“include/config/auto.conf”，行 352)
CONFIG_BINFMT_FLAT = y
# makefile (从“scripts/Makefile.lib”，行 88)
multi-obj-m := 
# makefile (从“include/config/auto.conf”，行 434)
CONFIG_JBD2 = y
# makefile (从“include/config/auto.conf”，行 157)
CONFIG_PREEMPT_BUILD = y
# makefile (从“include/config/auto.conf”，行 515)
CONFIG_STM32_ADC = y
# makefile (从“include/config/auto.conf”，行 391)
CONFIG_DMA_OF = y
# makefile (从“include/config/auto.conf”，行 244)
CONFIG_I2C_HELPER_AUTO = y
# makefile (从“scripts/Makefile.lib”，行 420)
quiet_cmd_lzma = LZMA    $@
# makefile (从“scripts/Makefile.compiler”，行 89)
rustc-option-yn = $(if $(call rustc-option,$1),y,n)
# makefile (从“include/config/auto.conf”，行 512)
CONFIG_ARCH_HAS_DMA_OPS = y
# makefile (从“include/config/auto.conf”，行 8)
CONFIG_LIBFDT = y
# makefile (从“scripts/Makefile.lib”，行 226)
part-of-module = $(if $(filter $(basename $@).o, $(real-obj-m)),y)
# 环境
LC_TELEPHONE = en_US.UTF-8
# makefile (从“include/config/auto.conf”，行 78)
CONFIG_BLK_ICQ = y
# makefile (从“scripts/Makefile.lib”，行 442)
MKIMAGE := ./scripts/mkuboot.sh
# makefile (从“scripts/Makefile.compiler”，行 72)
ld-option = $(call try-run, $(LD) $(KBUILD_LDFLAGS) $(1) -v,$(1),$(2),$(3))
# makefile (从“include/config/auto.conf”，行 493)
CONFIG_HAVE_ARCH_TRACEHOOK = y
# makefile (从“scripts/Makefile.lib”，行 229)
modkern_cflags = $(if $(part-of-module), $(KBUILD_CFLAGS_MODULE) $(CFLAGS_MODULE), $(KBUILD_CFLAGS_KERNEL) $(CFLAGS_KERNEL) $(modfile_flags))
# makefile (从“include/config/auto.conf”，行 511)
CONFIG_DEVTMPFS_MOUNT = y
# makefile (从“include/config/auto.conf”，行 407)
CONFIG_RTC_LIB = y
# makefile (从“scripts/Makefile.lib”，行 433)
cmd_lz4 = cat $(real-prereqs) | $(LZ4) -l -9 - - > $@
# makefile (从“include/config/auto.conf”，行 229)
CONFIG_RUSTC_VERSION = 0
# makefile (从“scripts/Makefile.lib”，行 412)
cmd_bzip2 = cat $(real-prereqs) | $(KBZIP2) -9 > $@
# makefile (从“include/config/auto.conf”，行 467)
CONFIG_DECOMPRESS_ZSTD = y
# makefile (从“include/config/auto.conf”，行 5)
CONFIG_MMC = y
# makefile (从“include/config/auto.conf”，行 222)
CONFIG_LSM = landlock,lockdown,yama,loadpin,safesetid,ipe,bpf
# makefile (从“include/config/auto.conf”，行 264)
CONFIG_LOCALVERSION = 
# makefile (从“include/config/auto.conf”，行 161)
CONFIG_HAVE_IRQ_EXIT_ON_IRQ_STACK = y
# makefile (从“scripts/Makefile.lib”，行 446)
UIMAGE_ARCH = $(SRCARCH)
# makefile (从“include/config/auto.conf”，行 69)
CONFIG_ZSTD_DECOMPRESS = y
# makefile (从“scripts/Makefile.lib”，行 370)
quiet_cmd_ar = AR      $@
# makefile (从“include/config/auto.conf”，行 522)
CONFIG_SERIO = y
# makefile (从“include/config/auto.conf”，行 21)
CONFIG_RANDSTRUCT_NONE = y
# 环境
TERM_PROGRAM = vscode
# 默认
.VARIABLES := 
# makefile (从“scripts/Makefile.build”，行 131)
quiet_cmd_cc_ll_c = CC $(quiet_modtag)  $@
# makefile (从“include/config/auto.conf”，行 73)
CONFIG_COMPAT_BRK = y
# makefile (从“scripts/Makefile.lib”，行 525)
cmd_zstd = cat $(real-prereqs) | $(ZSTD) -19 > $@
# makefile (从“scripts/Makefile.lib”，行 6)
ldflags-y := $(subst ,, )
# makefile (从“include/config/auto.conf”，行 526)
CONFIG_PRINTK = y
# 环境
KBUILD_KCONFIG = 
# makefile (从“scripts/Makefile.lib”，行 3)
asflags-y := $(subst ,, )
# makefile (从“include/config/auto.conf”，行 410)
CONFIG_SYSCTL = y
# makefile (从“scripts/Kbuild.include”，行 182)
make-cmd = $(call escsq,$(subst $(pound),$$(pound),$(subst $$,$$$$,$(cmd_$(1)))))
# makefile (从“scripts/Kbuild.include”，行 31)
test-le = $(call test-ge, $2, $1)
# 环境
LEX = flex
# makefile (从“include/config/auto.conf”，行 242)
CONFIG_SCSI_MOD = y
# makefile
MAKEFLAGS = prR --no-print-directory -- $(MAKEOVERRIDES)
# makefile (从“include/config/auto.conf”，行 492)
CONFIG_ARCH_STM32 = y
# 环境
MFLAGS = -prR --no-print-directory
# 环境
SSH_CLIENT = 192.168.139.1 1627 22
# 环境
KBZIP2 = bzip2
# 环境
RUSTFLAGS_KERNEL = 
# makefile (从“include/config/auto.conf”，行 135)
CONFIG_BLK_DEV_WRITE_MOUNTED = y
# makefile (从“scripts/Makefile.build”，行 492)
existing-dirs := scripts/basic
# makefile (从“scripts/Makefile.lib”，行 49)
suffix-search = $(strip $(foreach s, $3, $($(1:%$(strip $2)=%$s))))
# 环境
OBJDUMP = arm-none-eabi-objdump
# makefile (从“include/config/auto.conf”，行 113)
CONFIG_SERIAL_MCTRL_GPIO = y
# makefile (从“include/config/auto.conf”，行 468)
CONFIG_OLD_SIGSUSPEND3 = y
# makefile (从“include/config/auto.conf”，行 517)
CONFIG_GENERIC_SMP_IDLE_THREAD = y
# makefile (从“include/config/auto.conf”，行 484)
CONFIG_RTC_SYSTOHC_DEVICE = rtc0
# makefile (从“include/config/auto.conf”，行 30)
CONFIG_OF_IRQ = y
# makefile (从“include/config/auto.conf”，行 303)
CONFIG_SYSFS = y
# 环境
LC_PAPER = en_US.UTF-8
# makefile (从“include/config/auto.conf”，行 301)
CONFIG_XZ_DEC_RISCV = y
# 环境
BROWSER = /home/embedsky/.vscode-server/cli/servers/Stable-e54c774e0add60467559eb0d1e229c6452cf8447/server/bin/helpers/browser.sh
# makefile (从“scripts/Makefile.build”，行 455)
single-subdir-goals := 
# makefile (从“scripts/Makefile.lib”，行 506)
cmd_xzmisc = cat $(real-prereqs) | $(XZ) --check=crc32 --lzma2=dict=1MiB > $@
# 环境
MMUEXT = -nommu
# makefile (从“include/config/auto.conf”，行 247)
CONFIG_MACH_STM32F469 = y
# makefile (从“include/config/auto.conf”，行 41)
CONFIG_ARCH_WANT_FLAT_DTB_INSTALL = y
# 环境
KBUILD_HOSTLDLIBS = $(subst ,, )
# makefile (从“scripts/basic/Makefile”，行 5)
hostprogs-always-y = fixdep
# makefile (从“include/config/auto.conf”，行 22)
CONFIG_RTC_I2C_AND_SPI = y
# makefile (从“scripts/Makefile.build”，行 33)
subdir-asflags-y := 
# makefile (从“include/config/auto.conf”，行 308)
CONFIG_GENERIC_CLOCKEVENTS = y
# makefile (从“scripts/Makefile.build”，行 305)
getasmexports = { echo "#include <linux/kernel.h>" ; echo "#include <linux/string.h>" ; echo "#include <asm/asm-prototypes.h>" ; $(call getexportsymbols,EXPORT_SYMBOL(\1);) ; }
# 默认
MAKE_COMMAND := make
# makefile (从“scripts/Makefile.build”，行 110)
getexportsymbols = $(NM) $@ | sed -n 's/.* __export_symbol_\(.*\)/$(1)/p'
# makefile (从“scripts/Makefile.lib”，行 82)
always-y := scripts/basic/fixdep
# makefile (从“include/config/auto.conf”，行 218)
CONFIG_FUNCTION_ALIGNMENT = 0
# makefile (从“scripts/Kbuild.include”，行 153)
cmd = @$(if $(cmd_$(1)),set -e; $($(quiet)log_print) $(delete-on-interrupt) $(cmd_$(1)),:)
# makefile (从“include/config/auto.conf”，行 456)
CONFIG_MACH_STM32F746 = y
# makefile (从“include/config/auto.conf”，行 488)
CONFIG_HAVE_ARCH_BITREVERSE = y
# makefile (从“include/config/auto.conf”，行 212)
CONFIG_AEABI = y
# makefile (从“include/config/auto.conf”，行 149)
CONFIG_DECOMPRESS_LZ4 = y
# makefile (从“scripts/Makefile.lib”，行 427)
cmd_lzo = cat $(real-prereqs) | $(KLZOP) -9 > $@
# makefile (从“include/config/auto.conf”，行 70)
CONFIG_ARCH_SUPPORTS_PER_VMA_LOCK = y
# makefile (从“scripts/Makefile.lib”，行 386)
cmd_gzip = cat $(real-prereqs) | $(KGZIP) -n -f -9 > $@
# makefile (从“include/config/auto.conf”，行 386)
CONFIG_EXT3_FS = y
# makefile (从“include/config/auto.conf”，行 36)
CONFIG_HAVE_C_RECORDMCOUNT = y
# makefile (从“include/config/auto.conf”，行 191)
CONFIG_MOUSE_PS2 = y
# 自动
<F = $(notdir $<)
# makefile (从“include/config/auto.conf”，行 453)
CONFIG_HAVE_PERF_REGS = y
# makefile (从“scripts/Makefile.build”，行 404)
define rule_ld_multi_m
	$(call cmd_and_savecmd,ld_multi_m)
	$(call cmd,gen_objtooldep)
endef
# makefile (从“include/config/auto.conf”，行 430)
CONFIG_NLS = y
# makefile (从“scripts/Kbuild.include”，行 126)
silent_log_print = exec >/dev/null;
# makefile (从“include/config/auto.conf”，行 235)
CONFIG_HZ_FIXED = 0
# makefile (从“include/config/auto.conf”，行 310)
CONFIG_NO_HZ_IDLE = y
# makefile (从“scripts/Makefile.lib”，行 119)
_rust_flags = $(filter-out $(RUSTFLAGS_REMOVE_$(target-stem).o), $(filter-out $(rustflags-remove-y), $(KBUILD_RUSTFLAGS) $(rustflags-y)) $(RUSTFLAGS_$(target-stem).o))
# makefile (从“scripts/Makefile.lib”，行 108)
name-fix-token = $(subst $(comma),_,$(subst -,_,$1))
# makefile (从“scripts/basic/.fixdep.cmd”，行 3)
source_scripts/basic/fixdep := scripts/basic/fixdep.c
# makefile (从“scripts/Makefile.host”，行 129)
cmd_host-cobjs = $(HOSTCC) $(hostc_flags) -c -o $@ $<
# makefile (从“include/config/auto.conf”，行 195)
CONFIG_HAVE_CONTEXT_TRACKING_USER = y
# makefile (从“scripts/Makefile.build”，行 323)
quiet_cmd_cpp_s_S = CPP $(quiet_modtag) $@
# makefile (从“include/config/auto.conf”，行 71)
CONFIG_LOG_BUF_SHIFT = 16
# makefile (从“scripts/Makefile.compiler”，行 68)
clang-min-version = $(call test-ge, $(CONFIG_CLANG_VERSION), $1)
# makefile (从“include/config/auto.conf”，行 343)
CONFIG_STMPE_I2C = y
# makefile (从“include/config/auto.conf”，行 232)
CONFIG_INIT_STACK_NONE = y
# makefile (从“include/config/auto.conf”，行 473)
CONFIG_SERIO_SERPORT = y
# makefile (从“include/config/auto.conf”，行 344)
CONFIG_HAVE_ARCH_AUDITSYSCALL = y
# makefile (从“scripts/Makefile.build”，行 257)
define rule_rustc_o_rs
	$(call cmd_and_fixdep,rustc_o_rs)
	$(call cmd,gen_objtooldep)
endef
# makefile (从“scripts/Makefile.lib”，行 426)
quiet_cmd_lzo = LZO     $@
# makefile (从“include/config/auto.conf”，行 260)
CONFIG_CLKSRC_MMIO = y
# makefile (从“include/config/auto.conf”，行 196)
CONFIG_BINFMT_SCRIPT = y
# makefile (从“include/config/auto.conf”，行 363)
CONFIG_ZLIB_INFLATE = y
# makefile (从“include/config/auto.conf”，行 294)
CONFIG_HAVE_ARCH_PFN_VALID = y
# makefile (从“include/config/auto.conf”，行 224)
CONFIG_SERIAL_EARLYCON = y
# makefile (从“include/config/auto.conf”，行 42)
CONFIG_ARMV7M_SYSTICK = y
# makefile (从“scripts/Makefile.lib”，行 109)
name-fix = $(call stringify,$(call name-fix-token,$1))
# makefile (从“scripts/Kbuild.include”，行 80)
quiet_kecho := echo
# makefile (从“include/config/auto.conf”，行 204)
CONFIG_TTY = y
# makefile (从“scripts/Kbuild.include”，行 49)
basetarget = $(basename $(notdir $@))
# 自动
^F = $(notdir $^)
# makefile (从“include/config/auto.conf”，行 340)
CONFIG_UNINLINE_SPIN_UNLOCK = y
# makefile (从“include/config/auto.conf”，行 322)
CONFIG_CRC16 = y
# makefile (从“include/config/auto.conf”，行 107)
CONFIG_SOFTIRQ_ON_OWN_STACK = y
# 环境
UTS_MACHINE = arm
# makefile (从“scripts/Makefile.lib”，行 528)
cmd_zstd22 = cat $(real-prereqs) | $(ZSTD) -22 --ultra > $@
# makefile (从“include/config/auto.conf”，行 176)
CONFIG_BINFMT_ELF_FDPIC = y
# makefile (从“include/config/auto.conf”，行 180)
CONFIG_KEYBOARD_GPIO = y
# 环境
CLIPPY_CONF_DIR = .
# makefile (从“include/config/auto.conf”，行 206)
CONFIG_MOUSE_PS2_CYPRESS = y
# makefile (从“scripts/Makefile.build”，行 25)
EXTRA_CPPFLAGS := 
# makefile (从“include/config/auto.conf”，行 387)
CONFIG_LD_IS_BFD = y
# makefile (从“include/config/auto.conf”，行 28)
CONFIG_BLOCK_LEGACY_AUTOLOAD = y
# makefile (从“include/config/auto.conf”，行 361)
CONFIG_CC_HAS_KASAN_GENERIC = y
# makefile (从“include/config/auto.conf”，行 382)
CONFIG_RTC_SYSTOHC = y
# makefile (从“include/config/auto.conf”，行 240)
CONFIG_KALLSYMS = y
# makefile (从“scripts/Kbuild.include”，行 147)
delete-on-interrupt = $(if $(filter-out $(PHONY), $@), $(foreach sig, HUP INT QUIT TERM PIPE, trap 'rm -f $@; trap - $(sig); kill -s $(sig) $$$$' $(sig);))
# 默认
.INCLUDE_DIRS = /usr/include /usr/local/include /usr/include
# makefile (从“include/config/auto.conf”，行 305)
CONFIG_HAVE_ARCH_THREAD_STRUCT_WHITELIST = y
# makefile (从“include/config/auto.conf”，行 269)
CONFIG_STACKPROTECTOR = y
# makefile (从“scripts/Makefile.lib”，行 115)
_c_flags = $(filter-out $(CFLAGS_REMOVE_$(target-stem).o), $(filter-out $(ccflags-remove-y), $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) $(ccflags-y)) $(CFLAGS_$(target-stem).o))
# makefile (从“include/config/auto.conf”，行 495)
CONFIG_HAVE_BUILDTIME_MCOUNT_SORT = y
# 环境
KBUILD_CHECKSRC = 0
# 环境
MAKELEVEL := 2
# makefile (从“include/config/auto.conf”，行 125)
CONFIG_I2C_STM32F7 = y
# makefile (从“include/config/auto.conf”，行 405)
CONFIG_XIP_KERNEL = y
# 环境
MAKE_TERMERR = /dev/pts/2
# makefile (从“include/config/auto.conf”，行 414)
CONFIG_ARM_NVIC = y
# makefile (从“include/config/auto.conf”，行 509)
CONFIG_ALLOW_DEV_COREDUMP = y
# makefile (从“scripts/Makefile.compiler”，行 16)
TMPOUT = .tmp_$$$$
# makefile (从“include/config/auto.conf”，行 452)
CONFIG_ARCH_STACKWALK = y
# makefile (从“include/config/auto.conf”，行 62)
CONFIG_OF_GPIO = y
# makefile (从“include/config/auto.conf”，行 142)
CONFIG_PREEMPT_COUNT = y
# 环境
sub_make_done = 1
# makefile (从“scripts/Kbuild.include”，行 197)
if_changed = $(if $(if-changed-cond),$(cmd_and_savecmd),@:)
# makefile (从“include/config/auto.conf”，行 482)
CONFIG_PINCTRL_STM32 = y
# makefile (从“include/config/auto.conf”，行 435)
CONFIG_PINCTRL_STM32F769 = y
# 环境
LANG = zh_CN.UTF-8
# makefile (从“include/config/auto.conf”，行 51)
CONFIG_DEVTMPFS = y
# makefile (从“include/config/auto.conf”，行 172)
CONFIG_IIO_BUFFER = y
# makefile (从“scripts/Makefile.build”，行 454)
single-subdirs := 
# makefile (从“include/config/auto.conf”，行 233)
CONFIG_EEPROM_93CX6 = y
# makefile (从“scripts/Kbuild.include”，行 9)
empty := 
# makefile (从“scripts/Kbuild.include”，行 40)
tmp-target = $(dir $@).tmp_$(notdir $@)
# makefile (从“include/config/auto.conf”，行 339)
CONFIG_GENERIC_LIB_DEVMEM_IS_ALLOWED = y
# makefile (从“include/config/auto.conf”，行 528)
CONFIG_HIGH_RES_TIMERS = y
# makefile (从“include/config/auto.conf”，行 184)
CONFIG_PERF_USE_VMALLOC = y
# 环境
MOTD_SHOWN = pam
# makefile (从“scripts/Makefile.lib”，行 501)
quiet_cmd_xzkern_with_size = XZKERN  $@
# makefile (从“scripts/Makefile.build”，行 377)
cmd_ar_builtin = rm -f $@; $(if $(real-prereqs), printf "$(obj)/%s " $(patsubst $(obj)/%,%,$(real-prereqs)) | xargs) $(AR) cDPrST $@
# makefile (从“include/config/auto.conf”，行 354)
CONFIG_LZ4_DECOMPRESS = y
# makefile (从“include/config/auto.conf”，行 178)
CONFIG_FS_MBCACHE = y
# 变量的杂凑表状态:
# 负载=978/2048=48%, 重新杂凑=1, 碰撞=3237/2367=137%

# Pattern-specific 变量值

# 没有 pattern-specific 变量的值。

# 目录

# scripts/basic (设备 2053，i-节点 1185736)： 7 文件， 3 不可能.

# 7 文件， 3 不可能在 1 目录中。

# 隐含规则

scripts/basic/%: scripts/basic/%_shipped
#  要执行的配方 (从“scripts/Makefile.lib”，行 348)：
	$(call cmd,copy)

scripts/basic/%.s: scripts/basic/%.c FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 102)：
	$(call if_changed_dep,cc_s_c)

scripts/basic/%.i: scripts/basic/%.c FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 108)：
	$(call if_changed_dep,cpp_i_c)

scripts/basic/%.ll: scripts/basic/%.c FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 135)：
	$(call if_changed_dep,cc_ll_c)

scripts/basic/%.o: scripts/basic/%.c FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 207)：
	$(call if_changed_rule,cc_o_c)
	$(call cmd,force_checksrc)

scripts/basic/%.mod: FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 216)：
	$(call if_changed,mod)

scripts/basic/%.lst: scripts/basic/%.c FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 224)：
	$(call if_changed_dep,cc_lst_c)

scripts/basic/%.o: scripts/basic/%.rs FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 263)：
	+$(call if_changed_rule,rustc_o_rs)

scripts/basic/%.rsi: scripts/basic/%.rs FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 271)：
	+$(call if_changed_dep,rustc_rsi_rs)

scripts/basic/%.s: scripts/basic/%.rs FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 277)：
	+$(call if_changed_dep,rustc_s_rs)

scripts/basic/%.ll: scripts/basic/%.rs FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 283)：
	+$(call if_changed_dep,rustc_ll_rs)

scripts/basic/%.rs: scripts/basic/%.rs.S FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 289)：
	+$(call if_changed_dep,rustc_rs_rs_S)

scripts/basic/%.s: scripts/basic/%.S FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 327)：
	$(call if_changed_dep,cpp_s_S)

scripts/basic/%.o: scripts/basic/%.S FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 339)：
	$(call if_changed_rule,as_o_S)

scripts/basic/%.lds: scripts/basic/%.lds.S FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 352)：
	$(call if_changed_dep,cpp_lds_S)

scripts/basic/%.asn1.c scripts/basic/%.asn1.h: scripts/basic/%.asn1 scripts/asn1_compiler
#  要执行的配方 (从“scripts/Makefile.build”，行 361)：
	$(call cmd,asn1_compiler)

scripts/basic/%.lex.c: scripts/basic/%.l FORCE
#  要执行的配方 (从“scripts/Makefile.host”，行 9)：
	$(call if_changed,flex)

scripts/basic/%.tab.c scripts/basic/%.tab.h: scripts/basic/%.y FORCE
#  要执行的配方 (从“scripts/Makefile.host”，行 17)：
	$(call if_changed,bison)

# 18 条隐含规则，0 (0.0%) 终端。

# 文件

scripts/include/xalloc.h:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.398531342
#  文件已经被更新。
#  更新成功。

scripts/basic/lib.a: FORCE
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.build”，行 399)：
	$(call if_changed,ar)

FORCE:
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件已经被更新。
#  更新成功。

.PHONY: scripts/basic/ FORCE
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

.SECONDARY:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

# 不是一个目标：
scripts/gen-randstruct-seed.sh:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

# 不是一个目标：
scripts/basic/fixdep.c:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.378531884
#  文件已经被更新。
#  更新成功。

# 不是一个目标：
.SUFFIXES:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

scripts/basic/modules.order: FORCE
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.build”，行 392)：
	$(call if_changed,gen_order)

scripts/basic/randstruct.seed: scripts/gen-randstruct-seed.sh FORCE
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/basic/Makefile”，行 15)：
	$(call if_changed,create_randstruct_seed)

# 不是一个目标：
scripts/Makefile.host:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.374531993
#  文件已经被更新。
#  更新成功。

scripts/basic/: scripts/basic/fixdep
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“”
#  文件是一个中间前提。
#  文件不存在。
#  文件已经被更新。
#  更新成功。
# 自动
# @ := scripts/basic/
# 自动
# % := 
# 自动
# * := 
# 自动
# + := scripts/basic/fixdep
# 自动
# | := 
# 自动
# < := scripts/basic/fixdep
# 自动
# ^ := scripts/basic/fixdep
# 自动
# ? := scripts/basic/fixdep
# 变量的杂凑表状态:
# 负载=8/32=25%, 重新杂凑=0, 碰撞=1/42=2%
#  要执行的配方 (从“scripts/Makefile.build”，行 449)：
	@:

# 不是一个目标：
scripts/Makefile.compiler:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.374531993
#  文件已经被更新。
#  更新成功。

# 不是一个目标：
.DEFAULT:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

scripts/basic/built-in.a: FORCE
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.build”，行 382)：
	$(call if_changed,ar_builtin)

# 不是一个目标：
scripts/Makefile.lib:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.374531993
#  文件已经被更新。
#  更新成功。

# 不是一个目标：
scripts/Makefile.build:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 21:37:11.027081785
#  文件已经被更新。
#  更新成功。

# 不是一个目标：
scripts/basic/Makefile:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.378531884
#  文件已经被更新。
#  更新成功。

# 不是一个目标：
include/config/auto.conf:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:19:28.903162193
#  文件已经被更新。
#  更新成功。

.DELETE_ON_ERROR:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

# 不是一个目标：
scripts/Kbuild.include:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.374531993
#  文件已经被更新。
#  更新成功。

# 不是一个目标：
scripts/basic/.fixdep.cmd:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 21:52:35.140878447
#  文件已经被更新。
#  更新成功。

scripts/basic/fixdep: scripts/basic/fixdep.c FORCE scripts/include/xalloc.h
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“fixdep”
#  最近更新 2025-03-01 21:52:35.136878601
#  文件已经被更新。
#  更新成功。
# 自动
# @ := scripts/basic/fixdep
# 自动
# % := 
# 自动
# * := fixdep
# 自动
# + := scripts/basic/fixdep.c FORCE scripts/include/xalloc.h
# 自动
# | := 
# 自动
# < := scripts/basic/fixdep.c
# 自动
# ^ := scripts/basic/fixdep.c FORCE scripts/include/xalloc.h
# 自动
# ? := 
# 变量的杂凑表状态:
# 负载=8/32=25%, 重新杂凑=0, 碰撞=9/48=19%
#  要执行的配方 (从“scripts/Makefile.host”，行 114)：
	$(call if_changed_dep,host-csingle)

# 文件杂凑表状态:
# 负载=23/1024=2%, 重新杂凑=0, 碰撞=3/63=5%
# VPATH 搜索路径

# 没有“vpath”搜索路径。

# 没有通用搜索路径(“VPATH”变量)。

# strcache 缓冲: 1 (0) / 字串 = 63 / 空间 = 1198 B / 平均 = 19 B
# 目前缓冲: 尺寸 = 8162 B / 已用 = 1198 B / 数量 = 63 / 平均 = 19 B

# strcache 性能：查找 = 133 / 命中率 = 52%
# 杂凑表统计数据:
# 负载=63/8192=1%, 重新杂凑=0, 碰撞=5/133=4%
# 在 Sat Mar  1 21:52:56 2025
 上完成 make 数据基础
#
# No change to .config
#
# GNU Make 4.2.1
# 为 x86_64-pc-linux-gnu 编译
# Copyright (C) 1988-2016 Free Software Foundation, Inc.
# 许可证：GPLv3+：GNU 通用公共许可证第 3 版或更新版本<http://gnu.org/licenses/gpl.html>。
# 本软件是自由软件：您可以自由修改和重新发布它。
# 在法律允许的范围内没有其他保证。

# make 数据基础，打印在 Sat Mar  1 21:52:58 2025

# 变量

# makefile (从“include/config/auto.conf”，行 291)
CONFIG_DEFAULT_INIT = 
# 环境
VSCODE_GIT_ASKPASS_MAIN = /home/embedsky/.vscode-server/cli/servers/Stable-e54c774e0add60467559eb0d1e229c6452cf8447/server/extensions/git/dist/askpass-main.js
# makefile (从“scripts/Makefile.host”，行 14)
cmd_bison = $(YACC) -o $(basename $@).c --defines=$(basename $@).h -t -l $<
# makefile (从“scripts/Kbuild.include”，行 206)
cmd_and_fixdep = $(cmd); $(objtree)/scripts/basic/fixdep $(depfile) $@ '$(make-cmd)' > $(dot-target).cmd; rm -f $(depfile)
# makefile (从“include/config/auto.conf”，行 465)
CONFIG_USB_OHCI_LITTLE_ENDIAN = y
# 自动
?F = $(notdir $?)
# makefile (从“scripts/Makefile.build”，行 428)
hostprogs := conf gconf mconf nconf qconf
# 自动
<D = $(patsubst %/,%,$(dir $<))
# makefile (从“include/config/auto.conf”，行 94)
CONFIG_CONTEXT_TRACKING = y
# makefile (从“scripts/Kbuild.include”，行 32)
test-lt = $(call test-gt, $2, $1)
# 环境
AFLAGS_KERNEL = 
# makefile (从“scripts/Kbuild.include”，行 97)
define filechk
	$(check-FORCE)
	$(Q)set -e; mkdir -p $(dir $@); trap "rm -f $(tmp-target)" EXIT; { $(filechk_$(1)); } > $(tmp-target); if [ ! -r $@ ] || ! cmp -s $@ $(tmp-target); then $(kecho) '  UPD     $@'; mv -f $(tmp-target) $@; fi
endef
# makefile (从“scripts/Makefile.build”，行 305)
getasmexports = { echo "#include <linux/kernel.h>" ; echo "#include <linux/string.h>" ; echo "#include <asm/asm-prototypes.h>" ; $(call getexportsymbols,EXPORT_SYMBOL(\1);) ; }
# makefile (从“include/config/auto.conf”，行 504)
CONFIG_HAVE_ARCH_SECCOMP = y
# makefile (从“scripts/Makefile.lib”，行 53)
real-search = $(foreach m, $1, $(if $(call suffix-search, $m, $2, $3 -), $(call suffix-search, $m, $2, $3), $m))
# 环境
XDG_SESSION_CLASS = user
# 环境
PATCHLEVEL = 14
# makefile (从“include/config/auto.conf”，行 261)
CONFIG_ZBOOT_ROM_TEXT = 0x0
# makefile (从“include/config/auto.conf”，行 92)
CONFIG_RTC_INTF_SYSFS = y
# makefile (从“include/config/auto.conf”，行 431)
CONFIG_MMC_STM32_SDMMC = y
# 环境
XDG_SESSION_TYPE = tty
# makefile (从“include/config/auto.conf”，行 185)
CONFIG_MEMBARRIER = y
# makefile (从“scripts/Makefile.host”，行 135)
quiet_cmd_host-cxxmulti = HOSTLD  $@
# 环境
KBUILD_HOSTLDFLAGS = $(subst ,, )
# makefile (从“scripts/Makefile.lib”，行 315)
cmd_cc_o_c = $(CC) $(c_flags) -c -o $@ $< $(cmd_ld_single) $(cmd_objtool)
# makefile (从“scripts/kconfig/.preprocess.o.cmd”，行 5)
deps_scripts/kconfig/preprocess.o := scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/include/xalloc.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/kconfig/lkc.h  scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h scripts/kconfig/preprocess.h 
# makefile (从“scripts/kconfig/.symbol.o.cmd”，行 1)
savedcmd_scripts/kconfig/symbol.o := gcc -Wp,-MMD,scripts/kconfig/.symbol.o.d -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer -std=gnu11   -I ./scripts/include   -c -o scripts/kconfig/symbol.o scripts/kconfig/symbol.c
# makefile (从“include/config/auto.conf”，行 201)
CONFIG_BLOCK = y
# makefile (从“include/config/auto.conf”，行 323)
CONFIG_MACH_STM32H743 = y
# 环境
LDFLAGS_MODULE = 
# 自动
@F = $(notdir $@)
# makefile (从“scripts/Makefile.lib”，行 549)
filechk_offsets = 	 echo "#ifndef $2"; echo "#define $2"; echo "/*"; echo " * DO NOT MODIFY."; echo " *"; echo " * This file was generated by Kbuild"; echo " */"; echo ""; sed -ne $(sed-offsets) < $<; echo ""; echo "#endif"
# makefile
CURDIR := /home/embedsky/share/linux-stable
# 环境
NM = arm-none-eabi-nm
# makefile (从“include/config/auto.conf”，行 15)
CONFIG_SBITMAP = y
# 环境
Q = @
# makefile (从“scripts/Makefile.lib”，行 423)
quiet_cmd_lzma_with_size = LZMA    $@
# 环境
XZ = xz
# makefile (从“scripts/Makefile.build”，行 318)
cmd_gensymtypes_S = $(getasmexports) | $(CPP) -D__GENKSYMS__ $(c_flags) -xc - | $(genksyms)
# makefile (从“include/config/auto.conf”，行 332)
CONFIG_NLS_DEFAULT = iso8859-1
# makefile (从“include/config/auto.conf”，行 452)
CONFIG_ARCH_STACKWALK = y
# 环境
_ = /usr/bin/make
# makefile (从“include/config/auto.conf”，行 37)
CONFIG_TICK_ONESHOT = y
# makefile (从“scripts/Makefile.build”，行 22)
subdir-m := 
# 自动
?D = $(patsubst %/,%,$(dir $?))
# makefile (从“scripts/Makefile.build”，行 126)
cmd_gensymtypes_c = $(CPP) -D__GENKSYMS__ $(c_flags) $< | $(genksyms)
# makefile (从“scripts/kconfig/.parser.tab.h.cmd”，行 1)
savedcmd_scripts/kconfig/parser.tab.h := bison -o scripts/kconfig/parser.tab.c --defines=scripts/kconfig/parser.tab.h -t -l scripts/kconfig/parser.y
# makefile (从“include/config/auto.conf”，行 481)
CONFIG_RD_LZ4 = y
# 环境
KBUILD_LDFLAGS_MODULE = 
# makefile (从“include/config/auto.conf”，行 508)
CONFIG_INPUT_VIVALDIFMAP = y
# makefile (从“include/config/auto.conf”，行 527)
CONFIG_CC_VERSION_TEXT = arm-none-eabi-gcc (GNU Arm Embedded Toolchain 10.3-2021.10) 10.3.1 20210824 (release)
# makefile (从“include/config/auto.conf”，行 494)
CONFIG_ARM_AMBA = y
# makefile (从“include/config/auto.conf”，行 324)
CONFIG_MMC_BLOCK_MINORS = 8
# makefile (从“scripts/kconfig/.symbol.o.cmd”，行 5)
deps_scripts/kconfig/symbol.o := scripts/include/hash.h scripts/include/xalloc.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/kconfig/lkc.h  scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h 
# makefile (从“include/config/auto.conf”，行 159)
CONFIG_GCC_NO_STRINGOP_OVERFLOW = y
# makefile (从“include/config/auto.conf”，行 126)
CONFIG_BUG = y
# makefile (从“scripts/Kbuild.include”，行 127)
quiet_log_print = $(if $(quiet_cmd_$1), echo '  $(call escsq,$(quiet_cmd_$1)$(why))';)
# makefile (从“include/config/auto.conf”，行 475)
CONFIG_HAVE_PAGE_SIZE_4KB = y
# makefile (从“scripts/kconfig/.util.o.cmd”，行 1)
MAKEFILE_LIST :=  scripts/Makefile.build include/config/auto.conf scripts/Kbuild.include scripts/Makefile.compiler scripts/kconfig/Makefile scripts/Makefile.lib scripts/Makefile.host scripts/kconfig/.conf.cmd scripts/kconfig/.conf.o.cmd scripts/kconfig/.confdata.o.cmd scripts/kconfig/.expr.o.cmd scripts/kconfig/.lexer.lex.c.cmd scripts/kconfig/.lexer.lex.o.cmd scripts/kconfig/.menu.o.cmd scripts/kconfig/.parser.tab.h.cmd scripts/kconfig/.parser.tab.o.cmd scripts/kconfig/.preprocess.o.cmd scripts/kconfig/.symbol.o.cmd scripts/kconfig/.util.o.cmd
# makefile (从“include/config/auto.conf”，行 82)
CONFIG_GENERIC_IRQ_SHOW_LEVEL = y
# makefile (从“scripts/Makefile.lib”，行 58)
multi-obj-ym := $(subst ,, )
# makefile (从“scripts/Makefile.lib”，行 127)
_cpp_flags = $(KBUILD_CPPFLAGS) $(cppflags-y) $(CPPFLAGS_$(target-stem).lds)
# makefile (从“include/config/auto.conf”，行 524)
CONFIG_LEGACY_TIOCSTI = y
# 环境
KBUILD_RUSTFLAGS_KERNEL = 
# makefile (从“scripts/Makefile.lib”，行 56)
multi-obj-y := 
# makefile (从“include/config/auto.conf”，行 311)
CONFIG_WATCHDOG_CORE = y
# makefile (从“include/config/auto.conf”，行 189)
CONFIG_HAVE_KERNEL_LZ4 = y
# makefile (从“include/config/auto.conf”，行 503)
CONFIG_LOCKDEP_SUPPORT = y
# makefile (从“include/config/auto.conf”，行 144)
CONFIG_ARCH_KEEP_MEMBLOCK = y
# makefile (从“include/config/auto.conf”，行 422)
CONFIG_FRAME_WARN = 1024
# “override”指令
GNUMAKEFLAGS := 
# 环境
KLZOP = lzop
# makefile (从“include/config/auto.conf”，行 360)
CONFIG_XZ_DEC_ARMTHUMB = y
# 环境
srctree = .
# makefile (从“include/config/auto.conf”，行 17)
CONFIG_AS_IS_GNU = y
# makefile (从“include/config/auto.conf”，行 469)
CONFIG_COMPAT_32BIT_TIME = y
# makefile (从“scripts/Makefile.host”，行 75)
host-cobjs := scripts/kconfig/conf.o scripts/kconfig/confdata.o scripts/kconfig/expr.o scripts/kconfig/gconf.o scripts/kconfig/images.o scripts/kconfig/lexer.lex.o scripts/kconfig/lxdialog/checklist.o scripts/kconfig/lxdialog/inputbox.o scripts/kconfig/lxdialog/menubox.o scripts/kconfig/lxdialog/textbox.o scripts/kconfig/lxdialog/util.o scripts/kconfig/lxdialog/yesno.o scripts/kconfig/mconf.o scripts/kconfig/menu.o scripts/kconfig/mnconf-common.o scripts/kconfig/nconf.gui.o scripts/kconfig/nconf.o scripts/kconfig/parser.tab.o scripts/kconfig/preprocess.o scripts/kconfig/symbol.o scripts/kconfig/util.o
# makefile (从“scripts/Makefile.lib”，行 10)
KBUILD_CFLAGS =  -std=gnu11 -fshort-wchar -funsigned-char -fno-common -fno-PIE -fno-strict-aliasing -fno-dwarf2-cfi-asm -mno-fdpic -mno-unaligned-access -fno-ipa-sra -mabi=apcs-gnu -mno-thumb-interwork -marm -Wa,-mno-warn-deprecated    -msoft-float -Uarm $(subdir-ccflags-y)
# makefile (从“include/config/auto.conf”，行 209)
CONFIG_ARCH_USE_CMPXCHG_LOCKREF = y
# makefile (从“include/config/auto.conf”，行 179)
CONFIG_TIMER_OF = y
# makefile (从“include/config/auto.conf”，行 383)
CONFIG_ARCH_HAS_CACHE_LINE_SIZE = y
# makefile (从“scripts/Makefile.host”，行 110)
quiet_cmd_host-csingle = HOSTCC  $@
# makefile (从“scripts/Kbuild.include”，行 61)
stringify = $(squote)$(quote)$1$(quote)$(squote)
# makefile (从“include/config/auto.conf”，行 10)
CONFIG_CLKSRC_STM32 = y
# makefile (从“include/config/auto.conf”，行 19)
CONFIG_STACKPROTECTOR_STRONG = y
# makefile (从“include/config/auto.conf”，行 55)
CONFIG_ARCH_WANT_LD_ORPHAN_WARN = y
# makefile (从“include/config/auto.conf”，行 169)
CONFIG_CACHESTAT_SYSCALL = y
# makefile (从“include/config/auto.conf”，行 146)
CONFIG_I2C_BOARDINFO = y
# makefile (从“scripts/Makefile.lib”，行 223)
is-kernel-object = $(or $(part-of-builtin),$(part-of-module))
# 环境
LINUXINCLUDE = -I./arch/arm/include -I./arch/arm/include/generated -I./include -I./include -I./arch/arm/include/uapi -I./arch/arm/include/generated/uapi -I./include/uapi -I./include/generated/uapi -include ./include/linux/compiler-version.h -include ./include/linux/kconfig.h
# makefile (从“include/config/auto.conf”，行 497)
CONFIG_NEED_SRCU_NMI_SAFE = y
# makefile (从“include/config/auto.conf”，行 211)
CONFIG_ARCH_HAS_KEEPINITRD = y
# makefile (从“scripts/Makefile.host”，行 74)
host-cmulti := scripts/kconfig/conf scripts/kconfig/gconf scripts/kconfig/mconf scripts/kconfig/nconf
# makefile (从“include/config/auto.conf”，行 316)
CONFIG_INPUT_MOUSE = y
# makefile (从“include/config/auto.conf”，行 181)
CONFIG_BASE_SMALL = y
# makefile (从“include/config/auto.conf”，行 272)
CONFIG_HAVE_IRQ_TIME_ACCOUNTING = y
# makefile (从“include/config/auto.conf”，行 228)
CONFIG_XZ_DEC_X86 = y
# makefile (从“scripts/Kbuild.include”，行 36)
dot-target = $(dir $@).$(notdir $@)
# makefile (从“include/config/auto.conf”，行 162)
CONFIG_ELFCORE = y
# 环境
rust_common_flags = --edition=2021 -Zbinary_dep_depinfo=y -Astable_features -Dnon_ascii_idents -Dunsafe_op_in_unsafe_fn -Wmissing_docs -Wrust_2018_idioms -Wunreachable_pub -Wclippy::all -Wclippy::ignored_unit_patterns -Wclippy::mut_mut -Wclippy::needless_bitwise_bool -Wclippy::needless_continue -Aclippy::needless_lifetimes -Wclippy::no_mangle_with_rust_abi -Wclippy::undocumented_unsafe_blocks -Wclippy::unnecessary_safety_comment -Wclippy::unnecessary_safety_doc -Wrustdoc::missing_crate_level_docs -Wrustdoc::unescaped_backticks
# makefile (从“include/config/auto.conf”，行 358)
CONFIG_PREVENT_FIRMWARE_BUILD = y
# makefile (从“include/config/auto.conf”，行 283)
CONFIG_HAVE_NMI = y
# makefile (从“include/config/auto.conf”，行 380)
CONFIG_WATCHDOG = y
# 环境
LZMA = lzma
# makefile (从“scripts/Makefile.lib”，行 4)
ccflags-y := $(subst ,, )
# 环境
LESSOPEN = | /usr/bin/lesspipe %s
# makefile (从“scripts/Makefile.lib”，行 87)
real-obj-m := 
# makefile (从“include/config/auto.conf”，行 295)
CONFIG_XIP_PHYS_ADDR = 0x08008000
# makefile (从“scripts/Makefile.host”，行 83)
hostc_flags = -Wp,-MMD,$(depfile) $(KBUILD_HOSTCFLAGS) $(HOST_EXTRACFLAGS) $(HOSTCFLAGS_$(target-stem).o)
# 环境
KBUILD_CFLAGS_KERNEL = 
# 环境
CPP = arm-none-eabi-gcc -E
# makefile (从“include/config/auto.conf”，行 307)
CONFIG_GCC10_NO_ARRAY_BOUNDS = y
# makefile (从“scripts/Makefile.build”，行 401)
quiet_cmd_ld_multi_m = LD [M]  $@
# makefile (从“include/config/auto.conf”，行 441)
CONFIG_HAVE_CLK_PREPARE = y
# makefile (从“scripts/Makefile.host”，行 145)
quiet_cmd_host-cxxobjs = HOSTCXX $@
# makefile (从“include/config/auto.conf”，行 313)
CONFIG_MODULES_USE_ELF_REL = y
# makefile (从“include/config/auto.conf”，行 348)
CONFIG_USE_OF = y
# makefile (从“scripts/kconfig/Makefile”，行 203)
qconf-cxxobjs := qconf.o qconf-moc.o
# makefile (从“include/config/auto.conf”，行 167)
CONFIG_DEBUG_INFO = y
# makefile (从“scripts/Kbuild.include”，行 45)
depfile = $(subst $(comma),_,$(dot-target).d)
# makefile (从“include/config/auto.conf”，行 448)
CONFIG_FHANDLE = y
# 环境
SSH_CONNECTION = 192.168.139.1 1627 192.168.139.128 22
# makefile (从“include/config/auto.conf”，行 60)
CONFIG_CC_HAS_NO_PROFILE_FN_ATTR = y
# 环境
PATH = /home/embedsky/.vscode-server/cli/servers/Stable-e54c774e0add60467559eb0d1e229c6452cf8447/server/bin/remote-cli:/opt/gcc-arm-none-eabi-10.3-2021.10/bin:/home/embedsky/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/opt/EmbedSky/TQ3568/tools/aarch64-linux-gcc-v9.3/bin:/opt/EmbedSky/TQ3568/tools/aarch64-linux-gcc-v9.3/aarch64-buildroot-linux-gnu/bin:/snap/bin:/opt/fsl-imx-xwayland/6.1-mickledore/sysroots/x86_64-pokysdk-linux/usr/bin/aarch64-poky-linux:/home/embedsky/.vscode-server/data/User/globalStorage/github.copilot-chat/debugCommand:/opt/fsl-imx-xwayland/6.1-mickledore/sysroots/x86_64-pokysdk-linux/usr/bin/aarch64-poky-linux
# makefile (从“scripts/Makefile.build”，行 434)
userprogs := 
# 环境
KBUILD_AFLAGS_KERNEL = 
# makefile (从“include/config/auto.conf”，行 239)
CONFIG_HAVE_LD_DEAD_CODE_DATA_ELIMINATION = y
# makefile (从“scripts/kconfig/Makefile”，行 175)
conf-objs := conf.o confdata.o expr.o lexer.lex.o menu.o parser.tab.o preprocess.o symbol.o util.o
# makefile (从“include/config/auto.conf”，行 300)
CONFIG_MQ_IOSCHED_KYBER = y
# makefile (从“scripts/kconfig/.conf.cmd”，行 1)
savedcmd_scripts/kconfig/conf := gcc   -o scripts/kconfig/conf scripts/kconfig/conf.o scripts/kconfig/confdata.o scripts/kconfig/expr.o scripts/kconfig/lexer.lex.o scripts/kconfig/menu.o scripts/kconfig/parser.tab.o scripts/kconfig/preprocess.o scripts/kconfig/symbol.o scripts/kconfig/util.o   
# makefile (从“scripts/Makefile.build”，行 254)
quiet_cmd_rustc_o_rs = $(RUSTC_OR_CLIPPY_QUIET) $(quiet_modtag) $@
# makefile (从“scripts/kconfig/Makefile”，行 44)
gconfig-prog := gconf
# makefile (从“include/config/auto.conf”，行 50)
CONFIG_HAVE_MOD_ARCH_SPECIFIC = y
# makefile (从“include/config/auto.conf”，行 151)
CONFIG_DTC = y
# makefile (从“include/config/auto.conf”，行 392)
CONFIG_NOMMU_INITIAL_TRIM_EXCESS = 1
# makefile (从“scripts/Makefile.lib”，行 110)
basename_flags = -DKBUILD_BASENAME=$(call name-fix,$(basetarget))
# makefile (从“include/config/auto.conf”，行 13)
CONFIG_GENERIC_SCHED_CLOCK = y
# makefile (从“include/config/auto.conf”，行 418)
CONFIG_CC_OPTIMIZE_FOR_SIZE = y
# makefile (从“include/config/auto.conf”，行 199)
CONFIG_ARCH_FORCE_MAX_ORDER = 10
# 环境
KBUILD_USERCFLAGS = -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer -std=gnu11 
# makefile (从“include/config/auto.conf”，行 377)
CONFIG_TIMER_PROBE = y
# makefile (从“scripts/Kbuild.include”，行 10)
space := $(subst ,, )
# makefile (从“include/config/auto.conf”，行 447)
CONFIG_EFI_PARTITION = y
# 环境
XDG_RUNTIME_DIR = /run/user/1000
# makefile (从“include/config/auto.conf”，行 163)
CONFIG_I2C_STM32F4 = y
# makefile (从“include/config/auto.conf”，行 263)
CONFIG_XZ_DEC_ARM64 = y
# makefile (从“scripts/kconfig/Makefile”，行 28)
KCONFIG_DEFCONFIG_LIST :=  arch/arm/configs/multi_v7_defconfig
# makefile (从“include/config/auto.conf”，行 331)
CONFIG_ARCH_DEFAULT_CRASH_DUMP = y
# 环境
LC_MONETARY = en_US.UTF-8
# makefile (从“scripts/Makefile.host”，行 5)
quiet_cmd_flex = LEX     $@
# makefile (从“include/config/auto.conf”，行 186)
CONFIG_OF_ADDRESS = y
# makefile (从“scripts/kconfig/Makefile”，行 212)
quiet_cmd_moc = MOC     $@
# makefile (从“include/config/auto.conf”，行 413)
CONFIG_SSB_POSSIBLE = y
# makefile (从“include/config/auto.conf”，行 210)
CONFIG_DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT = y
# makefile (从“include/config/auto.conf”，行 202)
CONFIG_PTP_1588_CLOCK_OPTIONAL = y
# makefile (从“scripts/Kbuild.include”，行 6)
comma := ,
# makefile (从“scripts/Makefile.host”，行 153)
quiet_cmd_host-rust = HOSTRUSTC $@
# makefile (从“include/config/auto.conf”，行 355)
CONFIG_RD_LZO = y
# makefile (从“scripts/kconfig/Makefile”，行 43)
nconfig-prog := nconf
# makefile (从“include/config/auto.conf”，行 521)
CONFIG_OF_KOBJ = y
# makefile (从“include/config/auto.conf”，行 335)
CONFIG_GENERIC_STRNCPY_FROM_USER = y
# makefile (从“include/config/auto.conf”，行 45)
CONFIG_PAGE_SIZE_4KB = y
# makefile (从“include/config/auto.conf”，行 366)
CONFIG_HID_GENERIC = y
# makefile (从“include/config/auto.conf”，行 334)
CONFIG_REGULATOR = y
# makefile (从“scripts/Makefile.build”，行 218)
quiet_cmd_cc_lst_c = MKLST   $@
# 环境
KBUILD_PROCMACROLDFLAGS = $(subst ,, )
# 环境
AR = arm-none-eabi-ar
# makefile (从“scripts/Makefile.build”，行 141)
is-single-obj-m = $(and $(part-of-module),$(filter $@, $(obj-m)),y)
# makefile (从“include/config/auto.conf”，行 72)
CONFIG_FORCE_NR_CPUS = y
# makefile (从“scripts/kconfig/.util.o.cmd”，行 5)
deps_scripts/kconfig/util.o := scripts/include/hash.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/include/xalloc.h scripts/kconfig/lkc.h  scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h 
# makefile (从“include/config/auto.conf”，行 120)
CONFIG_INITRAMFS_PRESERVE_MTIME = y
# makefile (从“include/config/auto.conf”，行 478)
CONFIG_EXT4_USE_FOR_EXT2 = y
# 默认
.FEATURES := target-specific order-only second-expansion else-if shortest-stem undefine oneshell archives jobserver output-sync check-symlink load
# makefile (从“scripts/kconfig/Makefile”，行 78)
simple-targets := oldconfig allnoconfig allyesconfig allmodconfig alldefconfig randconfig listnewconfig olddefconfig syncconfig helpnewconfig yes2modconfig mod2yesconfig mod2noconfig
# makefile (从“include/config/auto.conf”，行 432)
CONFIG_CC_NO_ARRAY_BOUNDS = y
# makefile (从“include/config/auto.conf”，行 112)
CONFIG_LEDS_TRIGGERS = y
# makefile (从“scripts/Makefile.lib”，行 502)
cmd_xzkern_with_size = { cat $(real-prereqs) | sh $(srctree)/scripts/xz_wrap.sh; $(size_append); } > $@
# makefile (从“include/config/auto.conf”，行 106)
CONFIG_HAS_DMA = y
# makefile (从“include/config/auto.conf”，行 485)
CONFIG_RTC_INTF_PROC = y
# 环境
LS_COLORS = rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
# makefile (从“include/config/auto.conf”，行 90)
CONFIG_MOUSE_PS2_LOGIPS2PP = y
# makefile (从“include/config/auto.conf”，行 177)
CONFIG_DMADEVICES = y
# makefile (从“include/config/auto.conf”，行 230)
CONFIG_KERNEL_GZIP = y
# 环境
SUBLEVEL = 0
# makefile (从“include/config/auto.conf”，行 502)
CONFIG_ARCH_MMAP_RND_BITS_MIN = 8
# makefile (从“scripts/Makefile.lib”，行 371)
cmd_ar = rm -f $@; $(AR) cDPrsT $@ $(real-prereqs)
# 自动
%F = $(notdir $%)
# makefile (从“include/config/auto.conf”，行 398)
CONFIG_SERIAL_STM32_CONSOLE = y
# makefile (从“scripts/Makefile.host”，行 6)
cmd_flex = $(LEX) -o$@ -L $<
# 环境
KBUILD_LDFLAGS =  -EL
# makefile (从“scripts/kconfig/.preprocess.o.cmd”，行 1)
savedcmd_scripts/kconfig/preprocess.o := gcc -Wp,-MMD,scripts/kconfig/.preprocess.o.d -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer -std=gnu11   -I ./scripts/include   -c -o scripts/kconfig/preprocess.o scripts/kconfig/preprocess.c
# makefile (从“scripts/kconfig/Makefile”，行 45)
xconfig-prog := qconf
# makefile (从“include/config/auto.conf”，行 128)
CONFIG_ARCH_HAS_GCOV_PROFILE_ALL = y
# 环境
RUSTFLAGS_MODULE = 
# makefile (从“scripts/kconfig/Makefile”，行 47)
define config_rule
PHONY += $(1)
$(1): $(obj)/$($(1)-prog)
	$(Q)$$< $(silent) $(Kconfig)

PHONY += build_$(1)
build_$(1): $(obj)/$($(1)-prog)
endef
# makefile (从“include/config/auto.conf”，行 378)
CONFIG_ZSTD_COMMON = y
# makefile (从“scripts/kconfig/Makefile”，行 204)
qconf-objs := images.o confdata.o expr.o lexer.lex.o menu.o parser.tab.o preprocess.o symbol.o util.o
# makefile (从“include/config/auto.conf”，行 297)
CONFIG_RUSTC_LLVM_VERSION = 0
# makefile (从“scripts/kconfig/.confdata.o.cmd”，行 3)
source_scripts/kconfig/confdata.o := scripts/kconfig/confdata.c
# 环境
SSL_CERT_FILE = /usr/lib/ssl/certs/ca-certificates.crt
# 环境
HOME = /home/embedsky
# 环境
CC_VERSION_TEXT = arm-none-eabi-gcc (GNU Arm Embedded Toolchain 10.3-2021.10) 10.3.1 20210824 (release)
# makefile (从“scripts/Makefile.lib”，行 81)
extra-y := 
# makefile (从“include/config/auto.conf”，行 96)
CONFIG_MOUSE_PS2_SYNAPTICS_SMBUS = y
# makefile (从“scripts/kconfig/Makefile”，行 195)
HOSTCFLAGS_lxdialog/checklist.o = $(call read-file, scripts/kconfig/mconf-cflags)
# makefile (从“include/config/auto.conf”，行 133)
CONFIG_SCHED_HRTICK = y
# makefile (从“scripts/kconfig/.lexer.lex.o.cmd”，行 1)
savedcmd_scripts/kconfig/lexer.lex.o := gcc -Wp,-MMD,scripts/kconfig/.lexer.lex.o.d -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer -std=gnu11   -I ./scripts/include  -I ./scripts/kconfig -c -o scripts/kconfig/lexer.lex.o scripts/kconfig/lexer.lex.c
# makefile (从“include/config/auto.conf”，行 134)
CONFIG_VIRTIO_MENU = y
# makefile (从“include/config/auto.conf”，行 499)
CONFIG_NEED_DMA_MAP_STATE = y
# makefile (从“scripts/Makefile.build”，行 98)
quiet_cmd_cc_s_c = CC $(quiet_modtag)  $@
# makefile (从“include/config/auto.conf”，行 75)
CONFIG_PWRSEQ_EMMC = y
# makefile (从“include/config/auto.conf”，行 136)
CONFIG_CC_NO_STRINGOP_OVERFLOW = y
# makefile (从“include/config/auto.conf”，行 170)
CONFIG_PINCTRL_STM32F469 = y
# 环境
SHLVL = 1
# makefile (从“include/config/auto.conf”，行 86)
CONFIG_ARCH_HAVE_NMI_SAFE_CMPXCHG = y
# makefile (从“include/config/auto.conf”，行 257)
CONFIG_WATCHDOG_HANDLE_BOOT_ENABLED = y
# makefile (从“include/config/auto.conf”，行 426)
CONFIG_LEDS_CLASS = y
# makefile (从“include/config/auto.conf”，行 123)
CONFIG_RD_BZIP2 = y
# makefile (从“scripts/Makefile.lib”，行 100)
modfile = $(addprefix $(obj)/,$(__modname))
# makefile (从“include/config/auto.conf”，行 514)
CONFIG_NO_IOPORT_MAP = y
# makefile (从“scripts/Makefile.lib”，行 454)
quiet_cmd_uimage = UIMAGE  $@
# makefile (从“scripts/kconfig/.expr.o.cmd”，行 1)
savedcmd_scripts/kconfig/expr.o := gcc -Wp,-MMD,scripts/kconfig/.expr.o.d -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer -std=gnu11   -I ./scripts/include   -c -o scripts/kconfig/expr.o scripts/kconfig/expr.c
# makefile (从“include/config/auto.conf”，行 464)
CONFIG_LD_ORPHAN_WARN_LEVEL = warn
# 环境
RUSTC_OR_CLIPPY = rustc
# makefile (从“include/config/auto.conf”，行 459)
CONFIG_INPUT_LEDS = y
# makefile (从“scripts/Makefile.lib”，行 123)
_a_flags = $(filter-out $(AFLAGS_REMOVE_$(target-stem).o), $(filter-out $(asflags-remove-y), $(KBUILD_CPPFLAGS) $(KBUILD_AFLAGS) $(asflags-y)) $(AFLAGS_$(target-stem).o))
# makefile (从“include/config/auto.conf”，行 403)
CONFIG_EXT4_FS = y
# makefile (从“include/config/auto.conf”，行 359)
CONFIG_CC_HAS_SANCOV_TRACE_PC = y
# 环境
DBUS_SESSION_BUS_ADDRESS = unix:path=/run/user/1000/bus
# makefile (从“scripts/kconfig/Makefile”，行 208)
HOSTCXXFLAGS_qconf-moc.o = -std=c++11 -fPIC $(call read-file, $(obj)/qconf-cflags)
# makefile (从“include/config/auto.conf”，行 381)
CONFIG_IRQCHIP = y
# makefile (从“scripts/Makefile.compiler”，行 40)
as-instr = $(call try-run, printf "%b\n" "$(1)" | $(CC) -Werror $(CLANG_FLAGS) $(KBUILD_AFLAGS) -Wa$(comma)--fatal-warnings -c -x assembler-with-cpp -o "$$TMP" -,$(2),$(3))
# makefile (从“include/config/auto.conf”，行 198)
CONFIG_MULTIUSER = y
# makefile (从“scripts/kconfig/.menu.o.cmd”，行 3)
source_scripts/kconfig/menu.o := scripts/kconfig/menu.c
# makefile (从“include/config/auto.conf”，行 74)
CONFIG_INPUT = y
# makefile (从“scripts/kconfig/.parser.tab.o.cmd”，行 3)
source_scripts/kconfig/parser.tab.o := scripts/kconfig/parser.tab.c
# makefile (从“include/config/auto.conf”，行 474)
CONFIG_RD_XZ = y
# makefile (从“include/config/auto.conf”，行 393)
CONFIG_STM32_FIREWALL = y
# makefile (从“include/config/auto.conf”，行 108)
CONFIG_GENERIC_BUG = y
# 环境
KBUILD_EXTRA_WARN = 
# 环境
LOGNAME = embedsky
# 环境
TERM = xterm-256color
# makefile (从“include/config/auto.conf”，行 498)
CONFIG_RCU_NEED_SEGCBLIST = y
# makefile (从“include/config/auto.conf”，行 85)
CONFIG_IIO_CONSUMERS_PER_TRIGGER = 2
# makefile (从“include/config/auto.conf”，行 371)
CONFIG_CC_IMPLICIT_FALLTHROUGH = -Wimplicit-fallthrough=5
# makefile (从“include/config/auto.conf”，行 12)
CONFIG_GCC_ASM_GOTO_OUTPUT_BROKEN = y
# makefile (从“scripts/Makefile.host”，行 73)
host-csingle := 
# makefile (从“include/config/auto.conf”，行 268)
CONFIG_SLUB = y
# makefile (从“scripts/Makefile.build”，行 17)
lib-m := 
# makefile (从“include/config/auto.conf”，行 346)
CONFIG_COMMON_CLK_STM32F = y
# 环境
RUSTDOC = rustdoc
# makefile (从“include/config/auto.conf”，行 419)
CONFIG_ARM_SINGLE_ARMV7M = y
# makefile (从“scripts/kconfig/Makefile”，行 195)
HOSTCFLAGS_lxdialog/textbox.o = $(call read-file, scripts/kconfig/mconf-cflags)
# makefile (从“include/config/auto.conf”，行 216)
CONFIG_PROC_MEM_ALWAYS_FORCE = y
# makefile (从“include/config/auto.conf”，行 213)
CONFIG_HAVE_KERNEL_XZ = y
# makefile (从“scripts/Makefile.compiler”，行 22)
try-run = $(shell set -e; TMP=$(TMPOUT)/tmp; trap "rm -rf $(TMPOUT)" EXIT; mkdir -p $(TMPOUT); if ($(1)) >/dev/null 2>&1; then echo "$(2)"; else echo "$(3)"; fi)
# 环境
KBUILD_VERBOSE = 
# 命令行
obj = scripts/kconfig
# makefile (从“include/config/auto.conf”，行 26)
CONFIG_ARM_THUMB = y
# makefile (从“scripts/Makefile.lib”，行 84)
obj-m := 
# makefile (从“scripts/kconfig/.confdata.o.cmd”，行 1)
savedcmd_scripts/kconfig/confdata.o := gcc -Wp,-MMD,scripts/kconfig/.confdata.o.d -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer -std=gnu11   -I ./scripts/include   -c -o scripts/kconfig/confdata.o scripts/kconfig/confdata.c
# makefile (从“include/config/auto.conf”，行 364)
CONFIG_SYS_SUPPORTS_APM_EMULATION = y
# makefile (从“scripts/Makefile.lib”，行 111)
modname_flags = -DKBUILD_MODNAME=$(call name-fix,$(modname)) -D__KBUILD_MODNAME=kmod_$(call name-fix-token,$(modname))
# makefile (从“scripts/Makefile.host”，行 128)
quiet_cmd_host-cobjs = HOSTCC  $@
# makefile (从“scripts/Makefile.build”，行 493)
obj-dirs := . scripts/kconfig/lxdialog
# 环境
LC_TIME = en_US.UTF-8
# 环境
VSCODE_GIT_IPC_HANDLE = /run/user/1000/vscode-git-7ea07af0fe.sock
# makefile (从“include/config/auto.conf”，行 266)
CONFIG_IOSCHED_BFQ = y
# makefile (从“include/config/auto.conf”，行 166)
CONFIG_COMMON_CLK = y
# makefile (从“include/config/auto.conf”，行 164)
CONFIG_SET_MEM_PARAM = y
# 环境
COLORTERM = truecolor
# makefile (从“scripts/Kbuild.include”，行 72)
read-file = $(subst $(newline),$(space),$(file < $1))
# makefile (从“scripts/Makefile.build”，行 112)
gendwarfksyms = $(objtree)/scripts/gendwarfksyms/gendwarfksyms $(if $(KBUILD_SYMTYPES), --symtypes $(@:.o=.symtypes)) $(if $(KBUILD_GENDWARFKSYMS_STABLE), --stable)
# makefile (从“include/config/auto.conf”，行 483)
CONFIG_DEFAULT_HOSTNAME = (none)
# makefile (从“include/config/auto.conf”，行 80)
CONFIG_MFD_SYSCON = y
# makefile (从“include/config/auto.conf”，行 192)
CONFIG_EDAC_ATOMIC_SCRUB = y
# makefile (从“include/config/auto.conf”，行 279)
CONFIG_HAVE_STACKPROTECTOR = y
# makefile (从“include/config/auto.conf”，行 20)
CONFIG_IIO_TRIGGER = y
# makefile (从“scripts/Makefile.build”，行 23)
EXTRA_AFLAGS := 
# makefile (从“include/config/auto.conf”，行 368)
CONFIG_DRAM_BASE = 0x90000000
# makefile (从“scripts/Makefile.host”，行 93)
hostrust_flags = --out-dir $(dir $@) --emit=dep-info=$(depfile) -Clinker-flavor=gcc -Clinker=$(HOSTCC) -Clink-args='$(call escsq,$(KBUILD_HOSTLDFLAGS))' $(KBUILD_HOSTRUSTFLAGS) $(HOST_EXTRARUSTFLAGS) $(HOSTRUSTFLAGS_$(target-stem))
# makefile (从“scripts/Kbuild.include”，行 194)
if-changed-cond = $(newer-prereqs)$(cmd-check)$(check-FORCE)
# makefile (从“include/config/auto.conf”，行 436)
CONFIG_FLATMEM = y
# makefile (从“include/config/auto.conf”，行 258)
CONFIG_CRYPTO_LIB_BLAKE2S_GENERIC = y
# makefile (从“include/config/auto.conf”，行 249)
CONFIG_MFD_CORE = y
# makefile (从“scripts/Makefile.lib”，行 424)
cmd_lzma_with_size = { cat $(real-prereqs) | $(LZMA) -9; $(size_append); } > $@
# makefile (从“include/config/auto.conf”，行 385)
CONFIG_PANIC_TIMEOUT = 0
# makefile (从“scripts/Makefile.build”，行 324)
cmd_cpp_s_S = $(CPP) $(a_flags) -o $@ $<
# makefile (从“scripts/Makefile.build”，行 402)
cmd_ld_multi_m = $(LD) $(ld_flags) -r -o $@ @$< $(cmd_objtool)
# makefile (从“include/config/auto.conf”，行 376)
CONFIG_MSDOS_PARTITION = y
# makefile (从“scripts/Makefile.host”，行 146)
cmd_host-cxxobjs = $(HOSTCXX) $(hostcxx_flags) -c -o $@ $<
# makefile (从“scripts/kconfig/.util.o.cmd”，行 3)
source_scripts/kconfig/util.o := scripts/kconfig/util.c
# makefile (从“include/config/auto.conf”，行 274)
CONFIG_PHYS_OFFSET = 0x90000000
# makefile (从“scripts/Makefile.lib”，行 469)
FIT_COMPRESSION = gzip
# makefile (从“include/config/auto.conf”，行 109)
CONFIG_HAVE_PERF_USER_STACK_DUMP = y
# makefile (从“scripts/Makefile.lib”，行 89)
subdir-ym := 
# makefile (从“include/config/auto.conf”，行 394)
CONFIG_IIO_TRIGGERED_BUFFER = y
# makefile (从“scripts/Makefile.build”，行 286)
cmd_rustc_rs_rs_S = $(CPP) $(c_flags) -xc -C -P $< | sed '1,/^\/\/ Cut here.$$/d' >$@
# makefile (从“scripts/kconfig/.confdata.o.cmd”，行 5)
deps_scripts/kconfig/confdata.o :=   scripts/include/xalloc.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/kconfig/lkc.h  scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h 
# 环境
XDG_SESSION_ID = 3
# makefile (从“include/config/auto.conf”，行 401)
CONFIG_BLK_DEV_INITRD = y
# makefile (从“scripts/Makefile.build”，行 21)
subdir-y := 
# makefile (从“scripts/kconfig/.menu.o.cmd”，行 1)
savedcmd_scripts/kconfig/menu.o := gcc -Wp,-MMD,scripts/kconfig/.menu.o.d -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer -std=gnu11   -I ./scripts/include   -c -o scripts/kconfig/menu.o scripts/kconfig/menu.c
# makefile (从“scripts/kconfig/.parser.tab.o.cmd”，行 1)
savedcmd_scripts/kconfig/parser.tab.o := gcc -Wp,-MMD,scripts/kconfig/.parser.tab.o.d -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer -std=gnu11   -I ./scripts/include  -I ./scripts/kconfig -c -o scripts/kconfig/parser.tab.o scripts/kconfig/parser.tab.c
# makefile
.DEFAULT_GOAL := scripts/kconfig/
# makefile (从“scripts/Makefile.lib”，行 234)
modkern_rustflags = $(if $(part-of-module), $(KBUILD_RUSTFLAGS_MODULE) $(RUSTFLAGS_MODULE), $(KBUILD_RUSTFLAGS_KERNEL) $(RUSTFLAGS_KERNEL))
# makefile (从“include/config/auto.conf”，行 342)
CONFIG_DMA_DECLARE_COHERENT = y
# makefile (从“include/config/auto.conf”，行 262)
CONFIG_XZ_DEC_POWERPC = y
# makefile (从“include/config/auto.conf”，行 421)
CONFIG_MOUSE_PS2_SMBUS = y
# makefile (从“scripts/Makefile.lib”，行 94)
modname-multi = $(sort $(foreach m,$(multi-obj-ym), $(if $(filter $*.o, $(call suffix-search, $m, .o, -objs -y -m)),$(m:.o=))))
# makefile (从“include/config/auto.conf”，行 446)
CONFIG_MFD_STM32_TIMERS = y
# makefile (从“include/config/auto.conf”，行 424)
CONFIG_LD_VERSION = 23601
# makefile (从“include/config/auto.conf”，行 513)
CONFIG_CONSOLE_LOGLEVEL_QUIET = 4
# makefile (从“include/config/auto.conf”，行 139)
CONFIG_SERIAL_STM32 = y
# makefile (从“include/config/auto.conf”，行 281)
CONFIG_PREEMPT_RCU = y
# makefile (从“scripts/Makefile.lib”，行 227)
quiet_modtag = $(if $(part-of-module),[M],   )
# makefile (从“scripts/Makefile.build”，行 387)
cmd_gen_order = { $(foreach m, $(real-prereqs), $(if $(filter %/$(notdir $@), $m), cat $m, echo $m);) :; } > $@
# 自动
%D = $(patsubst %/,%,$(dir $%))
# makefile (从“include/config/auto.conf”，行 217)
CONFIG_PINCONF = y
# makefile (从“include/config/auto.conf”，行 455)
CONFIG_HAS_IOPORT = y
# makefile (从“include/config/auto.conf”，行 76)
CONFIG_SLAB_MERGE_DEFAULT = y
# makefile (从“include/config/auto.conf”，行 165)
CONFIG_GENERIC_CPU_AUTOPROBE = y
# makefile (从“include/config/auto.conf”，行 265)
CONFIG_MOUSE_PS2_SYNAPTICS = y
# makefile (从“scripts/Makefile.lib”，行 530)
quiet_cmd_zstd22_with_size = ZSTD22  $@
# makefile (从“scripts/Makefile.lib”，行 466)
MAKE_FIT := ./scripts/make_fit.py
# 环境
READELF = arm-none-eabi-readelf
# makefile (从“scripts/Makefile.lib”，行 97)
__modname = $(or $(modname-multi),$(basetarget))
# makefile (从“scripts/Makefile.host”，行 136)
cmd_host-cxxmulti = $(HOSTCXX) $(KBUILD_HOSTLDFLAGS) -o $@ $(foreach o,objs cxxobjs, $(addprefix $(obj)/, $($(target-stem)-$(o)))) $(KBUILD_HOSTLDLIBS) $(HOSTLDLIBS_$(target-stem))
# makefile (从“include/config/auto.conf”，行 250)
CONFIG_TIMERFD = y
# makefile (从“include/config/auto.conf”，行 158)
CONFIG_MMC_BLOCK = y
# 环境
KBUILD_HOSTCFLAGS = -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer -std=gnu11   -I ./scripts/include
# makefile (从“include/config/auto.conf”，行 285)
CONFIG_RTC_NVMEM = y
# makefile (从“include/config/auto.conf”，行 314)
CONFIG_ARM_L1_CACHE_SHIFT = 5
# makefile (从“scripts/kconfig/Makefile”，行 213)
cmd_moc = $(call read-file, $(obj)/qconf-bin)/moc $< -o $@
# makefile (从“scripts/Makefile.build”，行 478)
targets := scripts/kconfig/qconf-moc.cc scripts/kconfig/conf scripts/kconfig/gconf scripts/kconfig/mconf scripts/kconfig/nconf scripts/kconfig/conf.o scripts/kconfig/confdata.o scripts/kconfig/expr.o scripts/kconfig/gconf.o scripts/kconfig/images.o scripts/kconfig/lexer.lex.o scripts/kconfig/lxdialog/checklist.o scripts/kconfig/lxdialog/inputbox.o scripts/kconfig/lxdialog/menubox.o scripts/kconfig/lxdialog/textbox.o scripts/kconfig/lxdialog/util.o scripts/kconfig/lxdialog/yesno.o scripts/kconfig/mconf.o scripts/kconfig/menu.o scripts/kconfig/mnconf-common.o scripts/kconfig/nconf.gui.o scripts/kconfig/nconf.o scripts/kconfig/parser.tab.o scripts/kconfig/preprocess.o scripts/kconfig/symbol.o scripts/kconfig/util.o scripts/kconfig/qconf scripts/kconfig/qconf-moc.o scripts/kconfig/qconf.o scripts/kconfig/lexer.lex.c scripts/kconfig/parser.tab.c scripts/kconfig/parser.tab.h stm32_defconfig
# makefile (从“scripts/Makefile.lib”，行 345)
cmd_copy = cat $< > $@
# makefile (从“scripts/kconfig/.menu.o.cmd”，行 5)
deps_scripts/kconfig/menu.o := scripts/include/list.h scripts/include/list_types.h scripts/include/xalloc.h scripts/kconfig/lkc.h  scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h 
# makefile (从“include/config/auto.conf”，行 43)
CONFIG_DMA_VIRTUAL_CHANNELS = y
# makefile (从“scripts/kconfig/.parser.tab.o.cmd”，行 5)
deps_scripts/kconfig/parser.tab.o := scripts/include/xalloc.h scripts/kconfig/lkc.h  scripts/kconfig/expr.h scripts/include/list_types.h scripts/kconfig/lkc_proto.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/kconfig/preprocess.h 
# makefile (从“include/config/auto.conf”，行 375)
CONFIG_RD_GZIP = y
# makefile (从“include/config/auto.conf”，行 405)
CONFIG_XIP_KERNEL = y
# 环境
OLDPWD = /home/embedsky/share
# makefile (从“include/config/auto.conf”，行 225)
CONFIG_DEVPORT = y
# 环境
VSCODE_GIT_ASKPASS_EXTRA_ARGS = 
# 环境
NOSTDINC_FLAGS = 
# makefile (从“include/config/auto.conf”，行 271)
CONFIG_HAVE_REGS_AND_STACK_ACCESS_API = y
# makefile (从“include/config/auto.conf”，行 29)
CONFIG_GENERIC_STRNLEN_USER = y
# makefile (从“include/config/auto.conf”，行 231)
CONFIG_DEBUG_KERNEL = y
# makefile (从“include/config/auto.conf”，行 349)
CONFIG_LTO_NONE = y
# 自动
*F = $(notdir $*)
# 环境
LANGUAGE = zh_CN:en
# 环境
CFLAGS_KERNEL = 
# makefile (从“include/config/auto.conf”，行 61)
CONFIG_ARM_HAS_GROUP_RELOCS = y
# makefile (从“scripts/Makefile.build”，行 219)
cmd_cc_lst_c = $(CC) $(c_flags) -g -c -o $*.o $< && $(CONFIG_SHELL) $(srctree)/scripts/makelst $*.o System.map $(OBJDUMP) > $@
# 环境
VSCODE_GIT_ASKPASS_NODE = /home/embedsky/.vscode-server/cli/servers/Stable-e54c774e0add60467559eb0d1e229c6452cf8447/server/node
# makefile (从“scripts/kconfig/Makefile”，行 106)
config-fragments = $(call configfiles,$@)
# makefile (从“scripts/kconfig/Makefile”，行 171)
HOSTCFLAGS_parser.tab.o := -I ./scripts/kconfig
# makefile (从“scripts/Makefile.lib”，行 332)
define rule_as_o_S
	$(call cmd_and_fixdep,as_o_S)
	$(call cmd,gen_objtooldep)
	$(call cmd,gen_symversions_S)
	$(call cmd,warn_shared_object)
endef
# makefile (从“scripts/Makefile.lib”，行 5)
cppflags-y := $(subst ,, )
# makefile (从“include/config/auto.conf”，行 140)
CONFIG_GPIOLIB_IRQCHIP = y
# makefile (从“scripts/kconfig/Makefile”，行 207)
HOSTCXXFLAGS_qconf.o = -std=c++11 -fPIC $(call read-file, $(obj)/qconf-cflags)
# makefile (从“include/config/auto.conf”，行 49)
CONFIG_OF_DYNAMIC = y
# makefile (从“scripts/Kbuild.include”，行 192)
check-FORCE = $(if $(filter FORCE, $^),,$(warning FORCE prerequisite is missing))
# makefile (从“scripts/kconfig/Makefile”，行 104)
configfiles = $(wildcard $(srctree)/kernel/configs/$(1) $(srctree)/arch/$(SRCARCH)/configs/$(1))
# makefile (从“scripts/Makefile.build”，行 116)
genksyms = $(objtree)/scripts/genksyms/genksyms $(if $(KBUILD_SYMTYPES), -T $(@:.o=.symtypes)) $(if $(KBUILD_PRESERVE), -p) $(addprefix -r , $(wildcard $(@:.o=.symref)))
# makefile (从“include/config/auto.conf”，行 255)
CONFIG_HAVE_KERNEL_GZIP = y
# 环境
KBUILD_HOSTRUSTFLAGS = --edition=2021 -Zbinary_dep_depinfo=y -Astable_features -Dnon_ascii_idents -Dunsafe_op_in_unsafe_fn -Wmissing_docs -Wrust_2018_idioms -Wunreachable_pub -Wclippy::all -Wclippy::ignored_unit_patterns -Wclippy::mut_mut -Wclippy::needless_bitwise_bool -Wclippy::needless_continue -Aclippy::needless_lifetimes -Wclippy::no_mangle_with_rust_abi -Wclippy::undocumented_unsafe_blocks -Wclippy::unnecessary_safety_comment -Wclippy::unnecessary_safety_doc -Wrustdoc::missing_crate_level_docs -Wrustdoc::unescaped_backticks -O -Cstrip=debuginfo -Zallow-features= 
# makefile (从“scripts/kconfig/Makefile”，行 195)
HOSTCFLAGS_lxdialog/yesno.o = $(call read-file, scripts/kconfig/mconf-cflags)
# makefile (从“scripts/Makefile.lib”，行 450)
UIMAGE_LOADADDR = arch_must_set_this
# makefile (从“include/config/auto.conf”，行 124)
CONFIG_HAVE_FUNCTION_GRAPH_TRACER = y
# 自动
*D = $(patsubst %/,%,$(dir $*))
# 环境
TERM_PROGRAM_VERSION = 1.97.2
# makefile (从“include/config/auto.conf”，行 510)
CONFIG_GENERIC_ATOMIC64 = y
# makefile (从“scripts/Kbuild.include”，行 11)
space_escape := _-_SPACE_-_
# makefile (从“include/config/auto.conf”，行 395)
CONFIG_PROC_SYSCTL = y
# makefile (从“include/config/auto.conf”，行 98)
CONFIG_PINCTRL_STM32H743 = y
# makefile (从“include/config/auto.conf”，行 270)
CONFIG_MOUSE_PS2_ALPS = y
# 自动
+D = $(patsubst %/,%,$(dir $+))
# makefile (从“scripts/Makefile.compiler”，行 51)
cc-option = $(call __cc-option, $(CC), $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS),$(1),$(2))
# makefile (从“include/config/auto.conf”，行 284)
CONFIG_HAVE_VIRT_CPU_ACCOUNTING_GEN = y
# makefile (从“scripts/Makefile.build”，行 61)
targets-for-builtin := 
# makefile (从“scripts/Kbuild.include”，行 29)
test-gt = $(shell test $(strip $1)0 -gt $(strip $2)0 && echo y)
# makefile (从“include/config/auto.conf”，行 253)
CONFIG_GENERIC_IRQ_MULTI_HANDLER = y
# 环境
ARCH = arm
# makefile (从“include/config/auto.conf”，行 64)
CONFIG_RCU_TRACE = y
# makefile (从“include/config/auto.conf”，行 14)
CONFIG_ARCH_USE_BUILTIN_BSWAP = y
# makefile (从“include/config/auto.conf”，行 457)
CONFIG_CLANG_VERSION = 0
# 自动
+F = $(notdir $+)
# makefile (从“include/config/auto.conf”，行 207)
CONFIG_SYMBOLIC_ERRNAME = y
# makefile (从“include/config/auto.conf”，行 48)
CONFIG_ARCH_SUPPORTS_CRASH_DUMP = y
# makefile (从“include/config/auto.conf”，行 248)
CONFIG_PREEMPTION = y
# makefile (从“include/config/auto.conf”，行 486)
CONFIG_PINCTRL_STM32F746 = y
# makefile (从“include/config/auto.conf”，行 105)
CONFIG_HAVE_FUNCTION_ERROR_INJECTION = y
# makefile (从“include/config/auto.conf”，行 353)
CONFIG_HAVE_ARCH_STACKLEAK = y
# makefile (从“include/config/auto.conf”，行 97)
CONFIG_PWRSEQ_SIMPLE = y
# makefile (从“include/config/auto.conf”，行 428)
CONFIG_OLD_SIGACTION = y
# makefile (从“include/config/auto.conf”，行 491)
CONFIG_ARCH_HAS_SETUP_DMA_OPS = y
# makefile (从“include/config/auto.conf”，行 443)
CONFIG_SERIAL_NONSTANDARD = y
# makefile (从“include/config/auto.conf”，行 384)
CONFIG_EXPORTFS = y
# makefile (从“include/config/auto.conf”，行 372)
CONFIG_RATIONAL = y
# 环境
STRIP = arm-none-eabi-strip
# makefile (从“include/config/auto.conf”，行 444)
CONFIG_CPU_ABRT_NOMMU = y
# makefile (从“include/config/auto.conf”，行 44)
CONFIG_REGULATOR_FIXED_VOLTAGE = y
# makefile (从“scripts/Makefile.lib”，行 436)
cmd_lz4_with_size = { cat $(real-prereqs) | $(LZ4) -l -9 - -; $(size_append); } > $@
# 环境
KERNELVERSION = 6.14.0-rc4
# makefile (从“scripts/Makefile.lib”，行 415)
cmd_bzip2_with_size = { cat $(real-prereqs) | $(KBZIP2) -9; $(size_append); } > $@
# makefile (从“include/config/auto.conf”，行 110)
CONFIG_COMMON_CLK_STM32H7 = y
# 环境
CROSS_COMPILE = arm-none-eabi-
# 环境
LC_MEASUREMENT = en_US.UTF-8
# makefile (从“include/config/auto.conf”，行 451)
CONFIG_GENERIC_ALLOCATOR = y
# makefile (从“include/config/auto.conf”，行 390)
CONFIG_BUFFER_HEAD = y
# makefile (从“scripts/Kbuild.include”，行 57)
escsq = $(subst $(squote),'\$(squote)',$1)
# makefile (从“scripts/Kbuild.include”，行 53)
real-prereqs = $(filter-out $(PHONY), $^)
# makefile (从“scripts/Makefile.build”，行 99)
cmd_cc_s_c = $(CC) $(filter-out $(DEBUG_CFLAGS) $(CC_FLAGS_LTO), $(c_flags)) -fverbose-asm -S -o $@ $<
# 环境
GIT_ASKPASS = /home/embedsky/.vscode-server/cli/servers/Stable-e54c774e0add60467559eb0d1e229c6452cf8447/server/extensions/git/dist/askpass.sh
# 默认
MAKEFILES := 
# makefile (从“include/config/auto.conf”，行 329)
CONFIG_AS_VERSION = 23601
# 环境
SRCARCH = arm
# makefile (从“scripts/Makefile.lib”，行 86)
real-obj-y := 
# makefile (从“include/config/auto.conf”，行 194)
CONFIG_WATCHDOG_OPEN_TIMEOUT = 0
# makefile (从“scripts/Makefile.host”，行 111)
cmd_host-csingle = $(HOSTCC) $(hostc_flags) $(KBUILD_HOSTLDFLAGS) -o $@ $< $(KBUILD_HOSTLDLIBS) $(HOSTLDLIBS_$(target-stem))
# 环境
CONFIG_SHELL = sh
# 环境
CFLAGS_MODULE = 
# makefile (从“include/config/auto.conf”，行 412)
CONFIG_NVMEM = y
# makefile (从“include/config/auto.conf”，行 397)
CONFIG_RSEQ = y
# makefile (从“include/config/auto.conf”，行 168)
CONFIG_DMA_SHARED_BUFFER = y
# makefile (从“scripts/Makefile.lib”，行 239)
modkern_aflags = $(if $(part-of-module), $(KBUILD_AFLAGS_MODULE) $(AFLAGS_MODULE), $(KBUILD_AFLAGS_KERNEL) $(AFLAGS_KERNEL) $(modfile_flags))
# makefile (从“include/config/auto.conf”，行 77)
CONFIG_OF_EARLY_FLATTREE = y
# makefile (从“scripts/Makefile.lib”，行 376)
quiet_cmd_objcopy = OBJCOPY $@
# makefile (从“scripts/Makefile.lib”，行 455)
cmd_uimage = $(BASH) $(MKIMAGE) -A $(UIMAGE_ARCH) -O linux -C $(UIMAGE_COMPRESSION) $(UIMAGE_OPTS-y) -T $(UIMAGE_TYPE) -a $(UIMAGE_LOADADDR) -e $(UIMAGE_ENTRYADDR) -n '$(UIMAGE_NAME)' -d $< $@
# makefile (从“include/config/auto.conf”，行 341)
CONFIG_INITRAMFS_SOURCE = 
# makefile (从“include/config/auto.conf”，行 197)
CONFIG_PINMUX = y
# makefile (从“include/config/auto.conf”，行 150)
CONFIG_ARCH_HAS_KCOV = y
# 环境
KBUILD_CPPFLAGS = -D__KERNEL__ -mlittle-endian  
# makefile (从“include/config/auto.conf”，行 104)
CONFIG_MACH_STM32F429 = y
# makefile (从“scripts/Makefile.lib”，行 429)
quiet_cmd_lzo_with_size = LZO     $@
# makefile (从“include/config/auto.conf”，行 102)
CONFIG_HAVE_CLK = y
# makefile (从“include/config/auto.conf”，行 460)
CONFIG_MAGIC_SYSRQ = y
# 环境
PAHOLE = pahole
# makefile (从“scripts/Makefile.lib”，行 225)
part-of-builtin = $(if $(filter $(basename $@).o, $(real-obj-y) $(lib-y)),y)
# makefile (从“include/config/auto.conf”，行 32)
CONFIG_REGMAP = y
# 环境
cross_compiling = 1
# makefile (从“include/config/auto.conf”，行 445)
CONFIG_EDAC_SUPPORT = y
# makefile (从“include/config/auto.conf”，行 130)
CONFIG_XZ_DEC_BCJ = y
# 环境
AFLAGS_MODULE = 
# makefile (从“include/config/auto.conf”，行 79)
CONFIG_HAVE_GCC_PLUGINS = y
# 环境
TEXT_OFFSET = 0x00008000
# makefile (从“include/config/auto.conf”，行 293)
CONFIG_OF_RESERVED_MEM = y
# makefile (从“include/config/auto.conf”，行 327)
CONFIG_RD_LZMA = y
# makefile (从“include/config/auto.conf”，行 519)
CONFIG_BROKEN_ON_SMP = y
# makefile (从“scripts/Makefile.lib”，行 430)
cmd_lzo_with_size = { cat $(real-prereqs) | $(KLZOP) -9; $(size_append); } > $@
# makefile (从“include/config/auto.conf”，行 399)
CONFIG_NEW_LEDS = y
# makefile (从“scripts/Makefile.lib”，行 256)
ld_flags = $(KBUILD_LDFLAGS) $(ldflags-y) $(LDFLAGS_$(@F))
# makefile (从“include/config/auto.conf”，行 223)
CONFIG_CLONE_BACKWARDS = y
# makefile (从“scripts/kconfig/.conf.o.cmd”，行 3)
source_scripts/kconfig/conf.o := scripts/kconfig/conf.c
# makefile (从“include/config/auto.conf”，行 319)
CONFIG_I2C_SLAVE = y
# makefile (从“include/config/auto.conf”，行 141)
CONFIG_GENERIC_CPU_DEVICES = y
# 环境
KBUILD_USERLDFLAGS = 
# makefile (从“include/config/auto.conf”，行 400)
CONFIG_CC_HAS_ASM_INLINE = y
# makefile (从“include/config/auto.conf”，行 241)
CONFIG_NVMEM_LAYOUTS = y
# makefile (从“scripts/kconfig/Makefile”，行 41)
config-prog := conf
# makefile (从“include/config/auto.conf”，行 154)
CONFIG_INIT_ENV_ARG_LIMIT = 32
# makefile (从“scripts/kconfig/Makefile”，行 183)
HOSTCFLAGS_nconf.gui.o = $(call read-file, $(obj)/nconf-cflags)
# makefile (从“include/config/auto.conf”，行 388)
CONFIG_MMU_LAZY_TLB_REFCOUNT = y
# makefile (从“scripts/Makefile.build”，行 418)
intermediate_targets = $(foreach sfx, $(2), $(patsubst %$(strip $(1)),%$(sfx), $(filter %$(strip $(1)), $(targets))))
# 默认
SUFFIXES := 
# makefile (从“include/config/auto.conf”，行 466)
CONFIG_DMA_OPS_HELPERS = y
# makefile (从“include/config/auto.conf”，行 152)
CONFIG_RESET_SIMPLE = y
# makefile (从“include/config/auto.conf”，行 38)
CONFIG_HAVE_KERNEL_LZMA = y
# 默认
MAKE_COMMAND := make
# makefile (从“include/config/auto.conf”，行 379)
CONFIG_DEFAULT_SECURITY_DAC = y
# makefile (从“include/config/auto.conf”，行 315)
CONFIG_ARCH_HAS_SYNC_DMA_FOR_CPU = y
# makefile (从“scripts/Kbuild.include”，行 214)
if_changed_rule = $(if $(if-changed-cond),$(rule_$(1)),@:)
# makefile (从“scripts/Kbuild.include”，行 199)
cmd_and_savecmd = $(cmd); printf '%s\n' 'savedcmd_$@ := $(make-cmd)' > $(dot-target).cmd
# makefile (从“include/config/auto.conf”，行 289)
CONFIG_ARM_DMA_MEM_BUFFERABLE = y
# makefile (从“include/config/auto.conf”，行 129)
CONFIG_NEED_PER_CPU_KM = y
# makefile (从“include/config/auto.conf”，行 214)
CONFIG_CPU_MITIGATIONS = y
# 环境
KBUILD_AFLAGS_MODULE = -DMODULE
# makefile (从“include/config/auto.conf”，行 523)
CONFIG_ARCH_SUPPORTS_ATOMIC_RMW = y
# makefile (从“include/config/auto.conf”，行 256)
CONFIG_LDISC_AUTOLOAD = y
# makefile (从“include/config/auto.conf”，行 328)
CONFIG_ARCH_SUPPORTS_UPROBES = y
# makefile (从“include/config/auto.conf”，行 243)
CONFIG_IIO = y
# makefile (从“include/config/auto.conf”，行 461)
CONFIG_GENERIC_CALIBRATE_DELAY = y
# makefile (从“include/config/auto.conf”，行 25)
CONFIG_GENERIC_IRQ_SHOW = y
# 环境
KBUILD_EXTMOD = 
# makefile (从“scripts/Makefile.build”，行 71)
targets-for-modules := $(subst ,,   )
# 环境
LC_ADDRESS = en_US.UTF-8
# makefile (从“include/config/auto.conf”，行 374)
CONFIG_ARCH_MIGHT_HAVE_PC_PARPORT = y
# makefile (从“include/config/auto.conf”，行 462)
CONFIG_MAGIC_SYSRQ_SERIAL_SEQUENCE = 
# makefile (从“include/config/auto.conf”，行 290)
CONFIG_ARM_UNWIND = y
# makefile (从“include/config/auto.conf”，行 336)
CONFIG_LINEAR_RANGES = y
# makefile (从“include/config/auto.conf”，行 420)
CONFIG_GENERIC_IRQ_PROBE = y
# makefile (从“scripts/Kbuild.include”，行 169)
cmd-check = $(filter-out $(subst $(space),$(space_escape),$(strip $(savedcmd_$@))), $(subst $(space),$(space_escape),$(strip $(cmd_$1))))
# makefile (从“include/config/auto.conf”，行 246)
CONFIG_RUNTIME_TESTING_MENU = y
# makefile (从“scripts/Makefile.build”，行 24)
EXTRA_CFLAGS := 
# makefile (从“include/config/auto.conf”，行 438)
CONFIG_SERIO_LIBPS2 = y
# makefile (从“scripts/Kbuild.include”，行 65)
kbuild-file = $(or $(wildcard $(src)/Kbuild),$(src)/Makefile)
# makefile (从“scripts/Makefile.compiler”，行 34)
as-option = $(call try-run, $(CC) -Werror $(KBUILD_CPPFLAGS) $(KBUILD_AFLAGS) $(1) -c -x assembler-with-cpp /dev/null -o "$$TMP",$(1),$(2))
# 默认
MAKE_HOST := x86_64-pc-linux-gnu
# makefile (从“include/config/auto.conf”，行 7)
CONFIG_GENERIC_IRQ_CHIP = y
# makefile (从“include/config/auto.conf”，行 155)
CONFIG_STANDALONE = y
# makefile (从“include/config/auto.conf”，行 427)
CONFIG_IRQSTACKS = y
# makefile (从“scripts/Makefile.host”，行 76)
host-cxxmulti := scripts/kconfig/qconf
# makefile (从“include/config/auto.conf”，行 473)
CONFIG_SERIO_SERPORT = y
# makefile (从“include/config/auto.conf”，行 188)
CONFIG_XZ_DEC = y
# makefile (从“include/config/auto.conf”，行 148)
CONFIG_MESSAGE_LOGLEVEL_DEFAULT = 4
# makefile (从“include/config/auto.conf”，行 306)
CONFIG_HAVE_RSEQ = y
# 环境
LZ4 = lz4
# makefile (从“scripts/Kbuild.include”，行 119)
clean := -f ./scripts/Makefile.clean obj
# makefile (从“include/config/auto.conf”，行 173)
CONFIG_BITREVERSE = y
# makefile (从“scripts/Makefile.build”，行 255)
cmd_rustc_o_rs = $(rust_common_cmd) --emit=obj=$@ $< $(cmd_objtool)
# makefile (从“scripts/Makefile.build”，行 212)
cmd_mod = printf '%s\n' $(call real-search, $*.o, .o, -objs -y -m) | $(AWK) '!x[$$0]++ { print("$(obj)/"$$0) }' > $@
# makefile (从“include/config/auto.conf”，行 89)
CONFIG_PAHOLE_VERSION = 0
# makefile (从“include/config/auto.conf”，行 174)
CONFIG_ARCH_32BIT_OFF_T = y
# makefile (从“include/config/auto.conf”，行 439)
CONFIG_ARCH_HAS_UBSAN = y
# makefile (从“scripts/Kbuild.include”，行 7)
quote := "
# makefile (从“scripts/Makefile.build”，行 105)
cmd_cpp_i_c = $(CPP) $(c_flags) -o $@ $<
# makefile (从“scripts/Kbuild.include”，行 82)
kecho := echo
# makefile (从“include/config/auto.conf”，行 103)
CONFIG_ARCH_HAS_CURRENT_STACK_POINTER = y
# makefile (从“scripts/Makefile.lib”，行 524)
quiet_cmd_zstd = ZSTD    $@
# makefile (从“include/config/auto.conf”，行 506)
CONFIG_DEBUG_INFO_COMPRESSED_NONE = y
# makefile (从“scripts/Makefile.compiler”，行 12)
cc-cross-prefix = $(firstword $(foreach c, $(1), $(if $(shell command -v -- $(c)gcc 2>/dev/null), $(c))))
# makefile (从“scripts/Makefile.build”，行 273)
quiet_cmd_rustc_s_rs = $(RUSTC_OR_CLIPPY_QUIET) $(quiet_modtag) $@
# 环境
quiet = quiet_
# makefile (从“include/config/auto.conf”，行 66)
CONFIG_LEDS_GPIO = y
# makefile (从“include/config/auto.conf”，行 91)
CONFIG_TRACE_CLOCK = y
# 环境
PAPERSIZE = letter
# 环境
BINDGEN = bindgen
# makefile (从“scripts/Makefile.build”，行 229)
rust_allowed_features := asm_const,asm_goto,arbitrary_self_types,lint_reasons
# makefile (从“include/config/auto.conf”，行 251)
CONFIG_RTC_HCTOSYS_DEVICE = rtc0
# makefile (从“include/config/auto.conf”，行 190)
CONFIG_GENERIC_PINCONF = y
# 默认
.SHELLFLAGS := -c
# makefile (从“scripts/Makefile.lib”，行 531)
cmd_zstd22_with_size = { cat $(real-prereqs) | $(ZSTD) -22 --ultra; $(size_append); } > $@
# 环境
KBUILD_CLIPPY = 
# makefile (从“scripts/Makefile.build”，行 265)
quiet_cmd_rustc_rsi_rs = $(RUSTC_OR_CLIPPY_QUIET) $(quiet_modtag) $@
# makefile (从“include/config/auto.conf”，行 433)
CONFIG_CONTEXT_TRACKING_IDLE = y
# makefile (从“scripts/Makefile.lib”，行 408)
quiet_cmd_file_size = GEN     $@
# makefile (从“include/config/auto.conf”，行 529)
CONFIG_I2C_SMBUS = y
# makefile (从“scripts/Makefile.lib”，行 85)
lib-y := 
# 环境
RUSTC_VERSION_TEXT = 
# makefile (从“include/config/auto.conf”，行 489)
CONFIG_DRAM_SIZE = 0x00800000
# makefile (从“include/config/auto.conf”，行 396)
CONFIG_NVMEM_SYSFS = y
# makefile (从“scripts/kconfig/.lexer.lex.o.cmd”，行 3)
source_scripts/kconfig/lexer.lex.o := scripts/kconfig/lexer.lex.c
# 环境
RUSTC_OR_CLIPPY_QUIET = RUSTC
# makefile (从“scripts/kconfig/.symbol.o.cmd”，行 3)
source_scripts/kconfig/symbol.o := scripts/kconfig/symbol.c
# makefile (从“scripts/Makefile.lib”，行 447)
UIMAGE_COMPRESSION = $(or $(2),none)
# makefile (从“include/config/auto.conf”，行 477)
CONFIG_HAVE_ARCH_SECCOMP_FILTER = y
# makefile (从“include/config/auto.conf”，行 31)
CONFIG_PGTABLE_LEVELS = 2
# 环境
PYTHON3 = python3
# 环境
OBJCOPY = arm-none-eabi-objcopy
# makefile (从“scripts/Makefile.lib”，行 45)
obj-y := 
# makefile (从“scripts/kconfig/Makefile”，行 222)
gconf-objs := gconf.o images.o confdata.o expr.o lexer.lex.o menu.o parser.tab.o preprocess.o symbol.o util.o
# makefile (从“scripts/kconfig/Makefile”，行 190)
lxdialog := lxdialog/checklist.o lxdialog/inputbox.o lxdialog/menubox.o lxdialog/textbox.o lxdialog/util.o lxdialog/yesno.o
# 环境
RUSTFMT = rustfmt
# makefile (从“include/config/auto.conf”，行 65)
CONFIG_HID_SUPPORT = y
# makefile (从“scripts/Makefile.build”，行 34)
subdir-ccflags-y := 
# makefile (从“include/config/auto.conf”，行 408)
CONFIG_GCC_VERSION = 100301
# 自动
@D = $(patsubst %/,%,$(dir $@))
# makefile (从“include/config/auto.conf”，行 9)
CONFIG_PAGE_SHIFT = 12
# makefile (从“include/config/auto.conf”，行 487)
CONFIG_CPU_V7M = y
# makefile (从“scripts/kconfig/.conf.o.cmd”，行 5)
deps_scripts/kconfig/conf.o := scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/kconfig/lkc.h  scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h 
# makefile (从“include/config/auto.conf”，行 27)
CONFIG_RTC_DRV_STM32 = y
# makefile (从“include/config/auto.conf”，行 463)
CONFIG_CRC7 = y
# makefile
SHELL = /bin/sh
# 环境
AWK = awk
# makefile (从“include/config/auto.conf”，行 458)
CONFIG_ARCH_HAS_ELF_RANDOMIZE = y
# makefile (从“scripts/Makefile.lib”，行 499)
cmd_xzkern = cat $(real-prereqs) | sh $(srctree)/scripts/xz_wrap.sh > $@
# makefile (从“scripts/Makefile.build”，行 274)
cmd_rustc_s_rs = $(rust_common_cmd) --emit=asm=$@ $<
# makefile (从“include/config/auto.conf”，行 81)
CONFIG_GPIOLIB_FASTPATH_LIMIT = 512
# makefile (从“include/config/auto.conf”，行 227)
CONFIG_TICK_CPU_ACCOUNTING = y
# makefile (从“scripts/Makefile.build”，行 473)
PHONY := scripts/kconfig/ config build_config menuconfig build_menuconfig nconfig build_nconfig gconfig build_gconfig xconfig build_xconfig localmodconfig localyesconfig oldconfig allnoconfig allyesconfig allmodconfig alldefconfig randconfig listnewconfig olddefconfig syncconfig helpnewconfig yes2modconfig mod2yesconfig mod2noconfig savedefconfig defconfig tinyconfig testconfig  FORCE
# makefile (从“include/config/auto.conf”，行 437)
CONFIG_PCP_BATCH_SCALE_MAX = 5
# makefile (从“scripts/kconfig/Makefile”，行 170)
HOSTCFLAGS_lexer.lex.o := -I ./scripts/kconfig
# makefile (从“include/config/auto.conf”，行 406)
CONFIG_DECOMPRESS_BZIP2 = y
# makefile (从“include/config/auto.conf”，行 280)
CONFIG_ARCH_HAS_NON_OVERLAPPING_ADDRESS_SPACE = y
# makefile (从“include/config/auto.conf”，行 53)
CONFIG_LD_ORPHAN_WARN = y
# makefile (从“scripts/kconfig/Makefile”，行 39)
CONFIG_ := 
# 环境
PERL = perl
# makefile (从“scripts/Makefile.lib”，行 11)
KBUILD_RUSTFLAGS = --edition=2021 -Zbinary_dep_depinfo=y -Astable_features -Dnon_ascii_idents -Dunsafe_op_in_unsafe_fn -Wmissing_docs -Wrust_2018_idioms -Wunreachable_pub -Wclippy::all -Wclippy::ignored_unit_patterns -Wclippy::mut_mut -Wclippy::needless_bitwise_bool -Wclippy::needless_continue -Aclippy::needless_lifetimes -Wclippy::no_mangle_with_rust_abi -Wclippy::undocumented_unsafe_blocks -Wclippy::unnecessary_safety_comment -Wclippy::unnecessary_safety_doc -Wrustdoc::missing_crate_level_docs -Wrustdoc::unescaped_backticks -Cpanic=abort -Cembed-bitcode=n -Clto=n -Cforce-unwind-tables=n -Ccodegen-units=1 -Csymbol-mangling-version=v0 -Crelocation-model=static -Zfunction-sections=n -Wclippy::float_arithmetic $(subdir-rustflags-y)
# 默认
.LOADED := 
# makefile (从“scripts/kconfig/Makefile”，行 192)
mconf-objs := mconf.o lxdialog/checklist.o lxdialog/inputbox.o lxdialog/menubox.o lxdialog/textbox.o lxdialog/util.o lxdialog/yesno.o mnconf-common.o confdata.o expr.o lexer.lex.o menu.o parser.tab.o preprocess.o symbol.o util.o
# makefile (从“scripts/Makefile.lib”，行 329)
quiet_cmd_as_o_S = AS $(quiet_modtag)  $@
# makefile (从“scripts/Makefile.lib”，行 451)
UIMAGE_ENTRYADDR = $(UIMAGE_LOADADDR)
# makefile (从“scripts/kconfig/Makefile”，行 179)
nconf-objs := nconf.o nconf.gui.o mnconf-common.o confdata.o expr.o lexer.lex.o menu.o parser.tab.o preprocess.o symbol.o util.o
# makefile (从“scripts/Makefile.lib”，行 393)
size_append = printf $(shell dec_size=0; for F in $(real-prereqs); do fsize=$$($(CONFIG_SHELL) $(srctree)/scripts/file-size.sh $$F); dec_size=$$(expr $$dec_size + $$fsize); done; printf "%08x\n" $$dec_size | sed 's/\(..\)/\1 /g' | { read ch0 ch1 ch2 ch3; for ch in $$ch3 $$ch2 $$ch1 $$ch0; do printf '%s%03o' '\\' $$((0x$$ch)); done; } )
# makefile (从“include/config/auto.conf”，行 423)
CONFIG_CPU_V7M_NUM_IRQ = 240
# makefile (从“include/config/auto.conf”，行 286)
CONFIG_DMA_GLOBAL_POOL = y
# makefile (从“include/config/auto.conf”，行 131)
CONFIG_MOUSE_PS2_BYD = y
# makefile (从“include/config/auto.conf”，行 472)
CONFIG_KERNFS = y
# makefile (从“scripts/Makefile.lib”，行 379)
quiet_cmd_strip_relocs = RSTRIP  $@
# makefile (从“scripts/Makefile.lib”，行 297)
multi_depend = $(foreach m, $1, $(eval $m: $(addprefix $(obj)/, $(call suffix-search, $(patsubst $(obj)/%,%,$m), $2, $3))))
# makefile (从“scripts/Makefile.lib”，行 364)
quiet_cmd_ld = LD      $@
# makefile (从“include/config/auto.conf”，行 299)
CONFIG_GENERIC_IDLE_POLL_SETUP = y
# makefile (从“include/config/auto.conf”，行 132)
CONFIG_MOUSE_PS2_TRACKPOINT = y
# makefile (从“include/config/auto.conf”，行 317)
CONFIG_DECOMPRESS_XZ = y
# makefile (从“include/config/auto.conf”，行 505)
CONFIG_PROC_FS = y
# makefile (从“include/config/auto.conf”，行 345)
CONFIG_RCU_STALL_COMMON = y
# makefile (从“include/config/auto.conf”，行 46)
CONFIG_CPU_THUMB_CAPABLE = y
# makefile (从“scripts/Makefile.lib”，行 449)
UIMAGE_TYPE = kernel
# makefile (从“include/config/auto.conf”，行 156)
CONFIG_I2C_HID = y
# 环境
CHECKFLAGS = -D__linux__ -Dlinux -D__STDC__ -Dunix -D__unix__ -Wbitwise -Wno-return-void -Wno-unknown-attribute  -D__ARMEL__ -D__arm__
# makefile (从“scripts/Makefile.build”，行 104)
quiet_cmd_cpp_i_c = CPP $(quiet_modtag) $@
# makefile (从“include/config/auto.conf”，行 34)
CONFIG_ARCH_WANT_IPC_PARSE_VERSION = y
# makefile (从“scripts/Makefile.host”，行 77)
host-cxxobjs := scripts/kconfig/qconf-moc.o scripts/kconfig/qconf.o
# makefile (从“include/config/auto.conf”，行 116)
CONFIG_STACKTRACE_SUPPORT = y
# makefile (从“scripts/Makefile.compiler”，行 84)
rustc-option = $(call __rustc-option, $(RUSTC), $(KBUILD_RUSTFLAGS),$(1),$(2))
# makefile (从“include/config/auto.conf”，行 449)
CONFIG_GENERIC_PCI_IOMAP = y
# makefile (从“include/config/auto.conf”，行 356)
CONFIG_PINCTRL = y
# makefile (从“scripts/Kbuild.include”，行 28)
test-ge = $(shell test $(strip $1)0 -ge $(strip $2)0 && echo y)
# makefile (从“include/config/auto.conf”，行 415)
CONFIG_SERIAL_CORE_CONSOLE = y
# makefile (从“include/config/auto.conf”，行 254)
CONFIG_IRQ_DOMAIN = y
# makefile (从“scripts/Makefile.build”，行 485)
existing-targets := scripts/kconfig/conf scripts/kconfig/conf.o scripts/kconfig/confdata.o scripts/kconfig/expr.o scripts/kconfig/lexer.lex.c scripts/kconfig/lexer.lex.o scripts/kconfig/menu.o scripts/kconfig/parser.tab.c scripts/kconfig/parser.tab.h scripts/kconfig/parser.tab.o scripts/kconfig/preprocess.o scripts/kconfig/symbol.o scripts/kconfig/util.o
# makefile (从“include/config/auto.conf”，行 83)
CONFIG_RESET_CONTROLLER = y
# 环境
HOSTCC = gcc
# makefile (从“scripts/Makefile.host”，行 154)
cmd_host-rust = $(HOSTRUSTC) $(hostrust_flags) --emit=link=$@ $<
# 环境
XDG_DATA_DIRS = /usr/local/share:/usr/share:/var/lib/snapd/desktop
# makefile (从“include/config/auto.conf”，行 238)
CONFIG_HAVE_EBPF_JIT = y
# makefile (从“scripts/Makefile.lib”，行 409)
cmd_file_size = $(size_append) > $@
# 环境
VERSION = 6
# makefile (从“scripts/Makefile.lib”，行 471)
quiet_cmd_fit = FIT     $@
# 环境
CC = arm-none-eabi-gcc
# 环境
HOSTPKG_CONFIG = pkg-config
# makefile (从“scripts/Makefile.build”，行 257)
define rule_rustc_o_rs
	$(call cmd_and_fixdep,rustc_o_rs)
	$(call cmd,gen_objtooldep)
endef
# makefile (从“scripts/Makefile.lib”，行 250)
a_flags = -Wp,-MMD,$(depfile) $(NOSTDINC_FLAGS) $(LINUXINCLUDE) $(_a_flags) $(modkern_aflags) $(modname_flags)
# makefile (从“scripts/Makefile.lib”，行 377)
cmd_objcopy = $(OBJCOPY) $(OBJCOPYFLAGS) $(OBJCOPYFLAGS_$(@F)) $< $@
# 环境
LC_COLLATE = C
# 环境
INSTALLKERNEL = installkernel
# “override”指令
.SHELLSTATUS := 0
# makefile (从“include/config/auto.conf”，行 52)
CONFIG_CPU_32v7M = y
# makefile (从“scripts/Makefile.lib”，行 9)
KBUILD_AFLAGS = -D__ASSEMBLY__ -fno-PIE -mabi=apcs-gnu -mno-thumb-interwork -marm -Wa,-mno-warn-deprecated -Wa,  -include asm/unified.h -msoft-float $(subdir-asflags-y)
# makefile (从“include/config/auto.conf”，行 496)
CONFIG_IRQ_WORK = y
# makefile (从“include/config/auto.conf”，行 275)
CONFIG_PAGE_OFFSET = 0x90000000
# makefile (从“include/config/auto.conf”，行 365)
CONFIG_ARCH_USE_MEMTEST = y
# makefile (从“scripts/Makefile.build”，行 376)
quiet_cmd_ar_builtin = AR      $@
# makefile (从“include/config/auto.conf”，行 501)
CONFIG_OF = y
# makefile (从“include/config/auto.conf”，行 296)
CONFIG_ARCH_SUPPORTS_CFI_CLANG = y
# makefile (从“scripts/Kbuild.include”，行 8)
squote := '
# makefile (从“scripts/kconfig/Makefile”，行 42)
menuconfig-prog := mconf
# makefile (从“include/config/auto.conf”，行 54)
CONFIG_KEYBOARD_ATKBD = y
# makefile (从“include/config/auto.conf”，行 153)
CONFIG_CRYPTO_LIB_POLY1305_RSIZE = 9
# makefile (从“include/config/auto.conf”，行 450)
CONFIG_LOCALVERSION_AUTO = y
# 环境
LC_NAME = en_US.UTF-8
# makefile (从“include/config/auto.conf”，行 333)
CONFIG_DMA_NEED_SYNC = y
# makefile (从“scripts/Makefile.host”，行 78)
host-rust := 
# makefile (从“include/config/auto.conf”，行 137)
CONFIG_AS_HAS_NON_CONST_ULEB128 = y
# makefile (从“include/config/auto.conf”，行 115)
CONFIG_ARCH_HAS_FORTIFY_SOURCE = y
# makefile (从“scripts/Kbuild.include”，行 128)
log_print = echo '$(pound) $(call escsq,$(or $(quiet_cmd_$1),cmd_$1 $@)$(why))'; echo '  $(call escsq,$(cmd_$1))';
# makefile (从“scripts/Makefile.compiler”，行 56)
cc-option-yn = $(if $(call cc-option,$1),y,n)
# makefile (从“include/config/auto.conf”，行 425)
CONFIG_I2C = y
# makefile (从“include/config/auto.conf”，行 252)
CONFIG_STM32_DMAMUX = y
# 环境
RUSTC = rustc
# makefile (从“scripts/kconfig/Makefile”，行 225)
HOSTCFLAGS_gconf.o = $(call read-file, $(obj)/gconf-cflags)
# makefile (从“include/config/auto.conf”，行 95)
CONFIG_STM32_ADC_CORE = y
# 环境
LD = arm-none-eabi-ld
# makefile (从“include/config/auto.conf”，行 404)
CONFIG_GPIO_CDEV = y
# makefile (从“include/config/auto.conf”，行 200)
CONFIG_STM32_MDMA = y
# makefile (从“include/config/auto.conf”，行 101)
CONFIG_MQ_IOSCHED_DEADLINE = y
# 环境
RESOLVE_BTFIDS = ./tools/bpf/resolve_btfids/resolve_btfids
# makefile (从“include/config/auto.conf”，行 350)
CONFIG_CPU_CACHE_NOP = y
# 环境
YACC = bison
# makefile (从“scripts/Makefile.lib”，行 435)
quiet_cmd_lz4_with_size = LZ4     $@
# makefile (从“include/config/auto.conf”，行 417)
CONFIG_IRQ_DOMAIN_HIERARCHY = y
# makefile (从“include/config/auto.conf”，行 122)
CONFIG_ARCH_SELECT_MEMORY_MODEL = y
# makefile (从“include/config/auto.conf”，行 507)
CONFIG_FS_IOMAP = y
# makefile (从“include/config/auto.conf”，行 273)
CONFIG_VHOST_MENU = y
# makefile (从“scripts/Makefile.build”，行 29)
rustflags-y := 
# makefile (从“include/config/auto.conf”，行 330)
CONFIG_RTC_INTF_DEV = y
# makefile (从“scripts/Makefile.build”，行 19)
always-m := 
# makefile (从“scripts/Kbuild.include”，行 12)
pound := #
# makefile (从“include/config/auto.conf”，行 326)
CONFIG_IIO_KFIFO_BUF = y
# makefile (从“include/config/auto.conf”，行 117)
CONFIG_SECTION_MISMATCH_WARN_ONLY = y
# makefile (从“scripts/Makefile.lib”，行 319)
define rule_cc_o_c
	$(call cmd_and_fixdep,cc_o_c)
	$(call cmd,checksrc)
	$(call cmd,checkdoc)
	$(call cmd,gen_objtooldep)
	$(call cmd,gen_symversions_c)
	$(call cmd,record_mcount)
	$(call cmd,warn_shared_object)
endef
# makefile (从“scripts/Makefile.lib”，行 432)
quiet_cmd_lz4 = LZ4     $@
# makefile (从“include/config/auto.conf”，行 6)
CONFIG_GPIOLIB = y
# makefile (从“include/config/auto.conf”，行 100)
CONFIG_BUILD_SALT = 
# makefile (从“scripts/Makefile.lib”，行 411)
quiet_cmd_bzip2 = BZIP2   $@
# makefile (从“scripts/Makefile.host”，行 118)
quiet_cmd_host-cmulti = HOSTLD  $@
# makefile (从“include/config/auto.conf”，行 138)
CONFIG_LLD_VERSION = 0
# makefile (从“include/config/auto.conf”，行 147)
CONFIG_IRQ_FORCED_THREADING = y
# makefile (从“include/config/auto.conf”，行 479)
CONFIG_ARCH_SUSPEND_POSSIBLE = y
# makefile (从“include/config/auto.conf”，行 276)
CONFIG_HAVE_KERNEL_LZO = y
# makefile (从“include/config/auto.conf”，行 84)
CONFIG_HARDIRQS_SW_RESEND = y
# makefile (从“include/config/auto.conf”，行 35)
CONFIG_ARCH_HAS_MEMBARRIER_SYNC_CORE = y
# makefile (从“include/config/auto.conf”，行 59)
CONFIG_XZ_DEC_SPARC = y
# makefile (从“include/config/auto.conf”，行 114)
CONFIG_GPIO_CDEV_V1 = y
# makefile (从“scripts/Makefile.lib”，行 314)
quiet_cmd_cc_o_c = CC $(quiet_modtag)  $@
# makefile (从“include/config/auto.conf”，行 208)
CONFIG_LOCK_MM_AND_FIND_VMA = y
# makefile (从“scripts/Makefile.lib”，行 421)
cmd_lzma = cat $(real-prereqs) | $(LZMA) -9 > $@
# makefile (从“include/config/auto.conf”，行 175)
CONFIG_FLATMEM_MANUAL = y
# makefile (从“include/config/auto.conf”，行 373)
CONFIG_ARCH_WANT_GENERAL_HUGETLB = y
# makefile (从“scripts/Makefile.build”，行 348)
cmd_cpp_lds_S = $(CPP) $(cpp_flags) -P -U$(ARCH) -D__ASSEMBLY__ -DLINKER_SCRIPT -o $@ $<
# 环境
LC_NUMERIC = C
# makefile (从“include/config/auto.conf”，行 220)
CONFIG_UNWINDER_ARM = y
# makefile (从“scripts/Kbuild.include”，行 113)
build := -f ./scripts/Makefile.build obj
# makefile (从“include/config/auto.conf”，行 267)
CONFIG_REGMAP_MMIO = y
# makefile (从“include/config/auto.conf”，行 203)
CONFIG_DEBUG_MISC = y
# makefile (从“include/config/auto.conf”，行 298)
CONFIG_INPUT_KEYBOARD = y
# makefile (从“include/config/auto.conf”，行 367)
CONFIG_CRC_OPTIMIZATIONS = y
# makefile (从“include/config/auto.conf”，行 118)
CONFIG_CC_IS_GCC = y
# makefile (从“scripts/Makefile.lib”，行 51)
multi-search = $(sort $(foreach m, $1, $(if $(call suffix-search, $m, $2, $3 -), $m)))
# makefile (从“include/config/auto.conf”，行 121)
CONFIG_DMA_ENGINE = y
# 环境
objtree = .
# 环境
KBUILD_RUSTFLAGS_MODULE = --cfg MODULE
# makefile (从“scripts/Makefile.compiler”，行 60)
cc-disable-warning = $(if $(call cc-option,-W$(strip $1)),-Wno-$(strip $1))
# makefile (从“include/config/auto.conf”，行 351)
CONFIG_DECOMPRESS_LZO = y
# makefile (从“include/config/auto.conf”，行 516)
CONFIG_LZO_DECOMPRESS = y
# 环境
RUSTC_BOOTSTRAP = 1
# makefile (从“scripts/Kbuild.include”，行 188)
newer-prereqs = $(filter-out $(PHONY),$?)
# makefile (从“include/config/auto.conf”，行 234)
CONFIG_MISC_FILESYSTEMS = y
# makefile (从“scripts/kconfig/Makefile”，行 166)
common-objs := confdata.o expr.o lexer.lex.o menu.o parser.tab.o preprocess.o symbol.o util.o
# makefile (从“include/config/auto.conf”，行 338)
CONFIG_CC_HAS_WORKING_NOSANITIZE_ADDRESS = y
# makefile (从“include/config/auto.conf”，行 88)
CONFIG_STM32_WATCHDOG = y
# 环境
ZSTD = zstd
# makefile (从“include/config/auto.conf”，行 259)
CONFIG_HAS_IOMEM = y
# makefile (从“include/config/auto.conf”，行 187)
CONFIG_IIO_STM32_TIMER_TRIGGER = y
# makefile (从“include/config/auto.conf”，行 63)
CONFIG_RCU_CPU_STALL_TIMEOUT = 21
# makefile (从“include/config/auto.conf”，行 183)
CONFIG_ARCH_HAS_RESET_CONTROLLER = y
# makefile (从“include/config/auto.conf”，行 11)
CONFIG_TREE_RCU = y
# makefile (从“scripts/Makefile.build”，行 266)
cmd_rustc_rsi_rs = $(rust_common_cmd) -Zunpretty=expanded $< >$@; command -v $(RUSTFMT) >/dev/null && $(RUSTFMT) $@
# makefile (从“scripts/Makefile.build”，行 279)
quiet_cmd_rustc_ll_rs = $(RUSTC_OR_CLIPPY_QUIET) $(quiet_modtag) $@
# makefile (从“include/config/auto.conf”，行 56)
CONFIG_GENERIC_EARLY_IOREMAP = y
# makefile (从“include/config/auto.conf”，行 490)
CONFIG_AUTO_ZRELADDR = y
# makefile (从“include/config/auto.conf”，行 321)
CONFIG_PINCTRL_STM32F429 = y
# makefile (从“scripts/Makefile.lib”，行 253)
cpp_flags = -Wp,-MMD,$(depfile) $(NOSTDINC_FLAGS) $(LINUXINCLUDE) $(_cpp_flags)
# 环境
KCONFIG_CONFIG = .config
# makefile (从“scripts/Makefile.lib”，行 505)
quiet_cmd_xzmisc = XZMISC  $@
# makefile (从“include/config/auto.conf”，行 221)
CONFIG_DEVMEM = y
# 环境
HOSTCXX = g++
# makefile (从“scripts/Makefile.build”，行 356)
quiet_cmd_asn1_compiler = ASN.1   $(basename $@).[ch]
# makefile (从“include/config/auto.conf”，行 411)
CONFIG_PANIC_ON_OOPS_VALUE = 0
# makefile (从“include/config/auto.conf”，行 288)
CONFIG_XZ_DEC_ARM = y
# makefile (从“scripts/Makefile.build”，行 285)
quiet_cmd_rustc_rs_rs_S = RSCPP $(quiet_modtag) $@
# makefile (从“include/config/auto.conf”，行 318)
CONFIG_TREE_SRCU = y
# makefile (从“include/config/auto.conf”，行 402)
CONFIG_CRC32 = y
# makefile (从“include/config/auto.conf”，行 520)
CONFIG_THUMB2_KERNEL = y
# makefile (从“scripts/kconfig/Makefile”，行 195)
HOSTCFLAGS_mconf.o = $(call read-file, scripts/kconfig/mconf-cflags)
# makefile (从“include/config/auto.conf”，行 33)
CONFIG_GENERIC_HWEIGHT = y
# makefile (从“scripts/Makefile.lib”，行 385)
quiet_cmd_gzip = GZIP    $@
# 环境
PWD = /home/embedsky/share/linux-stable
# makefile (从“include/config/auto.conf”，行 111)
CONFIG_SERIAL_CORE = y
# makefile (从“include/config/auto.conf”，行 236)
CONFIG_CPU_THUMBONLY = y
# makefile (从“include/config/auto.conf”，行 47)
CONFIG_I2C_CHARDEV = y
# makefile (从“include/config/auto.conf”，行 312)
CONFIG_ARCH_FLATMEM_ENABLE = y
# 环境
OBJCOPYFLAGS = 
# makefile (从“scripts/Makefile.build”，行 6)
src := ./scripts/kconfig
# makefile (从“include/config/auto.conf”，行 277)
CONFIG_EXPERT = y
# makefile (从“include/config/auto.conf”，行 454)
CONFIG_PAGE_SIZE_LESS_THAN_256KB = y
# 环境
VSCODE_IPC_HOOK_CLI = /run/user/1000/vscode-ipc-633efaa2-24ee-46dd-9935-7440fa5906b2.sock
# makefile (从“scripts/kconfig/.util.o.cmd”，行 1)
savedcmd_scripts/kconfig/util.o := gcc -Wp,-MMD,scripts/kconfig/.util.o.d -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer -std=gnu11   -I ./scripts/include   -c -o scripts/kconfig/util.o scripts/kconfig/util.c
# makefile (从“include/config/auto.conf”，行 471)
CONFIG_ARCH_HAS_SET_MEMORY = y
# makefile (从“include/config/auto.conf”，行 226)
CONFIG_SELECT_MEMORY_MODEL = y
# makefile (从“include/config/auto.conf”，行 119)
CONFIG_CMDLINE = 
# makefile (从“include/config/auto.conf”，行 357)
CONFIG_CPU_CACHE_V7M = y
# makefile (从“scripts/Makefile.build”，行 132)
cmd_cc_ll_c = $(CC) $(c_flags) -emit-llvm -S -fno-discard-value-names -o $@ $<
# makefile (从“include/config/auto.conf”，行 282)
CONFIG_HAVE_SYSCALL_TRACEPOINTS = y
# makefile (从“include/config/auto.conf”，行 143)
CONFIG_ARCH_HAS_CPU_CACHE_ALIASING = y
# 环境
BASH = bash
# makefile (从“scripts/Makefile.build”，行 26)
EXTRA_LDFLAGS := 
# makefile (从“include/config/auto.conf”，行 23)
CONFIG_SYSFS_SYSCALL = y
# makefile (从“scripts/Makefile.lib”，行 248)
rust_flags = $(_rust_flags) $(modkern_rustflags) @$(objtree)/include/generated/rustc_cfg
# makefile (从“scripts/Makefile.build”，行 195)
is-standard-object = $(if $(filter-out y%, $(OBJECT_FILES_NON_STANDARD_$(target-stem).o)$(OBJECT_FILES_NON_STANDARD)n),$(is-kernel-object))
# makefile (从“include/config/auto.conf”，行 57)
CONFIG_OF_FLATTREE = y
# makefile (从“scripts/Makefile.lib”，行 330)
cmd_as_o_S = $(CC) $(a_flags) -c -o $@ $< $(cmd_objtool)
# makefile (从“scripts/Makefile.compiler”，行 64)
gcc-min-version = $(call test-ge, $(CONFIG_GCC_VERSION), $1)
# makefile (从“scripts/Makefile.lib”，行 540)
sed-offsets = 	's:^[[:space:]]*\.ascii[[:space:]]*"\(.*\)".*:\1:; /^->/{s:->#\(.*\):/* \1 */:; s:^->\([^ ]*\) [\$$#]*\([^ ]*\) \(.*\):#define \1 \2 /* \3 */:; s:->::; p;}'
# makefile (从“include/config/auto.conf”，行 171)
CONFIG_BINFMT_FLAT_ARGVP_ENVP_ON_STACK = y
# 默认
.RECIPEPREFIX := 
# makefile (从“include/config/auto.conf”，行 476)
CONFIG_CRC_ITU_T = y
# makefile (从“scripts/Makefile.compiler”，行 45)
__cc-option = $(call try-run, $(1) -Werror $(2) $(3) -c -x c /dev/null -o "$$TMP",$(3),$(4))
# makefile (从“scripts/Makefile.lib”，行 380)
cmd_strip_relocs = $(OBJCOPY) --remove-section='.rel*' $@
# makefile (从“include/config/auto.conf”，行 304)
CONFIG_RD_ZSTD = y
# 环境
HOSTRUSTC = rustc
# makefile (从“scripts/Makefile.lib”，行 365)
cmd_ld = $(LD) $(ld_flags) $(real-prereqs) -o $@
# 环境
LESSCLOSE = /usr/bin/lesspipe %s %s
# makefile (从“include/config/auto.conf”，行 369)
CONFIG_SPARSE_IRQ = y
# 自动
-*-command-variables-*- := obj=scripts/kconfig
# makefile (从“include/config/auto.conf”，行 24)
CONFIG_HAVE_UID16 = y
# makefile (从“include/config/auto.conf”，行 205)
CONFIG_DECOMPRESS_LZMA = y
# makefile (从“include/config/auto.conf”，行 325)
CONFIG_ARCH_MMAP_RND_BITS_MAX = 16
# makefile (从“include/config/auto.conf”，行 409)
CONFIG_STM32_EXTI = y
# makefile (从“scripts/Makefile.lib”，行 498)
quiet_cmd_xzkern = XZKERN  $@
# makefile (从“scripts/Makefile.lib”，行 414)
quiet_cmd_bzip2_with_size = BZIP2   $@
# makefile (从“include/config/auto.conf”，行 370)
CONFIG_MMC_ARMMMCI = y
# makefile (从“scripts/Makefile.lib”，行 243)
c_flags = -Wp,-MMD,$(depfile) $(NOSTDINC_FLAGS) $(LINUXINCLUDE) -include $(srctree)/include/linux/compiler_types.h $(_c_flags) $(modkern_cflags) $(basename_flags) $(modname_flags)
# makefile (从“scripts/kconfig/.lexer.lex.c.cmd”，行 1)
savedcmd_scripts/kconfig/lexer.lex.c := flex -oscripts/kconfig/lexer.lex.c -L scripts/kconfig/lexer.l
# makefile (从“scripts/Makefile.host”，行 86)
hostcxx_flags = -Wp,-MMD,$(depfile) $(KBUILD_HOSTCXXFLAGS) $(HOST_EXTRACXXFLAGS) $(HOSTCXXFLAGS_$(target-stem).o)
# makefile (从“include/config/auto.conf”，行 160)
CONFIG_ARM = y
# 环境
SSL_CERT_DIR = /usr/lib/ssl/certs
# makefile (从“scripts/Makefile.compiler”，行 77)
__rustc-option = $(call try-run, echo '
# makefile (从“include/config/auto.conf”，行 440)
CONFIG_HAVE_SOFTIRQ_ON_OWN_STACK = y
# makefile (从“include/config/auto.conf”，行 429)
CONFIG_ARCH_SPARSEMEM_ENABLE = y
# 环境
KBUILD_HOSTCXXFLAGS = -Wall -O2   -I ./scripts/include
# 环境
KGZIP = gzip
# makefile (从“scripts/Makefile.build”，行 58)
subdir-builtin := 
# makefile (从“include/config/auto.conf”，行 320)
CONFIG_PREEMPT = y
# makefile (从“scripts/Makefile.lib”，行 103)
target-stem = $(basename $(patsubst $(obj)/%,%,$@))
# makefile (从“scripts/Makefile.lib”，行 527)
quiet_cmd_zstd22 = ZSTD22  $@
# 环境
GZFLAGS = -9
# 自动
^D = $(patsubst %/,%,$(dir $^))
# makefile (从“include/config/auto.conf”，行 99)
CONFIG_STM32_DMA = y
# makefile (从“include/config/auto.conf”，行 40)
CONFIG_CPU_LITTLE_ENDIAN = y
# makefile (从“include/config/auto.conf”，行 193)
CONFIG_CONSOLE_LOGLEVEL_DEFAULT = 7
# makefile (从“include/config/auto.conf”，行 292)
CONFIG_HAVE_EXIT_THREAD = y
# 环境
RCS_FIND_IGNORE = \( -name SCCS -o -name BitKeeper -o -name .svn -o -name CVS -o -name .pc -o -name .hg -o -name .git \) -prune -o
# makefile (从“include/config/auto.conf”，行 500)
CONFIG_RCU_EXP_CPU_STALL_TIMEOUT = 0
# makefile (从“scripts/Makefile.lib”，行 113)
modfile_flags = -DKBUILD_MODFILE=$(call stringify,$(modfile))
# makefile (从“include/config/auto.conf”，行 145)
CONFIG_SECCOMP = y
# makefile (从“include/config/auto.conf”，行 347)
CONFIG_HAVE_PERF_EVENTS = y
# makefile (从“include/config/auto.conf”，行 18)
CONFIG_ARCH_HAS_BINFMT_FLAT = y
# makefile (从“scripts/kconfig/Makefile”，行 224)
HOSTLDLIBS_gconf = $(call read-file, $(obj)/gconf-libs)
# makefile (从“scripts/Makefile.build”，行 234)
rust_common_cmd = OBJTREE=$(abspath $(objtree)) RUST_MODFILE=$(modfile) $(RUSTC_OR_CLIPPY) $(rust_flags) -Zallow-features=$(rust_allowed_features) -Zcrate-attr=no_std -Zcrate-attr='feature($(rust_allowed_features))' -Zunstable-options --extern kernel --crate-type rlib -L $(objtree)/rust/ --crate-name $(basename $(notdir $@)) --sysroot=/dev/null --out-dir $(dir $@) --emit=dep-info=$(depfile)
# makefile (从“include/config/auto.conf”，行 518)
CONFIG_RTC_HCTOSYS = y
# 默认
MAKECMDGOALS := stm32_defconfig
# makefile (从“include/config/auto.conf”，行 68)
CONFIG_NO_HZ_COMMON = y
# makefile (从“include/config/auto.conf”，行 442)
CONFIG_DEBUG_LL_INCLUDE = mach/debug-macro.S
# makefile (从“scripts/Makefile.build”，行 59)
subdir-modorder := 
# makefile (从“include/config/auto.conf”，行 127)
CONFIG_ZBOOT_ROM_BSS = 0x0
# 环境
srcroot = .
# makefile (从“scripts/Makefile.build”，行 347)
quiet_cmd_cpp_lds_S = LDS     $@
# makefile (从“include/config/auto.conf”，行 219)
CONFIG_LEDS_TRIGGER_HEARTBEAT = y
# 环境
KBUILD_DEFCONFIG = multi_v7_defconfig
# makefile (从“include/config/auto.conf”，行 362)
CONFIG_PRINTK_TIME = y
# makefile (从“include/config/auto.conf”，行 287)
CONFIG_CPU_PABRT_LEGACY = y
# makefile (从“scripts/Kbuild.include”，行 81)
silent_kecho := :
# makefile (从“include/config/auto.conf”，行 16)
CONFIG_DMA_NONCOHERENT_MMAP = y
# makefile (从“include/config/auto.conf”，行 215)
CONFIG_MFD_STMPE = y
# 环境
KERNELRELEASE = 
# makefile (从“include/config/auto.conf”，行 278)
CONFIG_MAGIC_SYSRQ_SERIAL = y
# makefile (从“scripts/Makefile.build”，行 357)
cmd_asn1_compiler = $(objtree)/scripts/asn1_compiler $< $(basename $@).c $(basename $@).h
# makefile (从“include/config/auto.conf”，行 302)
CONFIG_THREAD_INFO_IN_TASK = y
# makefile (从“include/config/auto.conf”，行 237)
CONFIG_UNCOMPRESS_INCLUDE = debug/uncompress.h
# 环境
MAKEOVERRIDES = ${-*-command-variables-*-}
# makefile (从“scripts/Makefile.lib”，行 448)
UIMAGE_OPTS-y = 
# makefile (从“scripts/Makefile.host”，行 13)
quiet_cmd_bison = YACC    $(basename $@).[ch]
# makefile (从“scripts/Kbuild.include”，行 13)
define newline


endef
# 环境
KBUILD_CFLAGS_MODULE = -DMODULE
# 环境
LC_IDENTIFICATION = en_US.UTF-8
# 默认
MAKE_VERSION := 4.2.1
# 环境
USER = embedsky
# makefile (从“include/config/auto.conf”，行 416)
CONFIG_XXHASH = y
# 环境
CHECK = sparse
# makefile (从“include/config/auto.conf”，行 525)
CONFIG_ARCH_HAS_SYNC_DMA_FOR_DEVICE = y
# makefile (从“include/config/auto.conf”，行 470)
CONFIG_MACH_STM32F769 = y
# makefile (从“include/config/auto.conf”，行 389)
CONFIG_DECOMPRESS_GZIP = y
# makefile (从“include/config/auto.conf”，行 309)
CONFIG_RTC_CLASS = y
# makefile (从“scripts/Makefile.lib”，行 452)
UIMAGE_NAME = Linux-$(KERNELRELEASE)
# makefile (从“scripts/Kbuild.include”，行 204)
if_changed_dep = $(if $(if-changed-cond),$(cmd_and_fixdep),@:)
# makefile (从“include/config/auto.conf”，行 39)
CONFIG_BCMA_POSSIBLE = y
# makefile (从“include/config/auto.conf”，行 245)
CONFIG_HZ = 100
# makefile (从“include/config/auto.conf”，行 93)
CONFIG_MOUSE_PS2_FOCALTECH = y
# makefile (从“include/config/auto.conf”，行 87)
CONFIG_PAGE_SIZE_LESS_THAN_64KB = y
# makefile (从“include/config/auto.conf”，行 182)
CONFIG_HZ_100 = y
# 环境
MAKE = make
# makefile (从“include/config/auto.conf”，行 480)
CONFIG_RT_MUTEXES = y
# makefile (从“include/config/auto.conf”，行 352)
CONFIG_BINFMT_FLAT = y
# makefile (从“scripts/Makefile.lib”，行 88)
multi-obj-m := 
# makefile (从“include/config/auto.conf”，行 434)
CONFIG_JBD2 = y
# makefile (从“include/config/auto.conf”，行 157)
CONFIG_PREEMPT_BUILD = y
# makefile (从“include/config/auto.conf”，行 515)
CONFIG_STM32_ADC = y
# makefile (从“include/config/auto.conf”，行 391)
CONFIG_DMA_OF = y
# makefile (从“include/config/auto.conf”，行 244)
CONFIG_I2C_HELPER_AUTO = y
# makefile (从“scripts/Makefile.lib”，行 420)
quiet_cmd_lzma = LZMA    $@
# makefile (从“scripts/Makefile.compiler”，行 89)
rustc-option-yn = $(if $(call rustc-option,$1),y,n)
# makefile (从“include/config/auto.conf”，行 512)
CONFIG_ARCH_HAS_DMA_OPS = y
# makefile (从“include/config/auto.conf”，行 8)
CONFIG_LIBFDT = y
# makefile (从“scripts/Makefile.lib”，行 226)
part-of-module = $(if $(filter $(basename $@).o, $(real-obj-m)),y)
# 环境
LC_TELEPHONE = en_US.UTF-8
# makefile (从“include/config/auto.conf”，行 78)
CONFIG_BLK_ICQ = y
# makefile (从“scripts/Makefile.lib”，行 442)
MKIMAGE := ./scripts/mkuboot.sh
# makefile (从“scripts/Makefile.compiler”，行 72)
ld-option = $(call try-run, $(LD) $(KBUILD_LDFLAGS) $(1) -v,$(1),$(2),$(3))
# makefile (从“include/config/auto.conf”，行 493)
CONFIG_HAVE_ARCH_TRACEHOOK = y
# makefile (从“scripts/Makefile.lib”，行 229)
modkern_cflags = $(if $(part-of-module), $(KBUILD_CFLAGS_MODULE) $(CFLAGS_MODULE), $(KBUILD_CFLAGS_KERNEL) $(CFLAGS_KERNEL) $(modfile_flags))
# makefile (从“scripts/kconfig/.expr.o.cmd”，行 5)
deps_scripts/kconfig/expr.o := scripts/include/hash.h scripts/include/xalloc.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/kconfig/lkc.h  scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h 
# makefile (从“include/config/auto.conf”，行 511)
CONFIG_DEVTMPFS_MOUNT = y
# makefile (从“include/config/auto.conf”，行 407)
CONFIG_RTC_LIB = y
# makefile (从“scripts/Makefile.lib”，行 433)
cmd_lz4 = cat $(real-prereqs) | $(LZ4) -l -9 - - > $@
# makefile (从“scripts/kconfig/Makefile”，行 236)
clean-files = tests/.cache *conf-cflags *conf-libs *conf-bin
# makefile (从“include/config/auto.conf”，行 229)
CONFIG_RUSTC_VERSION = 0
# makefile (从“scripts/Makefile.lib”，行 412)
cmd_bzip2 = cat $(real-prereqs) | $(KBZIP2) -9 > $@
# makefile (从“include/config/auto.conf”，行 467)
CONFIG_DECOMPRESS_ZSTD = y
# makefile (从“include/config/auto.conf”，行 5)
CONFIG_MMC = y
# makefile (从“include/config/auto.conf”，行 222)
CONFIG_LSM = landlock,lockdown,yama,loadpin,safesetid,ipe,bpf
# makefile (从“include/config/auto.conf”，行 264)
CONFIG_LOCALVERSION = 
# makefile (从“include/config/auto.conf”，行 161)
CONFIG_HAVE_IRQ_EXIT_ON_IRQ_STACK = y
# makefile (从“scripts/Makefile.lib”，行 446)
UIMAGE_ARCH = $(SRCARCH)
# makefile (从“include/config/auto.conf”，行 69)
CONFIG_ZSTD_DECOMPRESS = y
# makefile (从“scripts/Makefile.lib”，行 370)
quiet_cmd_ar = AR      $@
# makefile (从“include/config/auto.conf”，行 522)
CONFIG_SERIO = y
# makefile (从“include/config/auto.conf”，行 21)
CONFIG_RANDSTRUCT_NONE = y
# makefile (从“scripts/kconfig/Makefile”，行 9)
Kconfig := Kconfig
# 环境
TERM_PROGRAM = vscode
# 默认
.VARIABLES := 
# makefile (从“scripts/Makefile.build”，行 131)
quiet_cmd_cc_ll_c = CC $(quiet_modtag)  $@
# makefile (从“include/config/auto.conf”，行 73)
CONFIG_COMPAT_BRK = y
# makefile (从“scripts/Makefile.lib”，行 525)
cmd_zstd = cat $(real-prereqs) | $(ZSTD) -19 > $@
# makefile (从“scripts/Makefile.lib”，行 6)
ldflags-y := $(subst ,, )
# makefile (从“include/config/auto.conf”，行 526)
CONFIG_PRINTK = y
# 环境
KBUILD_KCONFIG = 
# makefile (从“scripts/kconfig/.lexer.lex.o.cmd”，行 5)
deps_scripts/kconfig/lexer.lex.o := scripts/include/xalloc.h scripts/kconfig/lkc.h  scripts/kconfig/expr.h scripts/include/list_types.h scripts/kconfig/lkc_proto.h scripts/kconfig/preprocess.h scripts/kconfig/parser.tab.h 
# makefile (从“scripts/kconfig/Makefile”，行 195)
HOSTCFLAGS_lxdialog/menubox.o = $(call read-file, scripts/kconfig/mconf-cflags)
# makefile (从“scripts/Makefile.lib”，行 3)
asflags-y := $(subst ,, )
# makefile (从“include/config/auto.conf”，行 410)
CONFIG_SYSCTL = y
# makefile (从“scripts/Kbuild.include”，行 182)
make-cmd = $(call escsq,$(subst $(pound),$$(pound),$(subst $$,$$$$,$(cmd_$(1)))))
# makefile (从“scripts/Kbuild.include”，行 31)
test-le = $(call test-ge, $2, $1)
# 环境
LEX = flex
# makefile (从“include/config/auto.conf”，行 242)
CONFIG_SCSI_MOD = y
# makefile
MAKEFLAGS = prR --no-print-directory -- $(MAKEOVERRIDES)
# makefile (从“include/config/auto.conf”，行 492)
CONFIG_ARCH_STM32 = y
# 环境
MFLAGS = -prR --no-print-directory
# 环境
SSH_CLIENT = 192.168.139.1 1627 22
# 环境
KBZIP2 = bzip2
# 环境
RUSTFLAGS_KERNEL = 
# makefile (从“scripts/kconfig/Makefile”，行 194)
HOSTLDLIBS_mconf = $(call read-file, $(obj)/mconf-libs)
# makefile (从“include/config/auto.conf”，行 135)
CONFIG_BLK_DEV_WRITE_MOUNTED = y
# makefile (从“scripts/Makefile.build”，行 492)
existing-dirs := scripts/kconfig
# makefile (从“scripts/kconfig/Makefile”，行 181)
HOSTLDLIBS_nconf = $(call read-file, $(obj)/nconf-libs)
# makefile (从“scripts/Makefile.lib”，行 49)
suffix-search = $(strip $(foreach s, $3, $($(1:%$(strip $2)=%$s))))
# 环境
OBJDUMP = arm-none-eabi-objdump
# makefile (从“include/config/auto.conf”，行 113)
CONFIG_SERIAL_MCTRL_GPIO = y
# makefile (从“include/config/auto.conf”，行 468)
CONFIG_OLD_SIGSUSPEND3 = y
# makefile (从“include/config/auto.conf”，行 517)
CONFIG_GENERIC_SMP_IDLE_THREAD = y
# makefile (从“include/config/auto.conf”，行 484)
CONFIG_RTC_SYSTOHC_DEVICE = rtc0
# makefile (从“include/config/auto.conf”，行 30)
CONFIG_OF_IRQ = y
# makefile (从“include/config/auto.conf”，行 303)
CONFIG_SYSFS = y
# 环境
LC_PAPER = en_US.UTF-8
# makefile (从“include/config/auto.conf”，行 301)
CONFIG_XZ_DEC_RISCV = y
# 环境
BROWSER = /home/embedsky/.vscode-server/cli/servers/Stable-e54c774e0add60467559eb0d1e229c6452cf8447/server/bin/helpers/browser.sh
# makefile (从“scripts/Makefile.build”，行 455)
single-subdir-goals := 
# makefile (从“scripts/Makefile.lib”，行 506)
cmd_xzmisc = cat $(real-prereqs) | $(XZ) --check=crc32 --lzma2=dict=1MiB > $@
# 环境
MMUEXT = -nommu
# makefile (从“include/config/auto.conf”，行 247)
CONFIG_MACH_STM32F469 = y
# makefile (从“include/config/auto.conf”，行 41)
CONFIG_ARCH_WANT_FLAT_DTB_INSTALL = y
# 环境
KBUILD_HOSTLDLIBS = $(subst ,, )
# makefile (从“include/config/auto.conf”，行 22)
CONFIG_RTC_I2C_AND_SPI = y
# makefile (从“scripts/Makefile.build”，行 33)
subdir-asflags-y := 
# makefile (从“include/config/auto.conf”，行 308)
CONFIG_GENERIC_CLOCKEVENTS = y
# makefile (从“scripts/kconfig/Makefile”，行 195)
HOSTCFLAGS_lxdialog/inputbox.o = $(call read-file, scripts/kconfig/mconf-cflags)
# makefile (从“scripts/Makefile.lib”，行 386)
cmd_gzip = cat $(real-prereqs) | $(KGZIP) -n -f -9 > $@
# makefile (从“scripts/Makefile.build”，行 110)
getexportsymbols = $(NM) $@ | sed -n 's/.* __export_symbol_\(.*\)/$(1)/p'
# makefile (从“scripts/Makefile.host”，行 119)
cmd_host-cmulti = $(HOSTCC) $(KBUILD_HOSTLDFLAGS) -o $@ $(addprefix $(obj)/, $($(target-stem)-objs)) $(KBUILD_HOSTLDLIBS) $(HOSTLDLIBS_$(target-stem))
# makefile (从“scripts/Makefile.lib”，行 82)
always-y := 
# makefile (从“scripts/kconfig/.conf.o.cmd”，行 1)
savedcmd_scripts/kconfig/conf.o := gcc -Wp,-MMD,scripts/kconfig/.conf.o.d -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer -std=gnu11   -I ./scripts/include   -c -o scripts/kconfig/conf.o scripts/kconfig/conf.c
# makefile (从“include/config/auto.conf”，行 218)
CONFIG_FUNCTION_ALIGNMENT = 0
# makefile (从“scripts/kconfig/Makefile”，行 108)
cmd_merge_fragments = $(srctree)/scripts/kconfig/merge_config.sh -m $(KCONFIG_CONFIG) $(config-fragments)
# makefile (从“scripts/Kbuild.include”，行 153)
cmd = @$(if $(cmd_$(1)),set -e; $($(quiet)log_print) $(delete-on-interrupt) $(cmd_$(1)),:)
# makefile (从“include/config/auto.conf”，行 456)
CONFIG_MACH_STM32F746 = y
# makefile (从“include/config/auto.conf”，行 488)
CONFIG_HAVE_ARCH_BITREVERSE = y
# makefile (从“include/config/auto.conf”，行 212)
CONFIG_AEABI = y
# makefile (从“include/config/auto.conf”，行 149)
CONFIG_DECOMPRESS_LZ4 = y
# makefile (从“scripts/Makefile.lib”，行 427)
cmd_lzo = cat $(real-prereqs) | $(KLZOP) -9 > $@
# makefile (从“include/config/auto.conf”，行 70)
CONFIG_ARCH_SUPPORTS_PER_VMA_LOCK = y
# makefile (从“scripts/Makefile.lib”，行 99)
modname = $(subst $(space),:,$(__modname))
# makefile (从“include/config/auto.conf”，行 386)
CONFIG_EXT3_FS = y
# makefile (从“include/config/auto.conf”，行 36)
CONFIG_HAVE_C_RECORDMCOUNT = y
# makefile (从“include/config/auto.conf”，行 191)
CONFIG_MOUSE_PS2 = y
# 自动
<F = $(notdir $<)
# makefile (从“include/config/auto.conf”，行 58)
CONFIG_GPIO_STMPE = y
# makefile (从“include/config/auto.conf”，行 453)
CONFIG_HAVE_PERF_REGS = y
# makefile (从“scripts/Makefile.build”，行 404)
define rule_ld_multi_m
	$(call cmd_and_savecmd,ld_multi_m)
	$(call cmd,gen_objtooldep)
endef
# makefile (从“include/config/auto.conf”，行 430)
CONFIG_NLS = y
# makefile (从“scripts/Kbuild.include”，行 126)
silent_log_print = exec >/dev/null;
# makefile (从“include/config/auto.conf”，行 235)
CONFIG_HZ_FIXED = 0
# makefile (从“include/config/auto.conf”，行 310)
CONFIG_NO_HZ_IDLE = y
# makefile (从“scripts/Makefile.lib”，行 119)
_rust_flags = $(filter-out $(RUSTFLAGS_REMOVE_$(target-stem).o), $(filter-out $(rustflags-remove-y), $(KBUILD_RUSTFLAGS) $(rustflags-y)) $(RUSTFLAGS_$(target-stem).o))
# makefile (从“scripts/Makefile.lib”，行 108)
name-fix-token = $(subst $(comma),_,$(subst -,_,$1))
# makefile (从“scripts/Makefile.host”，行 129)
cmd_host-cobjs = $(HOSTCC) $(hostc_flags) -c -o $@ $<
# makefile (从“include/config/auto.conf”，行 195)
CONFIG_HAVE_CONTEXT_TRACKING_USER = y
# makefile (从“scripts/Makefile.build”，行 323)
quiet_cmd_cpp_s_S = CPP $(quiet_modtag) $@
# makefile (从“include/config/auto.conf”，行 71)
CONFIG_LOG_BUF_SHIFT = 16
# makefile (从“scripts/Makefile.compiler”，行 68)
clang-min-version = $(call test-ge, $(CONFIG_CLANG_VERSION), $1)
# makefile (从“include/config/auto.conf”，行 343)
CONFIG_STMPE_I2C = y
# makefile (从“include/config/auto.conf”，行 232)
CONFIG_INIT_STACK_NONE = y
# makefile (从“scripts/kconfig/Makefile”，行 231)
cmd_conf_cfg = $< $(addprefix $(obj)/$*conf-, cflags libs bin); touch $(obj)/$*conf-bin
# makefile (从“include/config/auto.conf”，行 344)
CONFIG_HAVE_ARCH_AUDITSYSCALL = y
# makefile (从“include/config/auto.conf”，行 67)
CONFIG_MAGIC_SYSRQ_DEFAULT_ENABLE = 0x1
# makefile (从“scripts/Makefile.lib”，行 426)
quiet_cmd_lzo = LZO     $@
# makefile (从“include/config/auto.conf”，行 260)
CONFIG_CLKSRC_MMIO = y
# makefile (从“scripts/kconfig/.preprocess.o.cmd”，行 3)
source_scripts/kconfig/preprocess.o := scripts/kconfig/preprocess.c
# makefile (从“include/config/auto.conf”，行 196)
CONFIG_BINFMT_SCRIPT = y
# makefile (从“include/config/auto.conf”，行 363)
CONFIG_ZLIB_INFLATE = y
# makefile (从“include/config/auto.conf”，行 294)
CONFIG_HAVE_ARCH_PFN_VALID = y
# makefile (从“include/config/auto.conf”，行 224)
CONFIG_SERIAL_EARLYCON = y
# makefile (从“include/config/auto.conf”，行 42)
CONFIG_ARMV7M_SYSTICK = y
# makefile (从“scripts/Makefile.lib”，行 109)
name-fix = $(call stringify,$(call name-fix-token,$1))
# makefile (从“scripts/Kbuild.include”，行 80)
quiet_kecho := echo
# makefile (从“include/config/auto.conf”，行 204)
CONFIG_TTY = y
# makefile (从“scripts/Kbuild.include”，行 49)
basetarget = $(basename $(notdir $@))
# 自动
^F = $(notdir $^)
# makefile (从“include/config/auto.conf”，行 340)
CONFIG_UNINLINE_SPIN_UNLOCK = y
# makefile (从“include/config/auto.conf”，行 322)
CONFIG_CRC16 = y
# makefile (从“include/config/auto.conf”，行 107)
CONFIG_SOFTIRQ_ON_OWN_STACK = y
# makefile (从“scripts/Makefile.build”，行 280)
cmd_rustc_ll_rs = $(rust_common_cmd) --emit=llvm-ir=$@ $<
# 环境
UTS_MACHINE = arm
# makefile (从“scripts/Makefile.lib”，行 528)
cmd_zstd22 = cat $(real-prereqs) | $(ZSTD) -22 --ultra > $@
# makefile (从“include/config/auto.conf”，行 176)
CONFIG_BINFMT_ELF_FDPIC = y
# makefile (从“include/config/auto.conf”，行 180)
CONFIG_KEYBOARD_GPIO = y
# makefile (从“scripts/kconfig/.expr.o.cmd”，行 3)
source_scripts/kconfig/expr.o := scripts/kconfig/expr.c
# 环境
CLIPPY_CONF_DIR = .
# makefile (从“include/config/auto.conf”，行 206)
CONFIG_MOUSE_PS2_CYPRESS = y
# makefile (从“scripts/Makefile.build”，行 25)
EXTRA_CPPFLAGS := 
# makefile (从“scripts/Makefile.lib”，行 344)
quiet_cmd_copy = COPY    $@
# makefile (从“include/config/auto.conf”，行 387)
CONFIG_LD_IS_BFD = y
# makefile (从“include/config/auto.conf”，行 28)
CONFIG_BLOCK_LEGACY_AUTOLOAD = y
# makefile (从“include/config/auto.conf”，行 361)
CONFIG_CC_HAS_KASAN_GENERIC = y
# makefile (从“include/config/auto.conf”，行 382)
CONFIG_RTC_SYSTOHC = y
# makefile (从“include/config/auto.conf”，行 240)
CONFIG_KALLSYMS = y
# makefile (从“scripts/Kbuild.include”，行 147)
delete-on-interrupt = $(if $(filter-out $(PHONY), $@), $(foreach sig, HUP INT QUIT TERM PIPE, trap 'rm -f $@; trap - $(sig); kill -s $(sig) $$$$' $(sig);))
# 默认
.INCLUDE_DIRS = /usr/include /usr/local/include /usr/include
# makefile (从“include/config/auto.conf”，行 305)
CONFIG_HAVE_ARCH_THREAD_STRUCT_WHITELIST = y
# makefile (从“include/config/auto.conf”，行 269)
CONFIG_STACKPROTECTOR = y
# makefile (从“scripts/Makefile.lib”，行 115)
_c_flags = $(filter-out $(CFLAGS_REMOVE_$(target-stem).o), $(filter-out $(ccflags-remove-y), $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) $(ccflags-y)) $(CFLAGS_$(target-stem).o))
# makefile (从“include/config/auto.conf”，行 495)
CONFIG_HAVE_BUILDTIME_MCOUNT_SORT = y
# 环境
KBUILD_CHECKSRC = 0
# 环境
MAKELEVEL := 2
# makefile (从“include/config/auto.conf”，行 125)
CONFIG_I2C_STM32F7 = y
# makefile (从“scripts/kconfig/Makefile”，行 206)
HOSTLDLIBS_qconf = $(call read-file, $(obj)/qconf-libs)
# makefile (从“scripts/kconfig/Makefile”，行 195)
HOSTCFLAGS_lxdialog/util.o = $(call read-file, scripts/kconfig/mconf-cflags)
# makefile (从“scripts/kconfig/Makefile”，行 105)
all-config-fragments = $(call configfiles,*.config)
# 环境
MAKE_TERMERR = /dev/pts/2
# makefile (从“include/config/auto.conf”，行 414)
CONFIG_ARM_NVIC = y
# makefile (从“include/config/auto.conf”，行 509)
CONFIG_ALLOW_DEV_COREDUMP = y
# makefile (从“scripts/Makefile.compiler”，行 16)
TMPOUT = .tmp_$$$$
# makefile (从“include/config/auto.conf”，行 337)
CONFIG_HID = y
# makefile (从“include/config/auto.conf”，行 62)
CONFIG_OF_GPIO = y
# makefile (从“scripts/Makefile.lib”，行 472)
cmd_fit = $(MAKE_FIT) -o $@ --arch $(UIMAGE_ARCH) --os linux --name '$(UIMAGE_NAME)' $(if $(findstring 1,$(KBUILD_VERBOSE)),-v) $(if $(FIT_DECOMPOSE_DTBS),--decompose-dtbs) --compress $(FIT_COMPRESSION) -k $< @$(word 2,$^)
# makefile (从“include/config/auto.conf”，行 142)
CONFIG_PREEMPT_COUNT = y
# 环境
sub_make_done = 1
# makefile (从“scripts/Kbuild.include”，行 197)
if_changed = $(if $(if-changed-cond),$(cmd_and_savecmd),@:)
# makefile (从“include/config/auto.conf”，行 482)
CONFIG_PINCTRL_STM32 = y
# makefile (从“include/config/auto.conf”，行 435)
CONFIG_PINCTRL_STM32F769 = y
# 环境
LANG = zh_CN.UTF-8
# makefile (从“include/config/auto.conf”，行 51)
CONFIG_DEVTMPFS = y
# makefile (从“include/config/auto.conf”，行 172)
CONFIG_IIO_BUFFER = y
# makefile (从“scripts/Makefile.build”，行 454)
single-subdirs := 
# makefile (从“include/config/auto.conf”，行 233)
CONFIG_EEPROM_93CX6 = y
# makefile (从“scripts/kconfig/Makefile”，行 182)
HOSTCFLAGS_nconf.o = $(call read-file, $(obj)/nconf-cflags)
# makefile (从“scripts/Kbuild.include”，行 9)
empty := 
# makefile (从“scripts/Kbuild.include”，行 40)
tmp-target = $(dir $@).tmp_$(notdir $@)
# makefile (从“include/config/auto.conf”，行 339)
CONFIG_GENERIC_LIB_DEVMEM_IS_ALLOWED = y
# makefile (从“include/config/auto.conf”，行 528)
CONFIG_HIGH_RES_TIMERS = y
# makefile (从“include/config/auto.conf”，行 184)
CONFIG_PERF_USE_VMALLOC = y
# 环境
MOTD_SHOWN = pam
# makefile (从“scripts/Makefile.lib”，行 501)
quiet_cmd_xzkern_with_size = XZKERN  $@
# makefile (从“scripts/Makefile.build”，行 377)
cmd_ar_builtin = rm -f $@; $(if $(real-prereqs), printf "$(obj)/%s " $(patsubst $(obj)/%,%,$(real-prereqs)) | xargs) $(AR) cDPrST $@
# makefile (从“include/config/auto.conf”，行 354)
CONFIG_LZ4_DECOMPRESS = y
# makefile (从“include/config/auto.conf”，行 178)
CONFIG_FS_MBCACHE = y
# 变量的杂凑表状态:
# 负载=1046/2048=51%, 重新杂凑=1, 碰撞=3037/2965=102%

# Pattern-specific 变量值

# 没有 pattern-specific 变量的值。

# 目录

# . (设备 2053，i-节点 927860)： 无 文件， 无 不可能 迄今为止。
# scripts/kconfig (设备 2053，i-节点 1186278)： 63 文件， 28 不可能.

# 63 文件， 28 不可能在 2 目录中。

# 隐含规则

%_defconfig: scripts/kconfig/conf
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 102)：
	$(Q)$< $(silent) --defconfig=arch/$(SRCARCH)/configs/$@ $(Kconfig)

%.config: scripts/kconfig/conf
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 111)：
	$(if $(config-fragments),, $(error $@ fragment does not exists on this architecture))
	$(call cmd,merge_fragments)
	$(Q)$(MAKE) -f $(srctree)/Makefile olddefconfig

scripts/kconfig/%conf-cflags scripts/kconfig/%conf-libs scripts/kconfig/%conf-bin: scripts/kconfig/%conf-cfg.sh
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 234)：
	$(call cmd,conf_cfg)

scripts/kconfig/%: scripts/kconfig/%_shipped
#  要执行的配方 (从“scripts/Makefile.lib”，行 348)：
	$(call cmd,copy)

scripts/kconfig/%.s: scripts/kconfig/%.c FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 102)：
	$(call if_changed_dep,cc_s_c)

scripts/kconfig/%.i: scripts/kconfig/%.c FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 108)：
	$(call if_changed_dep,cpp_i_c)

scripts/kconfig/%.ll: scripts/kconfig/%.c FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 135)：
	$(call if_changed_dep,cc_ll_c)

scripts/kconfig/%.o: scripts/kconfig/%.c FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 207)：
	$(call if_changed_rule,cc_o_c)
	$(call cmd,force_checksrc)

scripts/kconfig/%.mod: FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 216)：
	$(call if_changed,mod)

scripts/kconfig/%.lst: scripts/kconfig/%.c FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 224)：
	$(call if_changed_dep,cc_lst_c)

scripts/kconfig/%.o: scripts/kconfig/%.rs FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 263)：
	+$(call if_changed_rule,rustc_o_rs)

scripts/kconfig/%.rsi: scripts/kconfig/%.rs FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 271)：
	+$(call if_changed_dep,rustc_rsi_rs)

scripts/kconfig/%.s: scripts/kconfig/%.rs FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 277)：
	+$(call if_changed_dep,rustc_s_rs)

scripts/kconfig/%.ll: scripts/kconfig/%.rs FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 283)：
	+$(call if_changed_dep,rustc_ll_rs)

scripts/kconfig/%.rs: scripts/kconfig/%.rs.S FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 289)：
	+$(call if_changed_dep,rustc_rs_rs_S)

scripts/kconfig/%.s: scripts/kconfig/%.S FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 327)：
	$(call if_changed_dep,cpp_s_S)

scripts/kconfig/%.o: scripts/kconfig/%.S FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 339)：
	$(call if_changed_rule,as_o_S)

scripts/kconfig/%.lds: scripts/kconfig/%.lds.S FORCE
#  要执行的配方 (从“scripts/Makefile.build”，行 352)：
	$(call if_changed_dep,cpp_lds_S)

scripts/kconfig/%.asn1.c scripts/kconfig/%.asn1.h: scripts/kconfig/%.asn1 scripts/asn1_compiler
#  要执行的配方 (从“scripts/Makefile.build”，行 361)：
	$(call cmd,asn1_compiler)

scripts/kconfig/%.lex.c: scripts/kconfig/%.l FORCE
#  要执行的配方 (从“scripts/Makefile.host”，行 9)：
	$(call if_changed,flex)

scripts/kconfig/%.tab.c scripts/kconfig/%.tab.h: scripts/kconfig/%.y FORCE
#  要执行的配方 (从“scripts/Makefile.host”，行 17)：
	$(call if_changed,bison)

# 21 条隐含规则，0 (0.0%) 终端。

# 文件

# 不是一个目标：
scripts/kconfig/qconf-bin:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

scripts/kconfig/lxdialog/yesno.o: scripts/kconfig/lxdialog/yesno.c FORCE | scripts/kconfig/mconf-cflags
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“lxdialog/yesno”
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.host”，行 131)：
	$(call if_changed_dep,host-cobjs)

# 不是一个目标：
scripts/kconfig/qconf-libs:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

alldefconfig: scripts/kconfig/conf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 85)：
	$(Q)$< $(silent) --$@ $(Kconfig)

scripts/include/xalloc.h:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.398531342
#  文件已经被更新。
#  更新成功。

scripts/include/array_size.h:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.398531342
#  文件已经被更新。
#  更新成功。

build_gconfig: scripts/kconfig/gconf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。

xconfig: scripts/kconfig/qconf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 56)：
	@$<  Kconfig

tinyconfig:
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 117)：
	$(Q)KCONFIG_ALLCONFIG=kernel/configs/tiny-base.config $(MAKE) -f $(srctree)/Makefile allnoconfig
	$(Q)$(MAKE) -f $(srctree)/Makefile tiny.config

# 不是一个目标：
scripts/kconfig/mconf.c:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

allyesconfig: scripts/kconfig/conf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 85)：
	$(Q)$< $(silent) --$@ $(Kconfig)

# 不是一个目标：
scripts/kconfig/nconf.c:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

scripts/kconfig/mnconf-common.o: scripts/kconfig/mnconf-common.c FORCE
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“mnconf-common”
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.host”，行 131)：
	$(call if_changed_dep,host-cobjs)

scripts/kconfig/lxdialog/inputbox.o: scripts/kconfig/lxdialog/inputbox.c FORCE | scripts/kconfig/mconf-cflags
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“lxdialog/inputbox”
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.host”，行 131)：
	$(call if_changed_dep,host-cobjs)

build_config: scripts/kconfig/conf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。

config: scripts/kconfig/conf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 56)：
	@$<  Kconfig

build_menuconfig: scripts/kconfig/mconf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。

# 不是一个目标：
scripts/kconfig/confdata.c:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.398531342
#  文件已经被更新。
#  更新成功。

FORCE:
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件已经被更新。
#  更新成功。

.PHONY: scripts/kconfig/ config build_config menuconfig build_menuconfig nconfig build_nconfig gconfig build_gconfig xconfig build_xconfig localmodconfig localyesconfig oldconfig allnoconfig allyesconfig allmodconfig alldefconfig randconfig listnewconfig olddefconfig syncconfig helpnewconfig yes2modconfig mod2yesconfig mod2noconfig savedefconfig defconfig tinyconfig testconfig FORCE
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

# 不是一个目标：
scripts/kconfig/Makefile:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.398531342
#  文件已经被更新。
#  更新成功。

# 不是一个目标：
scripts/kconfig/menu.c:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.406531125
#  文件已经被更新。
#  更新成功。

# 不是一个目标：
scripts/kconfig/images.c:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

scripts/kconfig/parser.tab.c: scripts/kconfig/parser.y FORCE
#  对隐含规则的搜索已完成。
#  隐含/静态模式主干：“parser”
#  文件是一个中间前提。
#  还要制作： scripts/kconfig/parser.tab.h
#  最近更新 2025-03-01 21:52:35.832851683
#  文件已经被更新。
#  更新成功。
#  要执行的配方 (从“scripts/Makefile.host”，行 17)：
	$(call if_changed,bison)

.SECONDARY:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

scripts/kconfig/nconf.gui.o: scripts/kconfig/nconf.gui.c FORCE | scripts/kconfig/nconf-cflags
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“nconf.gui”
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.host”，行 131)：
	$(call if_changed_dep,host-cobjs)

mod2noconfig: scripts/kconfig/conf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 85)：
	$(Q)$< $(silent) --$@ $(Kconfig)

build_nconfig: scripts/kconfig/nconf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。

# 不是一个目标：
scripts/kconfig/gconf-libs:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

testconfig: scripts/kconfig/conf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 123)：
	$(Q)$(PYTHON3) -B -m pytest $(src)/tests \
	-o cache_dir=$(abspath $(obj)/tests/.cache) \
	$(if $(findstring 1,$(KBUILD_VERBOSE)),--capture=no)

scripts/kconfig/preprocess.o: scripts/kconfig/preprocess.c FORCE scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/include/xalloc.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h scripts/kconfig/preprocess.h
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“preprocess”
#  最近更新 2025-03-01 21:52:36.584822627
#  文件已经被更新。
#  更新成功。
# 自动
# @ := scripts/kconfig/preprocess.o
# 自动
# % := 
# 自动
# * := preprocess
# 自动
# + := scripts/kconfig/preprocess.c FORCE scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/include/xalloc.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h scripts/kconfig/preprocess.h
# 自动
# | := 
# 自动
# < := scripts/kconfig/preprocess.c
# 自动
# ^ := scripts/kconfig/preprocess.c FORCE scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/include/xalloc.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h scripts/kconfig/preprocess.h
# 自动
# ? := 
# 变量的杂凑表状态:
# 负载=8/32=25%, 重新杂凑=0, 碰撞=12/42=29%
#  要执行的配方 (从“scripts/Makefile.host”，行 131)：
	$(call if_changed_dep,host-cobjs)

scripts/kconfig/conf: FORCE scripts/kconfig/conf.o scripts/kconfig/confdata.o scripts/kconfig/expr.o scripts/kconfig/lexer.lex.o scripts/kconfig/menu.o scripts/kconfig/parser.tab.o scripts/kconfig/preprocess.o scripts/kconfig/symbol.o scripts/kconfig/util.o
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“”
#  最近更新 2025-03-01 21:52:36.916809803
#  文件已经被更新。
#  更新成功。
# 自动
# @ := scripts/kconfig/conf
# 自动
# % := 
# 自动
# * := 
# 自动
# + := FORCE scripts/kconfig/conf.o scripts/kconfig/confdata.o scripts/kconfig/expr.o scripts/kconfig/lexer.lex.o scripts/kconfig/menu.o scripts/kconfig/parser.tab.o scripts/kconfig/preprocess.o scripts/kconfig/symbol.o scripts/kconfig/util.o
# 自动
# | := 
# 自动
# < := FORCE
# 自动
# ^ := FORCE scripts/kconfig/conf.o scripts/kconfig/confdata.o scripts/kconfig/expr.o scripts/kconfig/lexer.lex.o scripts/kconfig/menu.o scripts/kconfig/parser.tab.o scripts/kconfig/preprocess.o scripts/kconfig/symbol.o scripts/kconfig/util.o
# 自动
# ? := 
# 变量的杂凑表状态:
# 负载=8/32=25%, 重新杂凑=0, 碰撞=10/308=3%
#  要执行的配方 (从“scripts/Makefile.host”，行 123)：
	$(call if_changed,host-cmulti)

# 不是一个目标：
scripts/kconfig/gconf-cflags:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

scripts/kconfig/conf.o: scripts/kconfig/conf.c FORCE scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“conf”
#  最近更新 2025-03-01 21:52:35.33287102
#  文件已经被更新。
#  更新成功。
# 自动
# @ := scripts/kconfig/conf.o
# 自动
# % := 
# 自动
# * := conf
# 自动
# + := scripts/kconfig/conf.c FORCE scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h
# 自动
# | := 
# 自动
# < := scripts/kconfig/conf.c
# 自动
# ^ := scripts/kconfig/conf.c FORCE scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h
# 自动
# ? := 
# 变量的杂凑表状态:
# 负载=8/32=25%, 重新杂凑=0, 碰撞=13/42=31%
#  要执行的配方 (从“scripts/Makefile.host”，行 131)：
	$(call if_changed_dep,host-cobjs)

syncconfig: scripts/kconfig/conf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 85)：
	$(Q)$< $(silent) --$@ $(Kconfig)

scripts/kconfig/lxdialog/util.o: scripts/kconfig/lxdialog/util.c FORCE | scripts/kconfig/mconf-cflags
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“lxdialog/util”
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.host”，行 131)：
	$(call if_changed_dep,host-cobjs)

# 不是一个目标：
scripts/kconfig/.parser.tab.c.cmd:
#  对隐含规则的搜索已完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件已经被更新。
#  更新失败。

# 不是一个目标：
.SUFFIXES:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

scripts/kconfig/expr.o: scripts/kconfig/expr.c FORCE scripts/include/hash.h scripts/include/xalloc.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“expr”
#  最近更新 2025-03-01 21:52:35.752854777
#  文件已经被更新。
#  更新成功。
# 自动
# @ := scripts/kconfig/expr.o
# 自动
# % := 
# 自动
# * := expr
# 自动
# + := scripts/kconfig/expr.c FORCE scripts/include/hash.h scripts/include/xalloc.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h
# 自动
# | := 
# 自动
# < := scripts/kconfig/expr.c
# 自动
# ^ := scripts/kconfig/expr.c FORCE scripts/include/hash.h scripts/include/xalloc.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h
# 自动
# ? := 
# 变量的杂凑表状态:
# 负载=8/32=25%, 重新杂凑=0, 碰撞=12/42=29%
#  要执行的配方 (从“scripts/Makefile.host”，行 131)：
	$(call if_changed_dep,host-cobjs)

# 不是一个目标：
scripts/kconfig/.preprocess.o.cmd:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 21:52:36.584822627
#  文件已经被更新。
#  更新成功。

# 不是一个目标：
scripts/kconfig/.conf.cmd:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 21:52:36.920809648
#  文件已经被更新。
#  更新成功。

scripts/kconfig/symbol.o: scripts/kconfig/symbol.c FORCE scripts/include/hash.h scripts/include/xalloc.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“symbol”
#  最近更新 2025-03-01 21:52:36.844812583
#  文件已经被更新。
#  更新成功。
# 自动
# @ := scripts/kconfig/symbol.o
# 自动
# % := 
# 自动
# * := symbol
# 自动
# + := scripts/kconfig/symbol.c FORCE scripts/include/hash.h scripts/include/xalloc.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h
# 自动
# | := 
# 自动
# < := scripts/kconfig/symbol.c
# 自动
# ^ := scripts/kconfig/symbol.c FORCE scripts/include/hash.h scripts/include/xalloc.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h
# 自动
# ? := 
# 变量的杂凑表状态:
# 负载=8/32=25%, 重新杂凑=0, 碰撞=11/42=26%
#  要执行的配方 (从“scripts/Makefile.host”，行 131)：
	$(call if_changed_dep,host-cobjs)

# 不是一个目标：
scripts/kconfig/.expr.o.cmd:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 21:52:35.752854777
#  文件已经被更新。
#  更新成功。

scripts/kconfig/util.o: scripts/kconfig/util.c FORCE scripts/include/hash.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/include/xalloc.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“util”
#  最近更新 2025-03-01 21:52:36.896810575
#  文件已经被更新。
#  更新成功。
# 自动
# @ := scripts/kconfig/util.o
# 自动
# % := 
# 自动
# * := util
# 自动
# + := scripts/kconfig/util.c FORCE scripts/include/hash.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/include/xalloc.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h
# 自动
# | := 
# 自动
# < := scripts/kconfig/util.c
# 自动
# ^ := scripts/kconfig/util.c FORCE scripts/include/hash.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/include/xalloc.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h
# 自动
# ? := 
# 变量的杂凑表状态:
# 负载=8/32=25%, 重新杂凑=0, 碰撞=10/42=24%
#  要执行的配方 (从“scripts/Makefile.host”，行 131)：
	$(call if_changed_dep,host-cobjs)

# 不是一个目标：
scripts/kconfig/lexer.l:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.402531233
#  文件已经被更新。
#  更新成功。

# 不是一个目标：
scripts/kconfig/.util.o.cmd:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 21:52:36.90081042
#  文件已经被更新。
#  更新成功。

# 不是一个目标：
scripts/kconfig/.conf.o.cmd:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 21:52:35.336870866
#  文件已经被更新。
#  更新成功。

scripts/kconfig/lkc.h:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.402531233
#  文件已经被更新。
#  更新成功。

# 不是一个目标：
scripts/kconfig/.symbol.o.cmd:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 21:52:36.848812429
#  文件已经被更新。
#  更新成功。

scripts/kconfig/parser.tab.h: scripts/kconfig/parser.y FORCE
#  对隐含规则的搜索已完成。
#  隐含/静态模式主干：“parser”
#  还要制作： scripts/kconfig/parser.tab.c
#  最近更新 2025-03-01 21:52:35.812852456
#  文件已经被更新。
#  更新成功。
# 自动
# @ := scripts/kconfig/parser.tab.h
# 自动
# % := 
# 自动
# * := parser
# 自动
# + := scripts/kconfig/parser.y FORCE
# 自动
# | := 
# 自动
# < := scripts/kconfig/parser.y
# 自动
# ^ := scripts/kconfig/parser.y FORCE
# 自动
# ? := 
# 变量的杂凑表状态:
# 负载=8/32=25%, 重新杂凑=0, 碰撞=9/31=29%
#  要执行的配方 (从“scripts/Makefile.host”，行 17)：
	$(call if_changed,bison)

# 不是一个目标：
scripts/kconfig/qconf.h:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

defconfig: scripts/kconfig/conf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 94)：
	@$(kecho) "*** Default configuration is based on '$(KBUILD_DEFCONFIG)'"
	$(Q)$< $(silent) --defconfig=arch/$(SRCARCH)/configs/$(KBUILD_DEFCONFIG) $(Kconfig)

# 不是一个目标：
scripts/kconfig/lxdialog/menubox.c:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

# 不是一个目标：
scripts/kconfig/lxdialog/yesno.c:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

scripts/kconfig/lexer.lex.o: scripts/kconfig/lexer.lex.c FORCE scripts/kconfig/parser.tab.h scripts/include/xalloc.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/include/list_types.h scripts/kconfig/lkc_proto.h scripts/kconfig/preprocess.h scripts/kconfig/parser.tab.h
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“lexer.lex”
#  最近更新 2025-03-01 21:52:36.104841168
#  文件已经被更新。
#  更新成功。
# 自动
# @ := scripts/kconfig/lexer.lex.o
# 自动
# % := 
# 自动
# * := lexer.lex
# 自动
# + := scripts/kconfig/lexer.lex.c FORCE scripts/kconfig/parser.tab.h scripts/include/xalloc.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/include/list_types.h scripts/kconfig/lkc_proto.h scripts/kconfig/preprocess.h scripts/kconfig/parser.tab.h
# 自动
# | := 
# 自动
# < := scripts/kconfig/lexer.lex.c
# 自动
# ^ := scripts/kconfig/lexer.lex.c FORCE scripts/kconfig/parser.tab.h scripts/include/xalloc.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/include/list_types.h scripts/kconfig/lkc_proto.h scripts/kconfig/preprocess.h
# 自动
# ? := 
# 变量的杂凑表状态:
# 负载=8/32=25%, 重新杂凑=0, 碰撞=10/76=13%
#  要执行的配方 (从“scripts/Makefile.host”，行 131)：
	$(call if_changed_dep,host-cobjs)

# 不是一个目标：
scripts/kconfig/.parser.tab.h.cmd:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 21:52:35.832851683
#  文件已经被更新。
#  更新成功。

# 不是一个目标：
scripts/kconfig/mconf-cflags:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

scripts/include/hashtable.h:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.398531342
#  文件已经被更新。
#  更新成功。

# 不是一个目标：
scripts/kconfig/nconf-cflags:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

# 不是一个目标：
scripts/kconfig/mnconf-common.c:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

# 不是一个目标：
scripts/kconfig/lxdialog/inputbox.c:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

# 不是一个目标：
scripts/kconfig/.lexer.lex.o.cmd:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 21:52:36.104841168
#  文件已经被更新。
#  更新成功。

helpnewconfig: scripts/kconfig/conf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 85)：
	$(Q)$< $(silent) --$@ $(Kconfig)

help:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 130)：
	@echo  'Configuration targets:'
	@echo  '  config	  - Update current config utilising a line-oriented program'
	@echo  '  nconfig         - Update current config utilising a ncurses menu based program'
	@echo  '  menuconfig	  - Update current config utilising a menu based program'
	@echo  '  xconfig	  - Update current config utilising a Qt based front-end'
	@echo  '  gconfig	  - Update current config utilising a GTK+ based front-end'
	@echo  '  oldconfig	  - Update current config utilising a provided .config as base'
	@echo  '  localmodconfig  - Update current config disabling modules not loaded'
	@echo  '                    except those preserved by LMC_KEEP environment variable'
	@echo  '  localyesconfig  - Update current config converting local mods to core'
	@echo  '                    except those preserved by LMC_KEEP environment variable'
	@echo  '  defconfig	  - New config with default from ARCH supplied defconfig'
	@echo  '  savedefconfig   - Save current config as ./defconfig (minimal config)'
	@echo  '  allnoconfig	  - New config where all options are answered with no'
	@echo  '  allyesconfig	  - New config where all options are accepted with yes'
	@echo  '  allmodconfig	  - New config selecting modules when possible'
	@echo  '  alldefconfig    - New config with all symbols set to default'
	@echo  '  randconfig	  - New config with random answer to all options'
	@echo  '  yes2modconfig	  - Change answers from yes to mod if possible'
	@echo  '  mod2yesconfig	  - Change answers from mod to yes if possible'
	@echo  '  mod2noconfig	  - Change answers from mod to no if possible'
	@echo  '  listnewconfig   - List new options'
	@echo  '  helpnewconfig   - List new options and help text'
	@echo  '  olddefconfig	  - Same as oldconfig but sets new symbols to their'
	@echo  '                    default value without prompting'
	@echo  '  tinyconfig	  - Configure the tiniest possible kernel'
	@echo  '  testconfig	  - Run Kconfig unit tests (requires python3 and pytest)'
	@echo  ''
	@echo  'Configuration topic targets:'
	@$(foreach f, $(all-config-fragments), \
		if help=$$(grep -m1 '^# Help: ' $(f)); then \
			printf '  %-25s - %s\n' '$(notdir $(f))' "$${help#*: }"; \
		fi;)

scripts/kconfig/lib.a: FORCE
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.build”，行 399)：
	$(call if_changed,ar)

# 不是一个目标：
scripts/Makefile.host:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.374531993
#  文件已经被更新。
#  更新成功。

# 不是一个目标：
scripts/kconfig/parser.y:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.406531125
#  文件已经被更新。
#  更新成功。

# 不是一个目标：
scripts/kconfig/qconf-cflags:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

scripts/kconfig/gconf: FORCE scripts/kconfig/gconf.o scripts/kconfig/images.o scripts/kconfig/confdata.o scripts/kconfig/expr.o scripts/kconfig/lexer.lex.o scripts/kconfig/menu.o scripts/kconfig/parser.tab.o scripts/kconfig/preprocess.o scripts/kconfig/symbol.o scripts/kconfig/util.o | scripts/kconfig/gconf-libs
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.host”，行 123)：
	$(call if_changed,host-cmulti)

# 不是一个目标：
scripts/kconfig/nconf.gui.c:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

scripts/kconfig/gconf.o: scripts/kconfig/gconf.c FORCE | scripts/kconfig/gconf-cflags
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“gconf”
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.host”，行 131)：
	$(call if_changed_dep,host-cobjs)

# 不是一个目标：
scripts/kconfig/preprocess.c:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.406531125
#  文件已经被更新。
#  更新成功。

oldconfig: scripts/kconfig/conf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 85)：
	$(Q)$< $(silent) --$@ $(Kconfig)

# 不是一个目标：
scripts/Makefile.compiler:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.374531993
#  文件已经被更新。
#  更新成功。

# 不是一个目标：
scripts/kconfig/conf.c:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.398531342
#  文件已经被更新。
#  更新成功。

scripts/kconfig/lkc_proto.h:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.402531233
#  文件已经被更新。
#  更新成功。

olddefconfig: scripts/kconfig/conf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 85)：
	$(Q)$< $(silent) --$@ $(Kconfig)

# 不是一个目标：
scripts/kconfig/lxdialog/util.c:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

# 不是一个目标：
.DEFAULT:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

# 不是一个目标：
scripts/kconfig/expr.c:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.402531233
#  文件已经被更新。
#  更新成功。

allmodconfig: scripts/kconfig/conf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 85)：
	$(Q)$< $(silent) --$@ $(Kconfig)

# 不是一个目标：
scripts/kconfig/symbol.c:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.406531125
#  文件已经被更新。
#  更新成功。

localyesconfig: scripts/kconfig/conf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 60)：
	$(Q)$(PERL) $(src)/streamline_config.pl --$@ $(srctree) $(Kconfig) > .tmp.config
	$(Q)if [ -f .config ]; then 				\
		cmp -s .tmp.config .config ||			\
		(mv -f .config .config.old.1;			\
		 mv -f .tmp.config .config;			\
		 $< $(silent) --oldconfig $(Kconfig);		\
		 mv -f .config.old.1 .config.old)		\
	else							\
		mv -f .tmp.config .config;			\
		$< $(silent) --oldconfig $(Kconfig);		\
	fi
	$(Q)rm -f .tmp.config

scripts/kconfig/lxdialog/textbox.o: scripts/kconfig/lxdialog/textbox.c FORCE | scripts/kconfig/mconf-cflags
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“lxdialog/textbox”
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.host”，行 131)：
	$(call if_changed_dep,host-cobjs)

# 不是一个目标：
scripts/kconfig/util.c:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.410531016
#  文件已经被更新。
#  更新成功。

yes2modconfig: scripts/kconfig/conf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 85)：
	$(Q)$< $(silent) --$@ $(Kconfig)

# 不是一个目标：
scripts/kconfig/lxdialog/checklist.c:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

stm32_defconfig: scripts/kconfig/conf
#  命令行目标。
#  对隐含规则的搜索已完成。
#  隐含/静态模式主干：“stm32”
#  文件是一个中间前提。
#  文件不存在。
#  文件已经被更新。
#  更新成功。
# 自动
# @ := stm32_defconfig
# 自动
# % := 
# 自动
# * := stm32
# 自动
# + := scripts/kconfig/conf
# 自动
# | := 
# 自动
# < := scripts/kconfig/conf
# 自动
# ^ := scripts/kconfig/conf
# 自动
# ? := scripts/kconfig/conf
# 变量的杂凑表状态:
# 负载=8/32=25%, 重新杂凑=0, 碰撞=6/316=2%
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 102)：
	$(Q)$< $(silent) --defconfig=arch/$(SRCARCH)/configs/$@ $(Kconfig)

localmodconfig: scripts/kconfig/conf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 60)：
	$(Q)$(PERL) $(src)/streamline_config.pl --$@ $(srctree) $(Kconfig) > .tmp.config
	$(Q)if [ -f .config ]; then 				\
		cmp -s .tmp.config .config ||			\
		(mv -f .config .config.old.1;			\
		 mv -f .tmp.config .config;			\
		 $< $(silent) --oldconfig $(Kconfig);		\
		 mv -f .config.old.1 .config.old)		\
	else							\
		mv -f .tmp.config .config;			\
		$< $(silent) --oldconfig $(Kconfig);		\
	fi
	$(Q)rm -f .tmp.config

mod2yesconfig: scripts/kconfig/conf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 85)：
	$(Q)$< $(silent) --$@ $(Kconfig)

scripts/kconfig/qconf-moc.o: scripts/kconfig/qconf-moc.cc FORCE | scripts/kconfig/qconf-cflags
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“qconf-moc”
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.host”，行 148)：
	$(call if_changed_dep,host-cxxobjs)

scripts/kconfig/mconf: FORCE scripts/kconfig/mconf.o scripts/kconfig/lxdialog/checklist.o scripts/kconfig/lxdialog/inputbox.o scripts/kconfig/lxdialog/menubox.o scripts/kconfig/lxdialog/textbox.o scripts/kconfig/lxdialog/util.o scripts/kconfig/lxdialog/yesno.o scripts/kconfig/mnconf-common.o scripts/kconfig/confdata.o scripts/kconfig/expr.o scripts/kconfig/lexer.lex.o scripts/kconfig/menu.o scripts/kconfig/parser.tab.o scripts/kconfig/preprocess.o scripts/kconfig/symbol.o scripts/kconfig/util.o | scripts/kconfig/mconf-libs
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.host”，行 123)：
	$(call if_changed,host-cmulti)

listnewconfig: scripts/kconfig/conf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 85)：
	$(Q)$< $(silent) --$@ $(Kconfig)

scripts/kconfig/preprocess.h:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.406531125
#  文件已经被更新。
#  更新成功。

scripts/kconfig/nconf: FORCE scripts/kconfig/nconf.o scripts/kconfig/nconf.gui.o scripts/kconfig/mnconf-common.o scripts/kconfig/confdata.o scripts/kconfig/expr.o scripts/kconfig/lexer.lex.o scripts/kconfig/menu.o scripts/kconfig/parser.tab.o scripts/kconfig/preprocess.o scripts/kconfig/symbol.o scripts/kconfig/util.o | scripts/kconfig/nconf-libs
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.host”，行 123)：
	$(call if_changed,host-cmulti)

scripts/kconfig/mconf.o: scripts/kconfig/mconf.c FORCE | scripts/kconfig/mconf-cflags
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“mconf”
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.host”，行 131)：
	$(call if_changed_dep,host-cobjs)

scripts/kconfig/lxdialog/checklist.o: scripts/kconfig/lxdialog/checklist.c FORCE | scripts/kconfig/mconf-cflags
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“lxdialog/checklist”
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.host”，行 131)：
	$(call if_changed_dep,host-cobjs)

scripts/kconfig/nconf.o: scripts/kconfig/nconf.c FORCE | scripts/kconfig/nconf-cflags
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“nconf”
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.host”，行 131)：
	$(call if_changed_dep,host-cobjs)

scripts/kconfig/lexer.lex.c: scripts/kconfig/lexer.l FORCE
#  对隐含规则的搜索已完成。
#  隐含/静态模式主干：“lexer”
#  最近更新 2025-03-01 21:52:35.772854003
#  文件已经被更新。
#  更新成功。
# 自动
# @ := scripts/kconfig/lexer.lex.c
# 自动
# % := 
# 自动
# * := lexer
# 自动
# + := scripts/kconfig/lexer.l FORCE
# 自动
# | := 
# 自动
# < := scripts/kconfig/lexer.l
# 自动
# ^ := scripts/kconfig/lexer.l FORCE
# 自动
# ? := 
# 变量的杂凑表状态:
# 负载=8/32=25%, 重新杂凑=0, 碰撞=10/30=33%
#  要执行的配方 (从“scripts/Makefile.host”，行 9)：
	$(call if_changed,flex)

# 不是一个目标：
scripts/Makefile.lib:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.374531993
#  文件已经被更新。
#  更新成功。

scripts/kconfig/modules.order: FORCE
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.build”，行 392)：
	$(call if_changed,gen_order)

# 不是一个目标：
scripts/Makefile.build:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 21:37:11.027081785
#  文件已经被更新。
#  更新成功。

scripts/kconfig/expr.h:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.402531233
#  文件已经被更新。
#  更新成功。

scripts/kconfig/confdata.o: scripts/kconfig/confdata.c FORCE scripts/include/xalloc.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“confdata”
#  最近更新 2025-03-01 21:52:35.548862667
#  文件已经被更新。
#  更新成功。
# 自动
# @ := scripts/kconfig/confdata.o
# 自动
# % := 
# 自动
# * := confdata
# 自动
# + := scripts/kconfig/confdata.c FORCE scripts/include/xalloc.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h
# 自动
# | := 
# 自动
# < := scripts/kconfig/confdata.c
# 自动
# ^ := scripts/kconfig/confdata.c FORCE scripts/include/xalloc.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/include/list_types.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h
# 自动
# ? := 
# 变量的杂凑表状态:
# 负载=8/32=25%, 重新杂凑=0, 碰撞=13/42=31%
#  要执行的配方 (从“scripts/Makefile.host”，行 131)：
	$(call if_changed_dep,host-cobjs)

scripts/include/hash.h:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.398531342
#  文件已经被更新。
#  更新成功。

build_xconfig: scripts/kconfig/qconf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。

# 不是一个目标：
scripts/kconfig/.confdata.o.cmd:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 21:52:35.548862667
#  文件已经被更新。
#  更新成功。

randconfig: scripts/kconfig/conf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 85)：
	$(Q)$< $(silent) --$@ $(Kconfig)

scripts/kconfig/qconf-moc.cc: scripts/kconfig/qconf.h FORCE | scripts/kconfig/qconf-bin
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 216)：
	$(call if_changed,moc)

scripts/kconfig/qconf: FORCE scripts/kconfig/images.o scripts/kconfig/confdata.o scripts/kconfig/expr.o scripts/kconfig/lexer.lex.o scripts/kconfig/menu.o scripts/kconfig/parser.tab.o scripts/kconfig/preprocess.o scripts/kconfig/symbol.o scripts/kconfig/util.o scripts/kconfig/qconf.o scripts/kconfig/qconf-moc.o | scripts/kconfig/qconf-libs
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.host”，行 141)：
	$(call if_changed,host-cxxmulti)

scripts/kconfig/menu.o: scripts/kconfig/menu.c FORCE scripts/include/list.h scripts/include/list_types.h scripts/include/xalloc.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“menu”
#  最近更新 2025-03-01 21:52:36.268834834
#  文件已经被更新。
#  更新成功。
# 自动
# @ := scripts/kconfig/menu.o
# 自动
# % := 
# 自动
# * := menu
# 自动
# + := scripts/kconfig/menu.c FORCE scripts/include/list.h scripts/include/list_types.h scripts/include/xalloc.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h
# 自动
# | := 
# 自动
# < := scripts/kconfig/menu.c
# 自动
# ^ := scripts/kconfig/menu.c FORCE scripts/include/list.h scripts/include/list_types.h scripts/include/xalloc.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/kconfig/lkc_proto.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h
# 自动
# ? := 
# 变量的杂凑表状态:
# 负载=8/32=25%, 重新杂凑=0, 碰撞=10/42=24%
#  要执行的配方 (从“scripts/Makefile.host”，行 131)：
	$(call if_changed_dep,host-cobjs)

scripts/kconfig/images.o: scripts/kconfig/images.c FORCE
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“images”
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.host”，行 131)：
	$(call if_changed_dep,host-cobjs)

scripts/kconfig/parser.tab.o: scripts/kconfig/parser.tab.c FORCE scripts/include/xalloc.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/include/list_types.h scripts/kconfig/lkc_proto.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/kconfig/preprocess.h
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“parser.tab”
#  最近更新 2025-03-01 21:52:36.460827417
#  文件已经被更新。
#  更新成功。
# 自动
# @ := scripts/kconfig/parser.tab.o
# 自动
# % := 
# 自动
# * := parser.tab
# 自动
# + := scripts/kconfig/parser.tab.c FORCE scripts/include/xalloc.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/include/list_types.h scripts/kconfig/lkc_proto.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/kconfig/preprocess.h
# 自动
# | := 
# 自动
# < := scripts/kconfig/parser.tab.c
# 自动
# ^ := scripts/kconfig/parser.tab.c FORCE scripts/include/xalloc.h scripts/kconfig/lkc.h scripts/kconfig/expr.h scripts/include/list_types.h scripts/kconfig/lkc_proto.h scripts/kconfig/internal.h scripts/include/hashtable.h scripts/include/array_size.h scripts/include/list.h scripts/kconfig/preprocess.h
# 自动
# ? := 
# 变量的杂凑表状态:
# 负载=8/32=25%, 重新杂凑=0, 碰撞=10/42=24%
#  要执行的配方 (从“scripts/Makefile.host”，行 131)：
	$(call if_changed_dep,host-cobjs)

scripts/kconfig/qconf.o: scripts/kconfig/qconf.cc FORCE | scripts/kconfig/qconf-cflags
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“qconf”
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.host”，行 148)：
	$(call if_changed_dep,host-cxxobjs)

# 不是一个目标：
include/config/auto.conf:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:19:28.903162193
#  文件已经被更新。
#  更新成功。

scripts/include/list_types.h:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.398531342
#  文件已经被更新。
#  更新成功。

menuconfig: scripts/kconfig/mconf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 56)：
	@$<  Kconfig

.DELETE_ON_ERROR:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

# 不是一个目标：
scripts/Kbuild.include:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.374531993
#  文件已经被更新。
#  更新成功。

# 不是一个目标：
scripts/kconfig/.menu.o.cmd:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 21:52:36.268834834
#  文件已经被更新。
#  更新成功。

# 不是一个目标：
scripts/kconfig/.parser.tab.o.cmd:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 21:52:36.464827262
#  文件已经被更新。
#  更新成功。

savedefconfig: scripts/kconfig/conf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 90)：
	$(Q)$< $(silent) --$@=defconfig $(Kconfig)

# 不是一个目标：
scripts/kconfig/gconf.c:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

# 不是一个目标：
scripts/kconfig/mconf-libs:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

# 不是一个目标：
scripts/kconfig/nconf-libs:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

gconfig: scripts/kconfig/gconf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 56)：
	@$<  Kconfig

# 不是一个目标：
scripts/kconfig/.lexer.lex.c.cmd:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 21:52:35.772854003
#  文件已经被更新。
#  更新成功。

scripts/kconfig/:
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.build”，行 449)：
	@:

scripts/kconfig/internal.h:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.402531233
#  文件已经被更新。
#  更新成功。

scripts/include/list.h:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.398531342
#  文件已经被更新。
#  更新成功。

# 不是一个目标：
scripts/kconfig/qconf.cc:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

nconfig: scripts/kconfig/nconf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 56)：
	@$<  Kconfig

allnoconfig: scripts/kconfig/conf
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/kconfig/Makefile”，行 85)：
	$(Q)$< $(silent) --$@ $(Kconfig)

# 不是一个目标：
scripts/kconfig/lxdialog/textbox.c:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

scripts/kconfig/lxdialog/menubox.o: scripts/kconfig/lxdialog/menubox.c FORCE | scripts/kconfig/mconf-cflags
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“lxdialog/menubox”
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.host”，行 131)：
	$(call if_changed_dep,host-cobjs)

scripts/kconfig/built-in.a: FORCE
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“scripts/Makefile.build”，行 382)：
	$(call if_changed,ar_builtin)

# 文件杂凑表状态:
# 负载=136/1024=13%, 重新杂凑=0, 碰撞=46/622=7%
# VPATH 搜索路径

# 没有“vpath”搜索路径。

# 没有通用搜索路径(“VPATH”变量)。

# strcache 缓冲: 1 (0) / 字串 = 314 / 空间 = 6358 B / 平均 = 20 B
# 目前缓冲: 尺寸 = 8162 B / 已用 = 6358 B / 数量 = 314 / 平均 = 20 B

# strcache 性能：查找 = 895 / 命中率 = 64%
# 杂凑表统计数据:
# 负载=314/8192=4%, 重新杂凑=0, 碰撞=36/895=4%
# 在 Sat Mar  1 21:52:58 2025
 上完成 make 数据基础
# GNU Make 4.2.1
# 为 x86_64-pc-linux-gnu 编译
# Copyright (C) 1988-2016 Free Software Foundation, Inc.
# 许可证：GPLv3+：GNU 通用公共许可证第 3 版或更新版本<http://gnu.org/licenses/gpl.html>。
# 本软件是自由软件：您可以自由修改和重新发布它。
# 在法律允许的范围内没有其他保证。

# make 数据基础，打印在 Sat Mar  1 21:52:58 2025

# 变量

# 环境
VSCODE_GIT_ASKPASS_MAIN = /home/embedsky/.vscode-server/cli/servers/Stable-e54c774e0add60467559eb0d1e229c6452cf8447/server/extensions/git/dist/askpass-main.js
# makefile (从“scripts/Kbuild.include”，行 206)
cmd_and_fixdep = $(cmd); $(objtree)/scripts/basic/fixdep $(depfile) $@ '$(make-cmd)' > $(dot-target).cmd; rm -f $(depfile)
# 环境
quiet = quiet_
# 自动
?F = $(notdir $?)
# makefile (从“arch/arm/Makefile”，行 13)
LDFLAGS_vmlinux := --no-undefined -X --pic-veneer -z norelro
# 自动
<D = $(patsubst %/,%,$(dir $<))
# 环境
PAPERSIZE = letter
# makefile (从“scripts/Kbuild.include”，行 32)
test-lt = $(call test-gt, $2, $1)
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 527)
BINDGEN = bindgen
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 555)
AFLAGS_KERNEL = 
# 默认
.SHELLFLAGS := -c
# 环境
KBUILD_CLIPPY = 
# 环境
XDG_SESSION_CLASS = user
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 3)
PATCHLEVEL = 14
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 707)
RUSTC_VERSION_TEXT = $(subst $(pound),,$(shell $(RUSTC) --version 2>/dev/null))
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 559)
USERINCLUDE := -I./arch/arm/include/uapi -I./arch/arm/include/generated/uapi -I./include/uapi -I./include/generated/uapi -include ./include/linux/compiler-version.h -include ./include/linux/kconfig.h
# 环境
XDG_SESSION_TYPE = tty
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 609)
RUSTC_OR_CLIPPY_QUIET := RUSTC
# makefile (从“arch/arm/Makefile”，行 247)
core- = $(patsubst %,arch/arm/mach-%/,$(machine-)) arch/arm/plat-orion/
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 42)
abs_srctree := /home/embedsky/share/linux-stable
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 444)
HOST_LFS_CFLAGS := 
# 自动
?D = $(patsubst %/,%,$(dir $?))
# makefile (从“arch/arm/Makefile”，行 307)
vdso-install- = arch/arm/vdso/vdso.so.dbg
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 498)
KBUILD_HOSTLDFLAGS := $(subst ,, )
# makefile (从“scripts/Kbuild.include”，行 97)
define filechk
	$(check-FORCE)
	$(Q)set -e; mkdir -p $(dir $@); trap "rm -f $(tmp-target)" EXIT; { $(filechk_$(1)); } > $(tmp-target); if [ ! -r $@ ] || ! cmp -s $@ $(tmp-target); then $(kecho) '  UPD     $@'; mv -f $(tmp-target) $@; fi
endef
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 525)
RUSTFMT = rustfmt
# makefile (从“arch/arm/Makefile”，行 74)
arch- := -march=armv3m
# 自动
@D = $(patsubst %/,%,$(dir $@))
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 552)
LDFLAGS_MODULE = 
# 自动
@F = $(notdir $@)
# 默认
MAKE_VERSION := 4.2.1
# makefile
CURDIR := /home/embedsky/share/linux-stable
# makefile
SHELL = /bin/sh
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 517)
NM = $(CROSS_COMPILE)nm
# makefile (从“arch/arm/Makefile”，行 235)
KBUILD_CPPFLAGS := -D__KERNEL__ -mlittle-endian  
# 环境
Q = @
# makefile (从“arch/arm/Makefile”，行 243)
core-y = $(patsubst %,arch/arm/mach-%/,$(machine-y))
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 2132)
PHONY := __all scripts_basic outputmakefile bzImage zImage Image xipImage bootpImage uImage zinstall uinstall install multi_v7_lpae_defconfig FORCE
# makefile (从“scripts/Kbuild.include”，行 72)
read-file = $(subst $(newline),$(space),$(file < $1))
# 环境
_ = /usr/bin/make
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 587)
KBUILD_RUSTFLAGS := --edition=2021 -Zbinary_dep_depinfo=y -Astable_features -Dnon_ascii_idents -Dunsafe_op_in_unsafe_fn -Wmissing_docs -Wrust_2018_idioms -Wunreachable_pub -Wclippy::all -Wclippy::ignored_unit_patterns -Wclippy::mut_mut -Wclippy::needless_bitwise_bool -Wclippy::needless_continue -Aclippy::needless_lifetimes -Wclippy::no_mangle_with_rust_abi -Wclippy::undocumented_unsafe_blocks -Wclippy::unnecessary_safety_comment -Wclippy::unnecessary_safety_doc -Wrustdoc::missing_crate_level_docs -Wrustdoc::unescaped_backticks -Cpanic=abort -Cembed-bitcode=n -Clto=n -Cforce-unwind-tables=n -Ccodegen-units=1 -Csymbol-mangling-version=v0 -Crelocation-model=static -Zfunction-sections=n -Wclippy::float_arithmetic
# makefile (从“arch/arm/Makefile”，行 161)
textofs-y := 0x00008000
# makefile (从“arch/arm/Makefile”，行 256)
KBUILD_IMAGE := arch/arm/boot/zImage
# makefile (从“arch/arm/Makefile”，行 110)
tune- := -mtune=arm1136j-s
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 601)
KBUILD_LDFLAGS_MODULE := 
# makefile (从“scripts/Kbuild.include”，行 127)
quiet_log_print = $(if $(quiet_cmd_$1), echo '  $(call escsq,$(quiet_cmd_$1)$(why))';)
# makefile (从“scripts/Makefile.defconf”，行 1)
MAKEFILE_LIST :=  /home/embedsky/share/linux-stable/Makefile scripts/Kbuild.include scripts/subarch.include scripts/Makefile.compiler arch/arm/Makefile scripts/Makefile.defconf
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 263)
building_out_of_srctree := 
# makefile (从“arch/arm/Makefile”，行 154)
CHECKFLAGS := -D__linux__ -Dlinux -D__STDC__ -Dunix -D__unix__ -Wbitwise -Wno-return-void -Wno-unknown-attribute  -D__ARMEL__ -D__arm__
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 553)
CFLAGS_KERNEL = 
# makefile (从“scripts/Makefile.compiler”，行 84)
rustc-option = $(call __rustc-option, $(RUSTC), $(KBUILD_RUSTFLAGS),$(1),$(2))
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 310)
single-build := 
# “override”指令
GNUMAKEFLAGS := 
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 540)
KLZOP = lzop
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 278)
srctree := .
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 458)
HOSTCC = gcc
# 环境
MAKELEVEL := 1
# 环境
XDG_DATA_DIRS = /usr/local/share:/usr/share:/var/lib/snapd/desktop
# makefile (从“arch/arm/Makefile”，行 151)
KBUILD_CFLAGS :=  -std=gnu11 -fshort-wchar -funsigned-char -fno-common -fno-PIE -fno-strict-aliasing -fno-dwarf2-cfi-asm -mno-fdpic -mno-unaligned-access -fno-ipa-sra -mabi=apcs-gnu -mno-thumb-interwork -marm -Wa,-mno-warn-deprecated    -msoft-float -Uarm
# 环境
DBUS_SESSION_BUS_ADDRESS = unix:path=/run/user/1000/bus
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 2)
VERSION = 6
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 446)
HOST_LFS_LIBS := 
# makefile (从“scripts/Kbuild.include”，行 61)
stringify = $(squote)$(quote)$1$(quote)$(squote)
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 462)
HOSTPKG_CONFIG = pkg-config
# makefile (从“arch/arm/Makefile”，行 146)
AFLAGS_ISA := -marm -Wa,-mno-warn-deprecated
# 环境
LC_COLLATE = C
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 533)
INSTALLKERNEL := installkernel
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 532)
AWK = awk
# makefile (从“arch/arm/Makefile”，行 152)
KBUILD_AFLAGS := -D__ASSEMBLY__ -fno-PIE -mabi=apcs-gnu -mno-thumb-interwork -marm -Wa,-mno-warn-deprecated -Wa,  -include asm/unified.h -msoft-float
# makefile (从“arch/arm/Makefile”，行 228)
machine- = actions alpine artpec aspeed at91 axxia bcm berlin clps711x davinci digicolor dove exynos footbridge gemini highbank hisi hpe ixp4xx keystone lpc18xx lpc32xx meson mmp mv78xx0 mvebu imx mediatek milbeaut mxs mstar nomadik npcm omap1 omap2 orion5x pxa qcom realtek rockchip rpc s3c s5pv210 sa1100 shmobile socfpga sti stm32 sunxi tegra ux500 vt8500 zynq versatile spear
# makefile (从“scripts/Kbuild.include”，行 36)
dot-target = $(dir $@).$(notdir $@)
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 471)
rust_common_flags := --edition=2021 -Zbinary_dep_depinfo=y -Astable_features -Dnon_ascii_idents -Dunsafe_op_in_unsafe_fn -Wmissing_docs -Wrust_2018_idioms -Wunreachable_pub -Wclippy::all -Wclippy::ignored_unit_patterns -Wclippy::mut_mut -Wclippy::needless_bitwise_bool -Wclippy::needless_continue -Aclippy::needless_lifetimes -Wclippy::no_mangle_with_rust_abi -Wclippy::undocumented_unsafe_blocks -Wclippy::unnecessary_safety_comment -Wclippy::unnecessary_safety_doc -Wrustdoc::missing_crate_level_docs -Wrustdoc::unescaped_backticks
# makefile (从“scripts/Kbuild.include”，行 214)
if_changed_rule = $(if $(if-changed-cond),$(rule_$(1)),@:)
# makefile (从“scripts/Kbuild.include”，行 8)
squote := '
# 环境
LESSOPEN = | /usr/bin/lesspipe %s
# 环境
LC_NAME = en_US.UTF-8
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 503)
CPP = $(CC) -E
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 569)
LINUXINCLUDE := -I./arch/arm/include -I./arch/arm/include/generated -I./include -I./include -I./arch/arm/include/uapi -I./arch/arm/include/generated/uapi -I./include/uapi -I./include/generated/uapi -include ./include/linux/compiler-version.h -include ./include/linux/kconfig.h
# makefile (从“scripts/Kbuild.include”，行 169)
cmd-check = $(filter-out $(subst $(space),$(space_escape),$(strip $(savedcmd_$@))), $(subst $(space),$(space_escape),$(strip $(cmd_$1))))
# makefile (从“scripts/Kbuild.include”，行 128)
log_print = echo '$(pound) $(call escsq,$(or $(quiet_cmd_$1),cmd_$1 $@)$(why))'; echo '  $(call escsq,$(cmd_$1))';
# makefile (从“scripts/Makefile.compiler”，行 56)
cc-option-yn = $(if $(call cc-option,$1),y,n)
# 环境
SSH_CONNECTION = 192.168.139.1 1627 192.168.139.128 22
# 环境
PATH = /home/embedsky/.vscode-server/cli/servers/Stable-e54c774e0add60467559eb0d1e229c6452cf8447/server/bin/remote-cli:/opt/gcc-arm-none-eabi-10.3-2021.10/bin:/home/embedsky/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/opt/EmbedSky/TQ3568/tools/aarch64-linux-gcc-v9.3/bin:/opt/EmbedSky/TQ3568/tools/aarch64-linux-gcc-v9.3/aarch64-buildroot-linux-gnu/bin:/snap/bin:/opt/fsl-imx-xwayland/6.1-mickledore/sysroots/x86_64-pokysdk-linux/usr/bin/aarch64-poky-linux:/home/embedsky/.vscode-server/data/User/globalStorage/github.copilot-chat/debugCommand:/opt/fsl-imx-xwayland/6.1-mickledore/sysroots/x86_64-pokysdk-linux/usr/bin/aarch64-poky-linux
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 595)
KBUILD_AFLAGS_KERNEL := 
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 523)
RUSTC = rustc
# makefile (从“arch/arm/Makefile”，行 90)
cpp- := -D__LINUX_ARM_ARCH__=3
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 515)
LD = $(CROSS_COMPILE)ld
# makefile (从“arch/arm/Makefile”，行 292)
INSTALL_TARGETS = zinstall uinstall install
# makefile (从“scripts/Kbuild.include”，行 119)
clean := -f ./scripts/Makefile.clean obj
# makefile (从“arch/arm/Makefile”，行 131)
AFLAGS_NOWARN := -Wa,-mno-warn-deprecated
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 531)
YACC = bison
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 535)
PYTHON3 = python3
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 466)
KBUILD_USERCFLAGS := -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer -std=gnu11 
# makefile (从“scripts/Kbuild.include”，行 10)
space := $(subst ,, )
# 环境
XDG_RUNTIME_DIR = /run/user/1000
# makefile (从“scripts/Kbuild.include”，行 12)
pound := #
# makefile (从“scripts/Makefile.compiler”，行 22)
try-run = $(shell set -e; TMP=$(TMPOUT)/tmp; trap "rm -rf $(TMPOUT)" EXIT; mkdir -p $(TMPOUT); if ($(1)) >/dev/null 2>&1; then echo "$(2)"; else echo "$(3)"; fi)
# makefile (从“scripts/Kbuild.include”，行 6)
comma := ,
# makefile (从“arch/arm/Makefile”，行 145)
CFLAGS_ISA := -marm -Wa,-mno-warn-deprecated
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 41)
this-makefile := /home/embedsky/share/linux-stable/Makefile
# makefile (从“scripts/Makefile.defconf”，行 4)
cmd_merge_fragments = $(srctree)/scripts/kconfig/merge_config.sh $4 -m -O $(objtree) $(srctree)/arch/$(SRCARCH)/configs/$2 $(foreach config,$3,$(srctree)/arch/$(SRCARCH)/configs/$(config).config)
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 294)
version_h := include/generated/uapi/linux/version.h
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 283)
VPATH := 
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 500)
KBUILD_PROCMACROLDFLAGS := $(subst ,, )
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 516)
AR = $(CROSS_COMPILE)ar
# 环境
LC_NUMERIC = C
# 环境
VSCODE_IPC_HOOK_CLI = /run/user/1000/vscode-ipc-633efaa2-24ee-46dd-9935-7440fa5906b2.sock
# makefile (从“scripts/Kbuild.include”，行 113)
build := -f ./scripts/Makefile.build obj
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 5)
EXTRAVERSION = -rc4
# 默认
.FEATURES := target-specific order-only second-expansion else-if shortest-stem undefine oneshell archives jobserver output-sync check-symlink load
# 环境
objtree = .
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 539)
KBZIP2 = bzip2
# 环境
LS_COLORS = rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 614)
RUSTC_BOOTSTRAP := 1
# makefile (从“scripts/Kbuild.include”，行 188)
newer-prereqs = $(filter-out $(PHONY),$?)
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 4)
SUBLEVEL = 0
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 544)
ZSTD = zstd
# 自动
%F = $(notdir $%)
# makefile (从“arch/arm/Makefile”，行 51)
KBUILD_LDFLAGS :=  -EL
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 438)
KCONFIG_CONFIG = .config
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 297)
no-dot-config-targets := %clean mrproper cleandocs cscope gtags TAGS tags help% %docs check% coccicheck include/generated/uapi/linux/version.h headers headers_% archheaders archscripts %asm-generic kernelversion %src-pkg dt_binding_check outputmakefile rustavailable rustfmt rustfmtcheck
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 550)
RUSTFLAGS_MODULE = 
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 459)
HOSTCXX = g++
# 环境
SSL_CERT_FILE = /usr/lib/ssl/certs/ca-certificates.crt
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 706)
CC_VERSION_TEXT = $(subst $(pound),,$(shell LC_ALL=C $(CC) --version 2>/dev/null | head -n 1))
# makefile (从“arch/arm/Makefile”，行 291)
BOOT_TARGETS = zImage Image xipImage bootpImage uImage
# 环境
PWD = /home/embedsky/share/linux-stable
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 628)
OBJCOPYFLAGS := 
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 302)
no-sync-config-targets := %clean mrproper cleandocs cscope gtags TAGS tags help% %docs check% coccicheck include/generated/uapi/linux/version.h headers headers_% archheaders archscripts %asm-generic kernelversion %src-pkg dt_binding_check outputmakefile rustavailable rustfmt rustfmtcheck %install modules_sign kernelrelease image_name
# 默认
.LOADED := 
# makefile (从“scripts/Makefile.defconf”，行 15)
define merge_into_defconfig
	$(call cmd,merge_fragments,$1,$2)
	+$(Q)$(MAKE) -f $(srctree)/Makefile olddefconfig
endef
# 自动
*D = $(patsubst %/,%,$(dir $*))
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 537)
BASH = bash
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 492)
KBUILD_HOSTCFLAGS := -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer -std=gnu11   -I ./scripts/include
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 610)
RUSTC_OR_CLIPPY = $(RUSTC)
# makefile (从“scripts/Makefile.compiler”，行 64)
gcc-min-version = $(call test-ge, $(CONFIG_GCC_VERSION), $1)
# 环境
HOME = /home/embedsky
# makefile (从“scripts/Makefile.compiler”，行 40)
as-instr = $(call try-run, printf "%b\n" "$(1)" | $(CC) -Werror $(CLANG_FLAGS) $(KBUILD_AFLAGS) -Wa$(comma)--fatal-warnings -c -x assembler-with-cpp -o "$$TMP" -,$(2),$(3))
# makefile (从“scripts/Makefile.compiler”，行 45)
__cc-option = $(call try-run, $(1) -Werror $(2) $(3) -c -x c /dev/null -o "$$TMP",$(3),$(4))
# makefile (从“arch/arm/Makefile”，行 317)
define archhelp
  echo  '* zImage        - Compressed kernel image (arch/$(ARCH)/boot/zImage)'
  echo  '  Image         - Uncompressed kernel image (arch/$(ARCH)/boot/Image)'
  echo  '* xipImage      - XIP kernel image, if configured (arch/$(ARCH)/boot/xipImage)'
  echo  '  uImage        - U-Boot wrapped zImage'
  echo  '  bootpImage    - Combined zImage and initial RAM disk'
  echo  '                  (supply initrd image via make variable INITRD=<path>)'
  echo  '  install       - Install uncompressed kernel'
  echo  '  zinstall      - Install compressed kernel'
  echo  '  uinstall      - Install U-Boot wrapped compressed kernel'
  echo  '                  Install using (your) ~/bin/$(INSTALLKERNEL) or'
  echo  '                  (distribution) /sbin/$(INSTALLKERNEL) or'
  echo  '                  install to $$(INSTALL_PATH) and run lilo'
  echo
  echo  '  multi_v7_lpae_defconfig     - multi_v7_defconfig with CONFIG_ARM_LPAE enabled'
endef
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 461)
HOSTRUSTC = rustc
# 环境
LESSCLOSE = /usr/bin/lesspipe %s %s
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 526)
CLIPPY_DRIVER = clippy-driver
# 环境
KBUILD_EXTRA_WARN = 
# 环境
LOGNAME = embedsky
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 324)
need-compiler := 1
# 自动
+F = $(notdir $+)
# makefile (从“scripts/Makefile.compiler”，行 77)
__rustc-option = $(call try-run, echo '
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 524)
RUSTDOC = rustdoc
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 543)
XZ = xz
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 494)
KBUILD_HOSTCXXFLAGS := -Wall -O2   -I ./scripts/include
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 332)
config-build := 1
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 538)
KGZIP = gzip
# makefile (从“arch/arm/Makefile”，行 115)
CFLAGS_ABI := -mabi=apcs-gnu -mno-thumb-interwork
# makefile (从“arch/arm/Makefile”，行 170)
textofs- := 0x00308000
# makefile (从“scripts/Kbuild.include”，行 65)
kbuild-file = $(or $(wildcard $(src)/Kbuild),$(src)/Makefile)
# makefile (从“scripts/Makefile.compiler”，行 16)
TMPOUT = .tmp_$$$$
# makefile (从“arch/arm/Makefile”，行 19)
GZFLAGS := -9
# 自动
^D = $(patsubst %/,%,$(dir $^))
# 环境
KBUILD_VERBOSE = 
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 541)
LZMA = lzma
# 环境
LC_TIME = en_US.UTF-8
# 环境
VSCODE_GIT_IPC_HANDLE = /run/user/1000/vscode-git-7ea07af0fe.sock
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 445)
HOST_LFS_LDFLAGS := 
# makefile (从“scripts/Kbuild.include”，行 29)
test-gt = $(shell test $(strip $1)0 -gt $(strip $2)0 && echo y)
# 环境
COLORTERM = truecolor
# 默认
MAKE = $(MAKE_COMMAND)
# 默认
MAKECMDGOALS := stm32_defconfig
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 272)
srcroot := .
# makefile (从“scripts/Kbuild.include”，行 40)
tmp-target = $(dir $@).tmp_$(notdir $@)
# makefile (从“arch/arm/Makefile”，行 29)
KBUILD_DEFCONFIG := multi_v7_defconfig
# makefile (从“scripts/Kbuild.include”，行 194)
if-changed-cond = $(newer-prereqs)$(cmd-check)$(check-FORCE)
# makefile (从“scripts/Kbuild.include”，行 81)
silent_kecho := :
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 382)
KERNELRELEASE = $(call read-file, $(objtree)/include/config/kernel.release)
# makefile (从“scripts/Kbuild.include”，行 13)
define newline


endef
# makefile (从“arch/arm/Makefile”，行 138)
CC_FLAGS_FPU := -ffreestanding -isystem /opt/gcc-arm-none-eabi-10.3-2021.10/bin/../lib/gcc/arm-none-eabi/10.3.1/include -march=armv7-a -mfloat-abi=softfp -mfpu=neon
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 307)
mixed-build := 
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 599)
KBUILD_CFLAGS_MODULE := -DMODULE
# makefile (从“scripts/Makefile.compiler”，行 60)
cc-disable-warning = $(if $(call cc-option,-W$(strip $1)),-Wno-$(strip $1))
# 环境
XDG_SESSION_ID = 3
# 环境
USER = embedsky
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 536)
CHECK = sparse
# 环境
LC_MONETARY = en_US.UTF-8
# makefile
.DEFAULT_GOAL := __all
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 617)
CLIPPY_CONF_DIR := .
# makefile (从“scripts/Kbuild.include”，行 204)
if_changed_dep = $(if $(if-changed-cond),$(cmd_and_fixdep),@:)
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 308)
need-config := 1
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 6)
NAME = Baby Opossum Posse
# 环境
sub_make_done = 1
# 自动
%D = $(patsubst %/,%,$(dir $%))
# makefile (从“scripts/Makefile.compiler”，行 89)
rustc-option-yn = $(if $(call rustc-option,$1),y,n)
# 环境
LC_TELEPHONE = en_US.UTF-8
# makefile (从“scripts/Makefile.compiler”，行 72)
ld-option = $(call try-run, $(LD) $(KBUILD_LDFLAGS) $(1) -v,$(1),$(2),$(3))
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 520)
READELF = $(CROSS_COMPILE)readelf
# 默认
MAKE_COMMAND := make
# 环境
OLDPWD = /home/embedsky/share
# 环境
VSCODE_GIT_ASKPASS_EXTRA_ARGS = 
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 548)
NOSTDINC_FLAGS := 
# makefile (从“scripts/Kbuild.include”，行 31)
test-le = $(call test-ge, $2, $1)
# 环境
TERM_PROGRAM = vscode
# 默认
.VARIABLES := 
# makefile (从“arch/arm/Makefile”，行 234)
machdirs- = arch/arm/mach-footbridge arch/arm/mach-rpc arch/arm/mach-sa1100
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 551)
AFLAGS_MODULE = 
# 自动
*F = $(notdir $*)
# 环境
LANGUAGE = zh_CN:en
# makefile (从“scripts/Kbuild.include”，行 153)
cmd = @$(if $(cmd_$(1)),set -e; $($(quiet)log_print) $(delete-on-interrupt) $(cmd_$(1)),:)
# makefile (从“scripts/Kbuild.include”，行 45)
depfile = $(subst $(comma),_,$(dot-target).d)
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 728)
KBUILD_KCONFIG := 
# 环境
VSCODE_GIT_ASKPASS_NODE = /home/embedsky/.vscode-server/cli/servers/Stable-e54c774e0add60467559eb0d1e229c6452cf8447/server/node
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 464)
KBUILD_USERHOSTCFLAGS := -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer -std=gnu11
# makefile (从“scripts/Kbuild.include”，行 182)
make-cmd = $(call escsq,$(subst $(pound),$$(pound),$(subst $$,$$$$,$(cmd_$(1)))))
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 530)
LEX = flex
# makefile (从“scripts/Kbuild.include”，行 192)
check-FORCE = $(if $(filter FORCE, $^),,$(warning FORCE prerequisite is missing))
# 环境
ARCH = arm
# makefile
MAKEFLAGS = prR --no-print-directory
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 496)
KBUILD_HOSTRUSTFLAGS := --edition=2021 -Zbinary_dep_depinfo=y -Astable_features -Dnon_ascii_idents -Dunsafe_op_in_unsafe_fn -Wmissing_docs -Wrust_2018_idioms -Wunreachable_pub -Wclippy::all -Wclippy::ignored_unit_patterns -Wclippy::mut_mut -Wclippy::needless_bitwise_bool -Wclippy::needless_continue -Aclippy::needless_lifetimes -Wclippy::no_mangle_with_rust_abi -Wclippy::undocumented_unsafe_blocks -Wclippy::unnecessary_safety_comment -Wclippy::unnecessary_safety_doc -Wrustdoc::missing_crate_level_docs -Wrustdoc::unescaped_backticks -O -Cstrip=debuginfo -Zallow-features= 
# 环境
MFLAGS = -prR --no-print-directory
# 环境
SSH_CLIENT = 192.168.139.1 1627 22
# 环境
TERM_PROGRAM_VERSION = 1.97.2
# makefile (从“scripts/Kbuild.include”，行 11)
space_escape := _-_SPACE_-_
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 554)
RUSTFLAGS_KERNEL = 
# 自动
+D = $(patsubst %/,%,$(dir $+))
# makefile (从“scripts/Makefile.compiler”，行 51)
cc-option = $(call __cc-option, $(CC), $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS),$(1),$(2))
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 519)
OBJDUMP = $(CROSS_COMPILE)objdump
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 603)
CLANG_FLAGS := 
# makefile (从“arch/arm/Makefile”，行 33)
MMUEXT := -nommu
# 环境
LC_PAPER = en_US.UTF-8
# 环境
BROWSER = /home/embedsky/.vscode-server/cli/servers/Stable-e54c774e0add60467559eb0d1e229c6452cf8447/server/bin/helpers/browser.sh
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 229)
no-print-directory := --no-print-directory
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 514)
CC = $(CROSS_COMPILE)gcc
# makefile (从“scripts/subarch.include”，行 7)
SUBARCH := x86
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 521)
STRIP = $(CROSS_COMPILE)strip
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 499)
KBUILD_HOSTLDLIBS := $(subst ,, )
# 环境
CROSS_COMPILE = arm-none-eabi-
# makefile (从“arch/arm/Makefile”，行 249)
libs-y := arch/arm/lib/ 
# makefile (从“scripts/Kbuild.include”，行 57)
escsq = $(subst $(squote),'\$(squote)',$1)
# “override”指令
.SHELLSTATUS := 0
# 环境
GIT_ASKPASS = /home/embedsky/.vscode-server/cli/servers/Stable-e54c774e0add60467559eb0d1e229c6452cf8447/server/extensions/git/dist/askpass.sh
# 默认
MAKEFILES := 
# makefile (从“scripts/Makefile.defconf”，行 27)
define merge_into_defconfig_override
	$(call cmd,merge_fragments,$1,$2,-Q)
	+$(Q)$(MAKE) -f $(srctree)/Makefile olddefconfig
endef
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 410)
SRCARCH := arm
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 442)
CONFIG_SHELL := sh
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 549)
CFLAGS_MODULE = 
# 自动
<F = $(notdir $<)
# makefile (从“scripts/Kbuild.include”，行 126)
silent_log_print = exec >/dev/null;
# 环境
LC_MEASUREMENT = en_US.UTF-8
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 534)
PERL = perl
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 600)
KBUILD_RUSTFLAGS_MODULE := --cfg MODULE
# makefile (从“arch/arm/Makefile”，行 252)
boot := arch/arm/boot
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 528)
PAHOLE = pahole
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 435)
cross_compiling := 1
# makefile (从“scripts/Makefile.compiler”，行 68)
clang-min-version = $(call test-ge, $(CONFIG_CLANG_VERSION), $1)
# makefile (从“arch/arm/Makefile”，行 238)
TEXT_OFFSET := 0x00008000
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 597)
KBUILD_RUSTFLAGS_KERNEL := 
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 309)
may-sync-config := 1
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 383)
KERNELVERSION = $(VERSION)$(if $(PATCHLEVEL),.$(PATCHLEVEL)$(if $(SUBLEVEL),.$(SUBLEVEL)))$(EXTRAVERSION)
# makefile (从“scripts/Kbuild.include”，行 80)
quiet_kecho := echo
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 637)
RCS_FIND_IGNORE := \( -name SCCS -o -name BitKeeper -o -name .svn -o -name CVS -o -name .pc -o -name .hg -o -name .git \) -prune -o
# 环境
SSL_CERT_DIR = /usr/lib/ssl/certs
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 467)
KBUILD_USERLDFLAGS := 
# makefile (从“scripts/Kbuild.include”，行 49)
basetarget = $(basename $(notdir $@))
# 自动
^F = $(notdir $^)
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 518)
OBJCOPY = $(CROSS_COMPILE)objcopy
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 409)
UTS_MACHINE := arm
# 默认
SUFFIXES := 
# makefile (从“scripts/Kbuild.include”，行 197)
if_changed = $(if $(if-changed-cond),$(cmd_and_savecmd),@:)
# makefile (从“scripts/Kbuild.include”，行 199)
cmd_and_savecmd = $(cmd); printf '%s\n' 'savedcmd_$@ := $(make-cmd)' > $(dot-target).cmd
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 598)
KBUILD_AFLAGS_MODULE := -DMODULE
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 596)
KBUILD_CFLAGS_KERNEL := 
# makefile (从“scripts/Kbuild.include”，行 147)
delete-on-interrupt = $(if $(filter-out $(PHONY), $@), $(foreach sig, HUP INT QUIT TERM PIPE, trap 'rm -f $@; trap - $(sig); kill -s $(sig) $$$$' $(sig);))
# 默认
.INCLUDE_DIRS = /usr/include /usr/local/include /usr/include
# makefile (从“scripts/Kbuild.include”，行 28)
test-ge = $(shell test $(strip $1)0 -ge $(strip $2)0 && echo y)
# 环境
LC_IDENTIFICATION = en_US.UTF-8
# 环境
KBUILD_EXTMOD = 
# 环境
KBUILD_CHECKSRC = 0
# 默认
.RECIPEPREFIX := 
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 529)
RESOLVE_BTFIDS = $(objtree)/tools/bpf/resolve_btfids/resolve_btfids
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 296)
clean-targets := %clean mrproper cleandocs
# 环境
SHLVL = 1
# 环境
MAKE_TERMERR = /dev/pts/2
# makefile (从“scripts/Kbuild.include”，行 53)
real-prereqs = $(filter-out $(PHONY), $^)
# 环境
LC_ADDRESS = en_US.UTF-8
# makefile (从“scripts/Makefile.compiler”，行 34)
as-option = $(call try-run, $(CC) -Werror $(KBUILD_CPPFLAGS) $(KBUILD_AFLAGS) $(1) -c -x assembler-with-cpp /dev/null -o "$$TMP",$(1),$(2))
# 默认
MAKE_HOST := x86_64-pc-linux-gnu
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 542)
LZ4 = lz4
# 环境
LANG = zh_CN.UTF-8
# 环境
TERM = xterm-256color
# makefile (从“scripts/Kbuild.include”，行 9)
empty := 
# makefile (从“scripts/Kbuild.include”，行 7)
quote := "
# 环境
MOTD_SHOWN = pam
# makefile (从“scripts/Kbuild.include”，行 82)
kecho := echo
# makefile (从“scripts/Makefile.compiler”，行 12)
cc-cross-prefix = $(firstword $(foreach c, $(1), $(if $(shell command -v -- $(c)gcc 2>/dev/null), $(c))))
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 43)
abs_output := /home/embedsky/share/linux-stable
# makefile (从“/home/embedsky/share/linux-stable/Makefile”，行 304)
single-targets := %.a %.i %.ko %.lds %.ll %.lst %.mod %.o %.rsi %.s %/
# 变量的杂凑表状态:
# 负载=294/1024=29%, 重新杂凑=0, 碰撞=259/1147=23%

# Pattern-specific 变量值

# 没有 pattern-specific 变量的值。

# 目录

# . (设备 2053，i-节点 927860)： 无 文件， 无 不可能 迄今为止。

# 无 文件， 无 不可能在 1 目录中。

# 隐含规则

%config: outputmakefile scripts_basic FORCE
#  要执行的配方 (从“/home/embedsky/share/linux-stable/Makefile”，行 734)：
	$(Q)$(MAKE) $(build)=scripts/kconfig $@

# 1 条隐含规则，0 (0.0%) 终端。

# 文件

outputmakefile:
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件已经被更新。
#  更新成功。

config: outputmakefile scripts_basic FORCE
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“/home/embedsky/share/linux-stable/Makefile”，行 731)：
	$(Q)$(MAKE) $(build)=scripts/kconfig $@

all: zImage
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

FORCE:
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件已经被更新。
#  更新成功。

.PHONY: __all scripts_basic outputmakefile bzImage zImage Image xipImage bootpImage uImage zinstall uinstall install multi_v7_lpae_defconfig FORCE
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

# 不是一个目标：
scripts/Makefile.defconf:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.374531993
#  文件已经被更新。
#  更新成功。

uImage: vmlinux zImage
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“arch/arm/Makefile”，行 300)：
	$(Q)$(MAKE) $(build)=$(boot) $(boot)/$@
	@$(kecho) '  Kernel: $(boot)/$@ is ready'

.SECONDARY:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

bp:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“arch/arm/Makefile”，行 310)：
		$(Q)$(MAKE) $(build)=$(boot) $(boot)/bootpImage

bzImage: zImage
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。

# 不是一个目标：
.SUFFIXES:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

__all:
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。

# 不是一个目标：
/home/embedsky/share/linux-stable/Makefile:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:00:57.982815303
#  文件已经被更新。
#  更新成功。

archprepare:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“arch/arm/Makefile”，行 286)：
	$(Q)$(MAKE) $(build)=arch/arm/tools kapi

# makefile (从“arch/arm/Makefile”，行 303)
uinstall: KBUILD_IMAGE = $(boot)/$(patsubst %install,%Image,$@)
uinstall:
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
# 变量的杂凑表状态:
# 负载=1/32=3%, 重新杂凑=0, 碰撞=0/1=0%
#  要执行的配方 (从“arch/arm/Makefile”，行 305)：
	$(call cmd,install)

bootpImage: vmlinux zImage
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“arch/arm/Makefile”，行 300)：
	$(Q)$(MAKE) $(build)=$(boot) $(boot)/$@
	@$(kecho) '  Kernel: $(boot)/$@ is ready'

archheaders:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。
#  要执行的配方 (从“arch/arm/Makefile”，行 283)：
	$(Q)$(MAKE) $(build)=arch/arm/tools uapi

# 不是一个目标：
scripts/Makefile.compiler:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.374531993
#  文件已经被更新。
#  更新成功。

Image: vmlinux
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“arch/arm/Makefile”，行 300)：
	$(Q)$(MAKE) $(build)=$(boot) $(boot)/$@
	@$(kecho) '  Kernel: $(boot)/$@ is ready'

# 不是一个目标：
.DEFAULT:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

zImage: vmlinux Image
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“arch/arm/Makefile”，行 300)：
	$(Q)$(MAKE) $(build)=$(boot) $(boot)/$@
	@$(kecho) '  Kernel: $(boot)/$@ is ready'

# “override”指令
stm32_defconfig: .SHELLSTATUS := 0
stm32_defconfig: outputmakefile scripts_basic FORCE
#  命令行目标。
#  对隐含规则的搜索已完成。
#  隐含/静态模式主干：“stm32_def”
#  文件是一个中间前提。
#  文件不存在。
#  文件已经被更新。
#  更新成功。
# 自动
# @ := stm32_defconfig
# 自动
# % := 
# 自动
# * := stm32_def
# 自动
# + := outputmakefile scripts_basic FORCE
# 自动
# | := 
# 自动
# < := outputmakefile
# 自动
# ^ := outputmakefile scripts_basic FORCE
# 自动
# ? := outputmakefile scripts_basic FORCE
# 变量的杂凑表状态:
# 负载=9/32=28%, 重新杂凑=0, 碰撞=14/95=15%
#  要执行的配方 (从“/home/embedsky/share/linux-stable/Makefile”，行 734)：
	$(Q)$(MAKE) $(build)=scripts/kconfig $@

# makefile (从“arch/arm/Makefile”，行 303)
install: KBUILD_IMAGE = $(boot)/$(patsubst %install,%Image,$@)
install:
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
# 变量的杂凑表状态:
# 负载=1/32=3%, 重新杂凑=0, 碰撞=0/1=0%
#  要执行的配方 (从“arch/arm/Makefile”，行 305)：
	$(call cmd,install)

xipImage: vmlinux
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“arch/arm/Makefile”，行 300)：
	$(Q)$(MAKE) $(build)=$(boot) $(boot)/$@
	@$(kecho) '  Kernel: $(boot)/$@ is ready'

# 不是一个目标：
arch/arm/Makefile:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:00:58.014814427
#  文件已经被更新。
#  更新成功。

# “override”指令
scripts_basic: .SHELLSTATUS := 0
scripts_basic:
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“”
#  文件是一个中间前提。
#  文件不存在。
#  文件已经被更新。
#  更新成功。
# 自动
# @ := scripts_basic
# 自动
# % := 
# 自动
# * := 
# 自动
# + := 
# 自动
# | := 
# 自动
# < := 
# 自动
# ^ := 
# 自动
# ? := 
# 变量的杂凑表状态:
# 负载=9/32=28%, 重新杂凑=0, 碰撞=14/52=27%
#  要执行的配方 (从“/home/embedsky/share/linux-stable/Makefile”，行 647)：
	$(Q)$(MAKE) $(build)=scripts/basic

# 不是一个目标：
vmlinux:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

.DELETE_ON_ERROR:
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  从不检查修改时间。
#  文件尚未被更新。

# 不是一个目标：
scripts/Kbuild.include:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.374531993
#  文件已经被更新。
#  更新成功。

multi_v7_lpae_defconfig:
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“arch/arm/Makefile”，行 315)：
	$(call merge_into_defconfig,multi_v7_defconfig,lpae)

# 不是一个目标：
scripts/subarch.include:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:01:08.418530798
#  文件已经被更新。
#  更新成功。

# makefile (从“arch/arm/Makefile”，行 303)
zinstall: KBUILD_IMAGE = $(boot)/$(patsubst %install,%Image,$@)
zinstall:
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件是一个中间前提。
#  文件不存在。
#  文件尚未被更新。
# 变量的杂凑表状态:
# 负载=1/32=3%, 重新杂凑=0, 碰撞=0/1=0%
#  要执行的配方 (从“arch/arm/Makefile”，行 305)：
	$(call cmd,install)

# 文件杂凑表状态:
# 负载=32/1024=3%, 重新杂凑=0, 碰撞=10/89=11%
# VPATH 搜索路径

# 没有“vpath”搜索路径。

# 没有通用搜索路径(“VPATH”变量)。

# strcache 缓冲: 1 (0) / 字串 = 38 / 空间 = 500 B / 平均 = 13 B
# 目前缓冲: 尺寸 = 8162 B / 已用 = 500 B / 数量 = 38 / 平均 = 13 B

# strcache 性能：查找 = 109 / 命中率 = 65%
# 杂凑表统计数据:
# 负载=38/8192=0%, 重新杂凑=0, 碰撞=0/109=0%
# 在 Sat Mar  1 21:52:58 2025
 上完成 make 数据基础
# GNU Make 4.2.1
# 为 x86_64-pc-linux-gnu 编译
# Copyright (C) 1988-2016 Free Software Foundation, Inc.
# 许可证：GPLv3+：GNU 通用公共许可证第 3 版或更新版本<http://gnu.org/licenses/gpl.html>。
# 本软件是自由软件：您可以自由修改和重新发布它。
# 在法律允许的范围内没有其他保证。

# make 数据基础，打印在 Sat Mar  1 21:52:58 2025

# 变量

# 环境
VSCODE_GIT_ASKPASS_MAIN = /home/embedsky/.vscode-server/cli/servers/Stable-e54c774e0add60467559eb0d1e229c6452cf8447/server/extensions/git/dist/askpass-main.js
# 自动
<D = $(patsubst %/,%,$(dir $<))
# 自动
?F = $(notdir $?)
# 环境
PAPERSIZE = letter
# 默认
.SHELLFLAGS := -c
# makefile (从“Makefile”，行 129)
KBUILD_CLIPPY := 
# 环境
XDG_SESSION_CLASS = user
# makefile (从“Makefile”，行 3)
PATCHLEVEL = 14
# 环境
XDG_SESSION_TYPE = tty
# makefile (从“Makefile”，行 42)
abs_srctree := /home/embedsky/share/linux-stable
# 自动
?D = $(patsubst %/,%,$(dir $?))
# 自动
@D = $(patsubst %/,%,$(dir $@))
# 自动
@F = $(notdir $@)
# 默认
MAKE_VERSION := 4.2.1
# makefile
CURDIR := /home/embedsky/share/linux-stable
# makefile
SHELL = /bin/sh
# makefile (从“Makefile”，行 87)
Q = @
# makefile (从“Makefile”，行 2132)
PHONY := __all stm32_defconfig __sub-make FORCE
# 环境
_ = /usr/bin/make
# makefile (从“Makefile”，行 1)
MAKEFILE_LIST :=  Makefile
# “override”指令
GNUMAKEFLAGS := 
# 环境
MAKELEVEL := 0
# 环境
XDG_DATA_DIRS = /usr/local/share:/usr/share:/var/lib/snapd/desktop
# 环境
DBUS_SESSION_BUS_ADDRESS = unix:path=/run/user/1000/bus
# makefile (从“Makefile”，行 2)
VERSION = 6
# makefile (从“Makefile”，行 53)
LC_COLLATE = C
# 环境
LESSOPEN = | /usr/bin/lesspipe %s
# 环境
LC_NAME = en_US.UTF-8
# 环境
SSH_CONNECTION = 192.168.139.1 1627 192.168.139.128 22
# 环境
PATH = /home/embedsky/.vscode-server/cli/servers/Stable-e54c774e0add60467559eb0d1e229c6452cf8447/server/bin/remote-cli:/opt/gcc-arm-none-eabi-10.3-2021.10/bin:/home/embedsky/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/opt/EmbedSky/TQ3568/tools/aarch64-linux-gcc-v9.3/bin:/opt/EmbedSky/TQ3568/tools/aarch64-linux-gcc-v9.3/aarch64-buildroot-linux-gnu/bin:/snap/bin:/opt/fsl-imx-xwayland/6.1-mickledore/sysroots/x86_64-pokysdk-linux/usr/bin/aarch64-poky-linux:/home/embedsky/.vscode-server/data/User/globalStorage/github.copilot-chat/debugCommand:/opt/fsl-imx-xwayland/6.1-mickledore/sysroots/x86_64-pokysdk-linux/usr/bin/aarch64-poky-linux
# makefile (从“Makefile”，行 208)
srcroot := 
# 环境
XDG_RUNTIME_DIR = /run/user/1000
# makefile (从“Makefile”，行 41)
this-makefile := Makefile
# makefile (从“Makefile”，行 54)
LC_NUMERIC = C
# 环境
VSCODE_IPC_HOOK_CLI = /run/user/1000/vscode-ipc-633efaa2-24ee-46dd-9935-7440fa5906b2.sock
# makefile (从“Makefile”，行 5)
EXTRAVERSION = -rc4
# 默认
.FEATURES := target-specific order-only second-expansion else-if shortest-stem undefine oneshell archives jobserver output-sync check-symlink load
# makefile (从“Makefile”，行 204)
objtree := .
# 环境
LS_COLORS = rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
# makefile (从“Makefile”，行 4)
SUBLEVEL = 0
# 自动
%F = $(notdir $%)
# 环境
SSL_CERT_FILE = /usr/lib/ssl/certs/ca-certificates.crt
# 环境
PWD = /home/embedsky/share/linux-stable
# 默认
.LOADED := 
# 自动
*D = $(patsubst %/,%,$(dir $*))
# 环境
HOME = /home/embedsky
# 环境
LESSCLOSE = /usr/bin/lesspipe %s %s
# makefile (从“Makefile”，行 155)
KBUILD_EXTRA_WARN = $(KBUILD_ENABLE_EXTRA_GCC_CHECKS)
# 环境
LOGNAME = embedsky
# 自动
+F = $(notdir $+)
# 自动
^D = $(patsubst %/,%,$(dir $^))
# makefile (从“Makefile”，行 101)
KBUILD_VERBOSE := 
# 环境
LC_TIME = en_US.UTF-8
# 环境
VSCODE_GIT_IPC_HANDLE = /run/user/1000/vscode-git-7ea07af0fe.sock
# 环境
COLORTERM = truecolor
# 默认
MAKE = $(MAKE_COMMAND)
# 默认
MAKECMDGOALS := stm32_defconfig
# 环境
SHLVL = 1
# 环境
XDG_SESSION_ID = 3
# 环境
USER = embedsky
# 环境
LC_MONETARY = en_US.UTF-8
# makefile
.DEFAULT_GOAL := __all
# makefile (从“Makefile”，行 6)
NAME = Baby Opossum Posse
# makefile (从“Makefile”，行 223)
sub_make_done := 1
# 自动
%D = $(patsubst %/,%,$(dir $%))
# 环境
LC_TELEPHONE = en_US.UTF-8
# 默认
MAKE_COMMAND := make
# 环境
OLDPWD = /home/embedsky/share
# 环境
VSCODE_GIT_ASKPASS_EXTRA_ARGS = 
# 环境
TERM_PROGRAM = vscode
# 默认
.VARIABLES := 
# 自动
*F = $(notdir $*)
# 环境
LANGUAGE = zh_CN:en
# 环境
VSCODE_GIT_ASKPASS_NODE = /home/embedsky/.vscode-server/cli/servers/Stable-e54c774e0add60467559eb0d1e229c6452cf8447/server/node
# 环境
ARCH = arm
# makefile
MAKEFLAGS = prR
# 环境
MFLAGS = -prR
# 环境
SSH_CLIENT = 192.168.139.1 1627 22
# 环境
TERM_PROGRAM_VERSION = 1.97.2
# makefile (从“Makefile”，行 86)
quiet = quiet_
# 自动
+D = $(patsubst %/,%,$(dir $+))
# 环境
LC_PAPER = en_US.UTF-8
# 环境
BROWSER = /home/embedsky/.vscode-server/cli/servers/Stable-e54c774e0add60467559eb0d1e229c6452cf8447/server/bin/helpers/browser.sh
# makefile (从“Makefile”，行 229)
no-print-directory := --no-print-directory
# 环境
CROSS_COMPILE = arm-none-eabi-
# 环境
GIT_ASKPASS = /home/embedsky/.vscode-server/cli/servers/Stable-e54c774e0add60467559eb0d1e229c6452cf8447/server/extensions/git/dist/askpass.sh
# 默认
MAKEFILES := 
# makefile (从“Makefile”，行 239)
need-sub-make := 1
# 自动
<F = $(notdir $<)
# 环境
LC_MEASUREMENT = en_US.UTF-8
# makefile (从“Makefile”，行 205)
output := 
# makefile (从“Makefile”，行 52)
LC_ALL := 
# 环境
SSL_CERT_DIR = /usr/lib/ssl/certs
# 自动
^F = $(notdir $^)
# 默认
SUFFIXES := 
# makefile (从“Makefile”，行 58)
GREP_OPTIONS := 
# 默认
.INCLUDE_DIRS = /usr/include /usr/local/include /usr/include
# 环境
LC_IDENTIFICATION = en_US.UTF-8
# makefile (从“Makefile”，行 152)
KBUILD_EXTMOD := 
# makefile (从“Makefile”，行 117)
KBUILD_CHECKSRC = 0
# 默认
.RECIPEPREFIX := 
# 默认
MAKE_TERMERR := /dev/pts/2
# 环境
LC_ADDRESS = en_US.UTF-8
# 默认
MAKE_HOST := x86_64-pc-linux-gnu
# 环境
LANG = zh_CN.UTF-8
# 环境
TERM = xterm-256color
# 环境
MOTD_SHOWN = pam
# makefile (从“Makefile”，行 43)
abs_output := /home/embedsky/share/linux-stable
# 变量的杂凑表状态:
# 负载=108/1024=11%, 重新杂凑=0, 碰撞=36/330=11%

# Pattern-specific 变量值

# 没有 pattern-specific 变量的值。

# 目录

# . (设备 2053，i-节点 927860)： 47 文件， 无 不可能.

# 47 文件， 无 不可能在 1 目录中。

# 隐含规则

# 没有隐含规则。

# 文件

FORCE:
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件不存在。
#  文件尚未被更新。

.PHONY: __all stm32_defconfig __sub-make FORCE
#  对隐含规则的搜索尚未完成。
#  从不检查修改时间。
#  文件尚未被更新。

# 不是一个目标：
.SUFFIXES:
#  对隐含规则的搜索尚未完成。
#  从不检查修改时间。
#  文件尚未被更新。

# 不是一个目标：
Makefile:
#  对隐含规则的搜索已完成。
#  最近更新 2025-03-01 18:00:57.982815303
#  文件已经被更新。
#  更新成功。

__sub-make:
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“”
#  文件不存在。
#  文件已经被更新。
#  更新成功。
# 自动
# @ := __sub-make
# 自动
# % := 
# 自动
# * := 
# 自动
# + := 
# 自动
# | := 
# 自动
# < := 
# 自动
# ^ := 
# 自动
# ? := 
# 变量的杂凑表状态:
# 负载=8/32=25%, 重新杂凑=0, 碰撞=4/19=21%
#  要执行的配方 (从“Makefile”，行 251)：
	$(Q)$(MAKE) $(no-print-directory) -C $(abs_output) \
	-f $(abs_srctree)/Makefile $(MAKECMDGOALS)

# 不是一个目标：
.DEFAULT:
#  对隐含规则的搜索尚未完成。
#  从不检查修改时间。
#  文件尚未被更新。

__all: __sub-make
#  假目标 (.PHONY的前提)。
#  对隐含规则的搜索尚未完成。
#  文件不存在。
#  文件尚未被更新。
#  要执行的配方 (从“Makefile”，行 247)：
	@:

stm32_defconfig: __sub-make
#  假目标 (.PHONY的前提)。
#  命令行目标。
#  对隐含规则的搜索尚未完成。
#  隐含/静态模式主干：“”
#  文件不存在。
#  文件已经被更新。
#  更新成功。
# 自动
# @ := stm32_defconfig
# 自动
# % := 
# 自动
# * := 
# 自动
# + := __sub-make
# 自动
# | := 
# 自动
# < := __sub-make
# 自动
# ^ := __sub-make
# 自动
# ? := __sub-make
# 变量的杂凑表状态:
# 负载=8/32=25%, 重新杂凑=0, 碰撞=1/22=5%
#  要执行的配方 (从“Makefile”，行 247)：
	@:

# 文件杂凑表状态:
# 负载=78/1024=8%, 重新杂凑=0, 碰撞=36/147=24%
# VPATH 搜索路径

# 没有“vpath”搜索路径。

# 没有通用搜索路径(“VPATH”变量)。

# strcache 缓冲: 1 (0) / 字串 = 126 / 空间 = 878 B / 平均 = 6 B
# 目前缓冲: 尺寸 = 8162 B / 已用 = 878 B / 数量 = 126 / 平均 = 6 B

# strcache 性能：查找 = 159 / 命中率 = 20%
# 杂凑表统计数据:
# 负载=126/8192=2%, 重新杂凑=0, 碰撞=12/159=8%
# 在 Sat Mar  1 21:52:58 2025
 上完成 make 数据基础
